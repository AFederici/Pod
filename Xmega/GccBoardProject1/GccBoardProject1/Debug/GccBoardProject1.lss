
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000678  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000678  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000062c1  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000044d6  00000000  00000000  00006b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027d1  00000000  00000000  0000b013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000024c  00000000  00000000  0000d7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0003107a  00000000  00000000  0000da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a0b  00000000  00000000  0003eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0003f4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b0e9  00000000  00000000  0003f56d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
  da:	00 00       	nop
  dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
  fe:	00 00       	nop
 100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
 102:	00 00       	nop
 104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
 106:	00 00       	nop
 108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
 112:	00 00       	nop
 114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
 116:	00 00       	nop
 118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
 11e:	00 00       	nop
 120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
 122:	00 00       	nop
 124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
 126:	00 00       	nop
 128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
 12e:	00 00       	nop
 130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
 132:	00 00       	nop
 134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
 136:	00 00       	nop
 138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
 13e:	00 00       	nop
 140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
 142:	00 00       	nop
 144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
 146:	00 00       	nop
 148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
 14e:	00 00       	nop
 150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
 152:	00 00       	nop
 154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
 156:	00 00       	nop
 158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
 15e:	00 00       	nop
 160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
 162:	00 00       	nop
 164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
 166:	00 00       	nop
 168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
 16e:	00 00       	nop
 170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
 172:	00 00       	nop
 174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
 176:	00 00       	nop
 178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
 17e:	00 00       	nop
 180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
 182:	00 00       	nop
 184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
 186:	00 00       	nop
 188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
 18e:	00 00       	nop
 190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
 192:	00 00       	nop
 194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
 196:	00 00       	nop
 198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e8 e7       	ldi	r30, 0x78	; 120
 21c:	f6 e0       	ldi	r31, 0x06	; 6
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	98 d1       	rcall	.+816    	; 0x562 <main>
 232:	20 c2       	rjmp	.+1088   	; 0x674 <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <spi_master_init>:
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
 240:	8c 01       	movw	r16, r24
 242:	c0 3c       	cpi	r28, 0xC0	; 192
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	d8 07       	cpc	r29, r24
 248:	21 f4       	brne	.+8      	; 0x252 <spi_master_init+0x1c>
 24a:	68 e0       	ldi	r22, 0x08	; 8
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	7c d0       	rcall	.+248    	; 0x348 <sysclk_enable_module>
 250:	10 c0       	rjmp	.+32     	; 0x272 <spi_master_init+0x3c>
 252:	c0 3c       	cpi	r28, 0xC0	; 192
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	d8 07       	cpc	r29, r24
 258:	21 f4       	brne	.+8      	; 0x262 <spi_master_init+0x2c>
 25a:	68 e0       	ldi	r22, 0x08	; 8
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	74 d0       	rcall	.+232    	; 0x348 <sysclk_enable_module>
 260:	0e c0       	rjmp	.+28     	; 0x27e <spi_master_init+0x48>
 262:	c0 3c       	cpi	r28, 0xC0	; 192
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	d8 07       	cpc	r29, r24
 268:	21 f4       	brne	.+8      	; 0x272 <spi_master_init+0x3c>
 26a:	68 e0       	ldi	r22, 0x08	; 8
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	6c d0       	rcall	.+216    	; 0x348 <sysclk_enable_module>
 270:	06 c0       	rjmp	.+12     	; 0x27e <spi_master_init+0x48>
 272:	00 3c       	cpi	r16, 0xC0	; 192
 274:	1b 40       	sbci	r17, 0x0B	; 11
 276:	19 f4       	brne	.+6      	; 0x27e <spi_master_init+0x48>
 278:	68 e0       	ldi	r22, 0x08	; 8
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	65 d0       	rcall	.+202    	; 0x348 <sysclk_enable_module>
 27e:	88 81       	ld	r24, Y
 280:	80 61       	ori	r24, 0x10	; 16
 282:	88 83       	st	Y, r24
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <spi_master_setup_device>:
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	7c 01       	movw	r14, r24
 29a:	c4 2f       	mov	r28, r20
 29c:	b9 01       	movw	r22, r18
 29e:	a8 01       	movw	r20, r16
 2a0:	00 e8       	ldi	r16, 0x80	; 128
 2a2:	14 e8       	ldi	r17, 0x84	; 132
 2a4:	2e e1       	ldi	r18, 0x1E	; 30
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	65 d0       	rcall	.+202    	; 0x374 <spi_xmega_set_baud_div>
 2aa:	88 23       	and	r24, r24
 2ac:	44 f0       	brlt	.+16     	; 0x2be <spi_master_setup_device+0x30>
 2ae:	f7 01       	movw	r30, r14
 2b0:	90 81       	ld	r25, Z
 2b2:	cc 0f       	add	r28, r28
 2b4:	cc 0f       	add	r28, r28
 2b6:	cc 70       	andi	r28, 0x0C	; 12
 2b8:	93 7f       	andi	r25, 0xF3	; 243
 2ba:	c9 2b       	or	r28, r25
 2bc:	c0 83       	st	Z, r28
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	08 95       	ret

000002ca <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
 2ca:	fc 01       	movw	r30, r24
 2cc:	db 01       	movw	r26, r22
	while (len--) {
 2ce:	41 15       	cp	r20, r1
 2d0:	51 05       	cpc	r21, r1
 2d2:	61 f0       	breq	.+24     	; 0x2ec <spi_read_packet+0x22>
 2d4:	46 0f       	add	r20, r22
 2d6:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	23 83       	std	Z+3, r18	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
 2dc:	92 81       	ldd	r25, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
 2de:	99 23       	and	r25, r25
 2e0:	ec f7       	brge	.-6      	; 0x2dc <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
 2e2:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
 2e4:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
 2e6:	a4 17       	cp	r26, r20
 2e8:	b5 07       	cpc	r27, r21
 2ea:	b9 f7       	brne	.-18     	; 0x2da <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
 2f0:	fb 01       	movw	r30, r22
 2f2:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
 2f4:	e8 2f       	mov	r30, r24
 2f6:	e6 95       	lsr	r30
 2f8:	e6 95       	lsr	r30
 2fa:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
 2fc:	40 e2       	ldi	r20, 0x20	; 32
 2fe:	e4 9f       	mul	r30, r20
 300:	f0 01       	movw	r30, r0
 302:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 304:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 306:	87 70       	andi	r24, 0x07	; 7
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	a9 01       	movw	r20, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <spi_select_device+0x24>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 318:	46 83       	std	Z+6, r20	; 0x06
 31a:	08 95       	ret

0000031c <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
 31c:	fb 01       	movw	r30, r22
 31e:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
 320:	e8 2f       	mov	r30, r24
 322:	e6 95       	lsr	r30
 324:	e6 95       	lsr	r30
 326:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
 328:	40 e2       	ldi	r20, 0x20	; 32
 32a:	e4 9f       	mul	r30, r20
 32c:	f0 01       	movw	r30, r0
 32e:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 330:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 332:	87 70       	andi	r24, 0x07	; 7
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	a9 01       	movw	r20, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <spi_deselect_device+0x24>
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 344:	45 83       	std	Z+5, r20	; 0x05
 346:	08 95       	ret

00000348 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	1f 92       	push	r1
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 352:	9f b7       	in	r25, 0x3f	; 63
 354:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 356:	f8 94       	cli
	return flags;
 358:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 35a:	e8 2f       	mov	r30, r24
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	e0 59       	subi	r30, 0x90	; 144
 360:	ff 4f       	sbci	r31, 0xFF	; 255
 362:	60 95       	com	r22
 364:	80 81       	ld	r24, Z
 366:	68 23       	and	r22, r24
 368:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 36a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 36c:	0f 90       	pop	r0
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	6a 01       	movw	r12, r20
 388:	7b 01       	movw	r14, r22
 38a:	db 01       	movw	r26, r22
 38c:	ca 01       	movw	r24, r20
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	a1 09       	sbc	r26, r1
 392:	b1 09       	sbc	r27, r1

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
 394:	bc 01       	movw	r22, r24
 396:	cd 01       	movw	r24, r26
 398:	60 0f       	add	r22, r16
 39a:	71 1f       	adc	r23, r17
 39c:	82 1f       	adc	r24, r18
 39e:	93 1f       	adc	r25, r19
 3a0:	a7 01       	movw	r20, r14
 3a2:	96 01       	movw	r18, r12
 3a4:	45 d1       	rcall	.+650    	; 0x630 <__udivmodsi4>

	if (divisor > 128) {
 3a6:	21 38       	cpi	r18, 0x81	; 129
 3a8:	31 05       	cpc	r19, r1
 3aa:	41 05       	cpc	r20, r1
 3ac:	51 05       	cpc	r21, r1
 3ae:	f8 f4       	brcc	.+62     	; 0x3ee <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
 3b0:	21 34       	cpi	r18, 0x41	; 65
 3b2:	60 f4       	brcc	.+24     	; 0x3cc <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
 3b4:	21 32       	cpi	r18, 0x21	; 33
 3b6:	60 f4       	brcc	.+24     	; 0x3d0 <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
 3b8:	21 31       	cpi	r18, 0x11	; 17
 3ba:	60 f4       	brcc	.+24     	; 0x3d4 <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
 3bc:	29 30       	cpi	r18, 0x09	; 9
 3be:	60 f4       	brcc	.+24     	; 0x3d8 <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
 3c0:	25 30       	cpi	r18, 0x05	; 5
 3c2:	60 f4       	brcc	.+24     	; 0x3dc <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
 3c4:	23 30       	cpi	r18, 0x03	; 3
 3c6:	60 f4       	brcc	.+24     	; 0x3e0 <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
 3d4:	82 e8       	ldi	r24, 0x82	; 130
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
 3dc:	81 e8       	ldi	r24, 0x81	; 129
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
 3e2:	98 81       	ld	r25, Y
 3e4:	9c 77       	andi	r25, 0x7C	; 124
 3e6:	98 2b       	or	r25, r24
 3e8:	98 83       	st	Y, r25

	return 1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
 3ee:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	fc 01       	movw	r30, r24
 408:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 40e:	c6 2f       	mov	r28, r22
 410:	d0 e0       	ldi	r29, 0x00	; 0
 412:	de 01       	movw	r26, r28
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <ioport_configure_port_pin+0x1a>
 418:	b5 95       	asr	r27
 41a:	a7 95       	ror	r26
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <ioport_configure_port_pin+0x16>
 420:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 422:	50 83       	st	Z, r21
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 42a:	28 30       	cpi	r18, 0x08	; 8
 42c:	31 05       	cpc	r19, r1
 42e:	89 f7       	brne	.-30     	; 0x412 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 430:	40 ff       	sbrs	r20, 0
 432:	0a c0       	rjmp	.+20     	; 0x448 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 434:	41 ff       	sbrs	r20, 1
 436:	03 c0       	rjmp	.+6      	; 0x43e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 438:	fc 01       	movw	r30, r24
 43a:	65 83       	std	Z+5, r22	; 0x05
 43c:	02 c0       	rjmp	.+4      	; 0x442 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 43e:	fc 01       	movw	r30, r24
 440:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 442:	fc 01       	movw	r30, r24
 444:	61 83       	std	Z+1, r22	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 448:	fc 01       	movw	r30, r24
 44a:	62 83       	std	Z+2, r22	; 0x02
	}
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 452:	43 e0       	ldi	r20, 0x03	; 3
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	68 e0       	ldi	r22, 0x08	; 8
 458:	80 ec       	ldi	r24, 0xC0	; 192
 45a:	97 e0       	ldi	r25, 0x07	; 7
 45c:	d2 df       	rcall	.-92     	; 0x402 <ioport_configure_port_pin>
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	58 e1       	ldi	r21, 0x18	; 24
 462:	64 e0       	ldi	r22, 0x04	; 4
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	97 e0       	ldi	r25, 0x07	; 7
 468:	cc cf       	rjmp	.-104    	; 0x402 <ioport_configure_port_pin>
 46a:	08 95       	ret

0000046c <spi_init_pins>:
};

void spi_init_pins(void)
{
	//Chip select pin PF0
	ioport_configure_port_pin(&PORTF, PIN0_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT); 
 46c:	43 e0       	ldi	r20, 0x03	; 3
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	80 ea       	ldi	r24, 0xA0	; 160
 474:	96 e0       	ldi	r25, 0x06	; 6
 476:	c5 df       	rcall	.-118    	; 0x402 <ioport_configure_port_pin>
	//Chip select pin PF1
	ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
 478:	43 e0       	ldi	r20, 0x03	; 3
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	80 ea       	ldi	r24, 0xA0	; 160
 480:	96 e0       	ldi	r25, 0x06	; 6
 482:	bf df       	rcall	.-130    	; 0x402 <ioport_configure_port_pin>
	//Chip select pin PF2
	ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
 484:	43 e0       	ldi	r20, 0x03	; 3
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	64 e0       	ldi	r22, 0x04	; 4
 48a:	80 ea       	ldi	r24, 0xA0	; 160
 48c:	96 e0       	ldi	r25, 0x06	; 6
 48e:	b9 df       	rcall	.-142    	; 0x402 <ioport_configure_port_pin>
	//Chip select pin PF3
	ioport_configure_port_pin(&PORTF, PIN3_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
 490:	43 e0       	ldi	r20, 0x03	; 3
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	68 e0       	ldi	r22, 0x08	; 8
 496:	80 ea       	ldi	r24, 0xA0	; 160
 498:	96 e0       	ldi	r25, 0x06	; 6
 49a:	b3 df       	rcall	.-154    	; 0x402 <ioport_configure_port_pin>
	//Chip select pin PR0
	ioport_configure_port_pin(&PORTR, PIN0_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
 49c:	43 e0       	ldi	r20, 0x03	; 3
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	80 ee       	ldi	r24, 0xE0	; 224
 4a4:	97 e0       	ldi	r25, 0x07	; 7
 4a6:	ad df       	rcall	.-166    	; 0x402 <ioport_configure_port_pin>
	
	//The SS pin MUST be high. otherwise will switch into slave mode
	//PF4
	ioport_configure_port_pin(&PORTF, PIN4_bm, IOPORT_PULL_UP | IOPORT_DIR_INPUT);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	58 e1       	ldi	r21, 0x18	; 24
 4ac:	60 e1       	ldi	r22, 0x10	; 16
 4ae:	80 ea       	ldi	r24, 0xA0	; 160
 4b0:	96 e0       	ldi	r25, 0x06	; 6
 4b2:	a7 df       	rcall	.-178    	; 0x402 <ioport_configure_port_pin>
	
	//MISO PF6
	ioport_configure_port_pin(&PORTF, PIN6_bm, IOPORT_DIR_INPUT); 
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	60 e4       	ldi	r22, 0x40	; 64
 4ba:	80 ea       	ldi	r24, 0xA0	; 160
 4bc:	96 e0       	ldi	r25, 0x06	; 6
 4be:	a1 df       	rcall	.-190    	; 0x402 <ioport_configure_port_pin>
	//SCK PF7
	ioport_configure_port_pin(&PORTF, PIN7_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
 4c0:	43 e0       	ldi	r20, 0x03	; 3
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	60 e8       	ldi	r22, 0x80	; 128
 4c6:	80 ea       	ldi	r24, 0xA0	; 160
 4c8:	96 e0       	ldi	r25, 0x06	; 6
 4ca:	9b cf       	rjmp	.-202    	; 0x402 <ioport_configure_port_pin>
 4cc:	08 95       	ret

000004ce <spi_init_module>:
}
void spi_init_module(void)
{
 4ce:	cf 92       	push	r12
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
	
	spi_master_init(&SPIF);
 4da:	80 ec       	ldi	r24, 0xC0	; 192
 4dc:	9b e0       	ldi	r25, 0x0B	; 11
 4de:	ab de       	rcall	.-682    	; 0x236 <spi_master_init>
	
	spi_master_setup_device(&SPIF, &spi_pf0, SPI_MODE_0, 1000000, 0);
 4e0:	c1 2c       	mov	r12, r1
 4e2:	d1 2c       	mov	r13, r1
 4e4:	76 01       	movw	r14, r12
 4e6:	00 e4       	ldi	r16, 0x40	; 64
 4e8:	12 e4       	ldi	r17, 0x42	; 66
 4ea:	2f e0       	ldi	r18, 0x0F	; 15
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	64 e0       	ldi	r22, 0x04	; 4
 4f2:	70 e2       	ldi	r23, 0x20	; 32
 4f4:	80 ec       	ldi	r24, 0xC0	; 192
 4f6:	9b e0       	ldi	r25, 0x0B	; 11
 4f8:	ca de       	rcall	.-620    	; 0x28e <spi_master_setup_device>
	spi_master_setup_device(&SPIF, &spi_pf1, SPI_MODE_0, 1000000, 0);
 4fa:	00 e4       	ldi	r16, 0x40	; 64
 4fc:	12 e4       	ldi	r17, 0x42	; 66
 4fe:	2f e0       	ldi	r18, 0x0F	; 15
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	70 e2       	ldi	r23, 0x20	; 32
 508:	80 ec       	ldi	r24, 0xC0	; 192
 50a:	9b e0       	ldi	r25, 0x0B	; 11
 50c:	c0 de       	rcall	.-640    	; 0x28e <spi_master_setup_device>
	spi_master_setup_device(&SPIF, &spi_pf2, SPI_MODE_0, 1000000, 0);
 50e:	00 e4       	ldi	r16, 0x40	; 64
 510:	12 e4       	ldi	r17, 0x42	; 66
 512:	2f e0       	ldi	r18, 0x0F	; 15
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	70 e2       	ldi	r23, 0x20	; 32
 51c:	80 ec       	ldi	r24, 0xC0	; 192
 51e:	9b e0       	ldi	r25, 0x0B	; 11
 520:	b6 de       	rcall	.-660    	; 0x28e <spi_master_setup_device>
	spi_master_setup_device(&SPIF, &spi_pf3, SPI_MODE_0, 1000000, 0);
 522:	00 e4       	ldi	r16, 0x40	; 64
 524:	12 e4       	ldi	r17, 0x42	; 66
 526:	2f e0       	ldi	r18, 0x0F	; 15
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	70 e2       	ldi	r23, 0x20	; 32
 530:	80 ec       	ldi	r24, 0xC0	; 192
 532:	9b e0       	ldi	r25, 0x0B	; 11
 534:	ac de       	rcall	.-680    	; 0x28e <spi_master_setup_device>
	spi_master_setup_device(&SPIF, &spi_pr0, SPI_MODE_0, 1000000, 0);
 536:	00 e4       	ldi	r16, 0x40	; 64
 538:	12 e4       	ldi	r17, 0x42	; 66
 53a:	2f e0       	ldi	r18, 0x0F	; 15
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e2       	ldi	r23, 0x20	; 32
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	9b e0       	ldi	r25, 0x0B	; 11
 548:	a2 de       	rcall	.-700    	; 0x28e <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
 54a:	e0 ec       	ldi	r30, 0xC0	; 192
 54c:	fb e0       	ldi	r31, 0x0B	; 11
 54e:	80 81       	ld	r24, Z
 550:	80 64       	ori	r24, 0x40	; 64
 552:	80 83       	st	Z, r24
	
	
	spi_enable(&SPIF);
}
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	08 95       	ret

00000562 <main>:

int main (void)
{
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	1f 92       	push	r1
 568:	1f 92       	push	r1
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
	board_init();
 56e:	71 df       	rcall	.-286    	; 0x452 <board_init>
	spi_init_pins();
 570:	7d df       	rcall	.-262    	; 0x46c <spi_init_pins>
	spi_init_module();
 572:	ad df       	rcall	.-166    	; 0x4ce <spi_init_module>

	uint8_t data_buffer[2] = {0xAB,0xAB};
 574:	8b ea       	ldi	r24, 0xAB	; 171
 576:	89 83       	std	Y+1, r24	; 0x01
 578:	8a 83       	std	Y+2, r24	; 0x02

	while (1) {
		spi_select_device(&SPIF, &spi_pf0);
 57a:	64 e0       	ldi	r22, 0x04	; 4
 57c:	70 e2       	ldi	r23, 0x20	; 32
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	9b e0       	ldi	r25, 0x0B	; 11
 582:	b6 de       	rcall	.-660    	; 0x2f0 <spi_select_device>
		spi_read_packet(&SPIF, data_buffer, 2);
 584:	42 e0       	ldi	r20, 0x02	; 2
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	be 01       	movw	r22, r28
 58a:	6f 5f       	subi	r22, 0xFF	; 255
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	80 ec       	ldi	r24, 0xC0	; 192
 590:	9b e0       	ldi	r25, 0x0B	; 11
 592:	9b de       	rcall	.-714    	; 0x2ca <spi_read_packet>
		spi_deselect_device(&SPIF, &spi_pf0);
 594:	64 e0       	ldi	r22, 0x04	; 4
 596:	70 e2       	ldi	r23, 0x20	; 32
 598:	80 ec       	ldi	r24, 0xC0	; 192
 59a:	9b e0       	ldi	r25, 0x0B	; 11
 59c:	bf de       	rcall	.-642    	; 0x31c <spi_deselect_device>
		
		spi_select_device(&SPIF, &spi_pf0);
 59e:	64 e0       	ldi	r22, 0x04	; 4
 5a0:	70 e2       	ldi	r23, 0x20	; 32
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	9b e0       	ldi	r25, 0x0B	; 11
 5a6:	a4 de       	rcall	.-696    	; 0x2f0 <spi_select_device>
		spi_read_packet(&SPIF, data_buffer, 2);
 5a8:	42 e0       	ldi	r20, 0x02	; 2
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	be 01       	movw	r22, r28
 5ae:	6f 5f       	subi	r22, 0xFF	; 255
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	80 ec       	ldi	r24, 0xC0	; 192
 5b4:	9b e0       	ldi	r25, 0x0B	; 11
 5b6:	89 de       	rcall	.-750    	; 0x2ca <spi_read_packet>
		spi_deselect_device(&SPIF, &spi_pf0);
 5b8:	64 e0       	ldi	r22, 0x04	; 4
 5ba:	70 e2       	ldi	r23, 0x20	; 32
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	9b e0       	ldi	r25, 0x0B	; 11
 5c0:	ad de       	rcall	.-678    	; 0x31c <spi_deselect_device>
		
		spi_select_device(&SPIF, &spi_pf0);
 5c2:	64 e0       	ldi	r22, 0x04	; 4
 5c4:	70 e2       	ldi	r23, 0x20	; 32
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	9b e0       	ldi	r25, 0x0B	; 11
 5ca:	92 de       	rcall	.-732    	; 0x2f0 <spi_select_device>
		spi_read_packet(&SPIF, data_buffer, 2);
 5cc:	42 e0       	ldi	r20, 0x02	; 2
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	be 01       	movw	r22, r28
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	80 ec       	ldi	r24, 0xC0	; 192
 5d8:	9b e0       	ldi	r25, 0x0B	; 11
 5da:	77 de       	rcall	.-786    	; 0x2ca <spi_read_packet>
		spi_deselect_device(&SPIF, &spi_pf0);
 5dc:	64 e0       	ldi	r22, 0x04	; 4
 5de:	70 e2       	ldi	r23, 0x20	; 32
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	9b e0       	ldi	r25, 0x0B	; 11
 5e4:	9b de       	rcall	.-714    	; 0x31c <spi_deselect_device>
		
		spi_select_device(&SPIF, &spi_pf0);
 5e6:	64 e0       	ldi	r22, 0x04	; 4
 5e8:	70 e2       	ldi	r23, 0x20	; 32
 5ea:	80 ec       	ldi	r24, 0xC0	; 192
 5ec:	9b e0       	ldi	r25, 0x0B	; 11
 5ee:	80 de       	rcall	.-768    	; 0x2f0 <spi_select_device>
		spi_read_packet(&SPIF, data_buffer, 2);
 5f0:	42 e0       	ldi	r20, 0x02	; 2
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	be 01       	movw	r22, r28
 5f6:	6f 5f       	subi	r22, 0xFF	; 255
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	9b e0       	ldi	r25, 0x0B	; 11
 5fe:	65 de       	rcall	.-822    	; 0x2ca <spi_read_packet>
		spi_deselect_device(&SPIF, &spi_pf0);
 600:	64 e0       	ldi	r22, 0x04	; 4
 602:	70 e2       	ldi	r23, 0x20	; 32
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	9b e0       	ldi	r25, 0x0B	; 11
 608:	89 de       	rcall	.-750    	; 0x31c <spi_deselect_device>
		
		spi_select_device(&SPIF, &spi_pf0);
 60a:	64 e0       	ldi	r22, 0x04	; 4
 60c:	70 e2       	ldi	r23, 0x20	; 32
 60e:	80 ec       	ldi	r24, 0xC0	; 192
 610:	9b e0       	ldi	r25, 0x0B	; 11
 612:	6e de       	rcall	.-804    	; 0x2f0 <spi_select_device>
		spi_read_packet(&SPIF, data_buffer, 2);
 614:	42 e0       	ldi	r20, 0x02	; 2
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	be 01       	movw	r22, r28
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	80 ec       	ldi	r24, 0xC0	; 192
 620:	9b e0       	ldi	r25, 0x0B	; 11
 622:	53 de       	rcall	.-858    	; 0x2ca <spi_read_packet>
		spi_deselect_device(&SPIF, &spi_pf0);
 624:	64 e0       	ldi	r22, 0x04	; 4
 626:	70 e2       	ldi	r23, 0x20	; 32
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	9b e0       	ldi	r25, 0x0B	; 11
 62c:	77 de       	rcall	.-786    	; 0x31c <spi_deselect_device>
		
	}
 62e:	a5 cf       	rjmp	.-182    	; 0x57a <main+0x18>

00000630 <__udivmodsi4>:
 630:	a1 e2       	ldi	r26, 0x21	; 33
 632:	1a 2e       	mov	r1, r26
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	fd 01       	movw	r30, r26
 63a:	0d c0       	rjmp	.+26     	; 0x656 <__udivmodsi4_ep>

0000063c <__udivmodsi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	ee 1f       	adc	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	a2 17       	cp	r26, r18
 646:	b3 07       	cpc	r27, r19
 648:	e4 07       	cpc	r30, r20
 64a:	f5 07       	cpc	r31, r21
 64c:	20 f0       	brcs	.+8      	; 0x656 <__udivmodsi4_ep>
 64e:	a2 1b       	sub	r26, r18
 650:	b3 0b       	sbc	r27, r19
 652:	e4 0b       	sbc	r30, r20
 654:	f5 0b       	sbc	r31, r21

00000656 <__udivmodsi4_ep>:
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	1a 94       	dec	r1
 660:	69 f7       	brne	.-38     	; 0x63c <__udivmodsi4_loop>
 662:	60 95       	com	r22
 664:	70 95       	com	r23
 666:	80 95       	com	r24
 668:	90 95       	com	r25
 66a:	9b 01       	movw	r18, r22
 66c:	ac 01       	movw	r20, r24
 66e:	bd 01       	movw	r22, r26
 670:	cf 01       	movw	r24, r30
 672:	08 95       	ret

00000674 <_exit>:
 674:	f8 94       	cli

00000676 <__stop_program>:
 676:	ff cf       	rjmp	.-2      	; 0x676 <__stop_program>
