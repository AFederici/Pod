
XmegaBoard2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00001118  000011ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000138  00802014  00802014  000011c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001230  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b6e4  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004edd  00000000  00000000  0000cb64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c82  00000000  00000000  00011a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  000166c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033085  00000000  00000000  00016dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001970  00000000  00000000  00049e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0004b7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bf68  00000000  00000000  0004b9b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	b6 c5       	rjmp	.+2924   	; 0xb96 <__vector_10>
      2a:	00 00       	nop
      2c:	d7 c5       	rjmp	.+2990   	; 0xbdc <__vector_11>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c1       	rjmp	.+830    	; 0x374 <__vector_13>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	08 c3       	rjmp	.+1552   	; 0x672 <__vector_24>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c1 c1       	rjmp	.+898    	; 0x43c <__vector_46>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	53 c1       	rjmp	.+678    	; 0x3d8 <__vector_76>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	79 c1       	rjmp	.+754    	; 0x4a0 <__vector_107>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e1       	ldi	r30, 0x18	; 24
     21c:	f1 e1       	ldi	r31, 0x11	; 17
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a4 31       	cpi	r26, 0x14	; 20
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a4 e1       	ldi	r26, 0x14	; 20
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ac 34       	cpi	r26, 0x4C	; 76
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	ad d6       	rcall	.+3418   	; 0xf9c <main>
     242:	68 c7       	rjmp	.+3792   	; 0x1114 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     24a:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <__data_end>
     24e:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <__data_end+0x1>
     252:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     254:	83 ff       	sbrs	r24, 3
     256:	08 c0       	rjmp	.+16     	; 0x268 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     258:	88 60       	ori	r24, 0x08	; 8
     25a:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     260:	86 ef       	ldi	r24, 0xF6	; 246
     262:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__data_end+0xa>
     266:	83 c0       	rjmp	.+262    	; 0x36e <twim_interrupt_handler+0x128>
     268:	98 2f       	mov	r25, r24
     26a:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     26c:	31 f0       	breq	.+12     	; 0x27a <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__data_end+0xa>
     278:	7a c0       	rjmp	.+244    	; 0x36e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     27a:	86 ff       	sbrs	r24, 6
     27c:	43 c0       	rjmp	.+134    	; 0x304 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     27e:	c4 e1       	ldi	r28, 0x14	; 20
     280:	d0 e2       	ldi	r29, 0x20	; 32
     282:	aa 81       	ldd	r26, Y+2	; 0x02
     284:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     286:	8c 81       	ldd	r24, Y+4	; 0x04
     288:	9d 81       	ldd	r25, Y+5	; 0x05
     28a:	14 96       	adiw	r26, 0x04	; 4
     28c:	2d 91       	ld	r18, X+
     28e:	3c 91       	ld	r19, X
     290:	15 97       	sbiw	r26, 0x05	; 5
     292:	82 17       	cp	r24, r18
     294:	93 07       	cpc	r25, r19
     296:	6c f4       	brge	.+26     	; 0x2b2 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     298:	9c 01       	movw	r18, r24
     29a:	2f 5f       	subi	r18, 0xFF	; 255
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
     29e:	20 93 18 20 	sts	0x2018, r18	; 0x802018 <__data_end+0x4>
     2a2:	30 93 19 20 	sts	0x2019, r19	; 0x802019 <__data_end+0x5>
     2a6:	a8 0f       	add	r26, r24
     2a8:	b9 1f       	adc	r27, r25
     2aa:	11 96       	adiw	r26, 0x01	; 1
     2ac:	8c 91       	ld	r24, X
     2ae:	87 83       	std	Z+7, r24	; 0x07
     2b0:	5e c0       	rjmp	.+188    	; 0x36e <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     2b2:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__data_end+0x6>
     2b6:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__data_end+0x7>
     2ba:	18 96       	adiw	r26, 0x08	; 8
     2bc:	2d 91       	ld	r18, X+
     2be:	3c 91       	ld	r19, X
     2c0:	19 97       	sbiw	r26, 0x09	; 9
     2c2:	82 17       	cp	r24, r18
     2c4:	93 07       	cpc	r25, r19
     2c6:	c8 f4       	brcc	.+50     	; 0x2fa <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     2c8:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__data_end+0x8>
     2cc:	22 23       	and	r18, r18
     2ce:	21 f0       	breq	.+8      	; 0x2d8 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     2d0:	86 81       	ldd	r24, Z+6	; 0x06
     2d2:	81 60       	ori	r24, 0x01	; 1
     2d4:	86 83       	std	Z+6, r24	; 0x06
     2d6:	4b c0       	rjmp	.+150    	; 0x36e <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     2d8:	16 96       	adiw	r26, 0x06	; 6
     2da:	2d 91       	ld	r18, X+
     2dc:	3c 91       	ld	r19, X
     2de:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     2e0:	ac 01       	movw	r20, r24
     2e2:	4f 5f       	subi	r20, 0xFF	; 255
     2e4:	5f 4f       	sbci	r21, 0xFF	; 255
     2e6:	40 93 1a 20 	sts	0x201A, r20	; 0x80201a <__data_end+0x6>
     2ea:	50 93 1b 20 	sts	0x201B, r21	; 0x80201b <__data_end+0x7>
     2ee:	d9 01       	movw	r26, r18
     2f0:	a8 0f       	add	r26, r24
     2f2:	b9 1f       	adc	r27, r25
     2f4:	8c 91       	ld	r24, X
     2f6:	87 83       	std	Z+7, r24	; 0x07
     2f8:	3a c0       	rjmp	.+116    	; 0x36e <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     2fe:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <__data_end+0xa>
     302:	35 c0       	rjmp	.+106    	; 0x36e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     304:	88 23       	and	r24, r24
     306:	84 f5       	brge	.+96     	; 0x368 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     308:	a4 e1       	ldi	r26, 0x14	; 20
     30a:	b0 e2       	ldi	r27, 0x20	; 32
     30c:	12 96       	adiw	r26, 0x02	; 2
     30e:	cd 91       	ld	r28, X+
     310:	dc 91       	ld	r29, X
     312:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     314:	16 96       	adiw	r26, 0x06	; 6
     316:	8d 91       	ld	r24, X+
     318:	9c 91       	ld	r25, X
     31a:	17 97       	sbiw	r26, 0x07	; 7
     31c:	28 85       	ldd	r18, Y+8	; 0x08
     31e:	39 85       	ldd	r19, Y+9	; 0x09
     320:	82 17       	cp	r24, r18
     322:	93 07       	cpc	r25, r19
     324:	d8 f4       	brcc	.+54     	; 0x35c <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     326:	6e 81       	ldd	r22, Y+6	; 0x06
     328:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     32a:	9c 01       	movw	r18, r24
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	3f 4f       	sbci	r19, 0xFF	; 255
     330:	20 93 1a 20 	sts	0x201A, r18	; 0x80201a <__data_end+0x6>
     334:	30 93 1b 20 	sts	0x201B, r19	; 0x80201b <__data_end+0x7>
     338:	47 81       	ldd	r20, Z+7	; 0x07
     33a:	db 01       	movw	r26, r22
     33c:	a8 0f       	add	r26, r24
     33e:	b9 1f       	adc	r27, r25
     340:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     342:	88 85       	ldd	r24, Y+8	; 0x08
     344:	99 85       	ldd	r25, Y+9	; 0x09
     346:	28 17       	cp	r18, r24
     348:	39 07       	cpc	r19, r25
     34a:	18 f4       	brcc	.+6      	; 0x352 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	83 83       	std	Z+3, r24	; 0x03
     350:	0e c0       	rjmp	.+28     	; 0x36e <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     356:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <__data_end+0xa>
     35a:	09 c0       	rjmp	.+18     	; 0x36e <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     360:	89 ef       	ldi	r24, 0xF9	; 249
     362:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__data_end+0xa>
     366:	03 c0       	rjmp	.+6      	; 0x36e <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     368:	8b ef       	ldi	r24, 0xFB	; 251
     36a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__data_end+0xa>
	}
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     374:	1f 92       	push	r1
     376:	0f 92       	push	r0
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	08 b6       	in	r0, 0x38	; 56
     380:	0f 92       	push	r0
     382:	18 be       	out	0x38, r1	; 56
     384:	09 b6       	in	r0, 0x39	; 57
     386:	0f 92       	push	r0
     388:	19 be       	out	0x39, r1	; 57
     38a:	0b b6       	in	r0, 0x3b	; 59
     38c:	0f 92       	push	r0
     38e:	1b be       	out	0x3b, r1	; 59
     390:	2f 93       	push	r18
     392:	3f 93       	push	r19
     394:	4f 93       	push	r20
     396:	5f 93       	push	r21
     398:	6f 93       	push	r22
     39a:	7f 93       	push	r23
     39c:	8f 93       	push	r24
     39e:	9f 93       	push	r25
     3a0:	af 93       	push	r26
     3a2:	bf 93       	push	r27
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
     3a8:	4e df       	rcall	.-356    	; 0x246 <twim_interrupt_handler>
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	0f 90       	pop	r0
     3c4:	0b be       	out	0x3b, r0	; 59
     3c6:	0f 90       	pop	r0
     3c8:	09 be       	out	0x39, r0	; 57
     3ca:	0f 90       	pop	r0
     3cc:	08 be       	out	0x38, r0	; 56
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	08 b6       	in	r0, 0x38	; 56
     3e4:	0f 92       	push	r0
     3e6:	18 be       	out	0x38, r1	; 56
     3e8:	09 b6       	in	r0, 0x39	; 57
     3ea:	0f 92       	push	r0
     3ec:	19 be       	out	0x39, r1	; 57
     3ee:	0b b6       	in	r0, 0x3b	; 59
     3f0:	0f 92       	push	r0
     3f2:	1b be       	out	0x3b, r1	; 59
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
     40c:	1c df       	rcall	.-456    	; 0x246 <twim_interrupt_handler>
     40e:	ff 91       	pop	r31
     410:	ef 91       	pop	r30
     412:	bf 91       	pop	r27
     414:	af 91       	pop	r26
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	7f 91       	pop	r23
     41c:	6f 91       	pop	r22
     41e:	5f 91       	pop	r21
     420:	4f 91       	pop	r20
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	0b be       	out	0x3b, r0	; 59
     42a:	0f 90       	pop	r0
     42c:	09 be       	out	0x39, r0	; 57
     42e:	0f 90       	pop	r0
     430:	08 be       	out	0x38, r0	; 56
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	08 b6       	in	r0, 0x38	; 56
     448:	0f 92       	push	r0
     44a:	18 be       	out	0x38, r1	; 56
     44c:	09 b6       	in	r0, 0x39	; 57
     44e:	0f 92       	push	r0
     450:	19 be       	out	0x39, r1	; 57
     452:	0b b6       	in	r0, 0x3b	; 59
     454:	0f 92       	push	r0
     456:	1b be       	out	0x3b, r1	; 59
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
     470:	ea de       	rcall	.-556    	; 0x246 <twim_interrupt_handler>
     472:	ff 91       	pop	r31
     474:	ef 91       	pop	r30
     476:	bf 91       	pop	r27
     478:	af 91       	pop	r26
     47a:	9f 91       	pop	r25
     47c:	8f 91       	pop	r24
     47e:	7f 91       	pop	r23
     480:	6f 91       	pop	r22
     482:	5f 91       	pop	r21
     484:	4f 91       	pop	r20
     486:	3f 91       	pop	r19
     488:	2f 91       	pop	r18
     48a:	0f 90       	pop	r0
     48c:	0b be       	out	0x3b, r0	; 59
     48e:	0f 90       	pop	r0
     490:	09 be       	out	0x39, r0	; 57
     492:	0f 90       	pop	r0
     494:	08 be       	out	0x38, r0	; 56
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	08 b6       	in	r0, 0x38	; 56
     4ac:	0f 92       	push	r0
     4ae:	18 be       	out	0x38, r1	; 56
     4b0:	09 b6       	in	r0, 0x39	; 57
     4b2:	0f 92       	push	r0
     4b4:	19 be       	out	0x39, r1	; 57
     4b6:	0b b6       	in	r0, 0x3b	; 59
     4b8:	0f 92       	push	r0
     4ba:	1b be       	out	0x3b, r1	; 59
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
     4d2:	ff 93       	push	r31
     4d4:	b8 de       	rcall	.-656    	; 0x246 <twim_interrupt_handler>
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0b be       	out	0x3b, r0	; 59
     4f2:	0f 90       	pop	r0
     4f4:	09 be       	out	0x39, r0	; 57
     4f6:	0f 90       	pop	r0
     4f8:	08 be       	out	0x38, r0	; 56
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     504:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     506:	db 01       	movw	r26, r22
     508:	14 96       	adiw	r26, 0x04	; 4
     50a:	8c 91       	ld	r24, X
     50c:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     50e:	88 eb       	ldi	r24, 0xB8	; 184
     510:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     516:	e4 e1       	ldi	r30, 0x14	; 20
     518:	f0 e2       	ldi	r31, 0x20	; 32
     51a:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     51c:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     51e:	e0 ea       	ldi	r30, 0xA0	; 160
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	82 60       	ori	r24, 0x02	; 2
     526:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     528:	78 94       	sei

	return STATUS_OK;
}
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	08 95       	ret

0000052e <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	1f 92       	push	r1
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     53a:	89 2b       	or	r24, r25
     53c:	09 f4       	brne	.+2      	; 0x540 <twi_master_transfer+0x12>
     53e:	4b c0       	rjmp	.+150    	; 0x5d6 <twi_master_transfer+0xa8>
     540:	61 15       	cp	r22, r1
     542:	71 05       	cpc	r23, r1
     544:	09 f4       	brne	.+2      	; 0x548 <twi_master_transfer+0x1a>
     546:	49 c0       	rjmp	.+146    	; 0x5da <twi_master_transfer+0xac>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     548:	fb 01       	movw	r30, r22
     54a:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     54c:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <__data_end+0x9>
     550:	88 23       	and	r24, r24
     552:	19 f0       	breq	.+6      	; 0x55a <twi_master_transfer+0x2c>

		if (no_wait) { return ERR_BUSY; }
     554:	99 23       	and	r25, r25
     556:	f1 f3       	breq	.-4      	; 0x554 <twi_master_transfer+0x26>
     558:	42 c0       	rjmp	.+132    	; 0x5de <twi_master_transfer+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     55a:	8f b7       	in	r24, 0x3f	; 63
     55c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     55e:	f8 94       	cli
	return flags;
     560:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     562:	e4 e1       	ldi	r30, 0x14	; 20
     564:	f0 e2       	ldi	r31, 0x20	; 32
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
     56a:	90 e8       	ldi	r25, 0x80	; 128
     56c:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     56e:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     570:	a0 83       	st	Z, r26
     572:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
     574:	62 83       	std	Z+2, r22	; 0x02
     576:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
     578:	14 82       	std	Z+4, r1	; 0x04
     57a:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
     57c:	16 82       	std	Z+6, r1	; 0x06
     57e:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
     580:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
     582:	fb 01       	movw	r30, r22
     584:	80 81       	ld	r24, Z
     586:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     588:	24 81       	ldd	r18, Z+4	; 0x04
     58a:	35 81       	ldd	r19, Z+5	; 0x05
     58c:	23 2b       	or	r18, r19
     58e:	11 f4       	brne	.+4      	; 0x594 <twi_master_transfer+0x66>
     590:	41 11       	cpse	r20, r1
     592:	03 c0       	rjmp	.+6      	; 0x59a <twi_master_transfer+0x6c>
			transfer.bus->MASTER.ADDR = chip;
     594:	16 96       	adiw	r26, 0x06	; 6
     596:	8c 93       	st	X, r24
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <twi_master_transfer+0x72>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     59a:	81 60       	ori	r24, 0x01	; 1
     59c:	16 96       	adiw	r26, 0x06	; 6
     59e:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     5a0:	e4 e1       	ldi	r30, 0x14	; 20
     5a2:	f0 e2       	ldi	r31, 0x20	; 32
     5a4:	82 85       	ldd	r24, Z+10	; 0x0a
     5a6:	80 38       	cpi	r24, 0x80	; 128
     5a8:	e9 f3       	breq	.-6      	; 0x5a4 <twi_master_transfer+0x76>

	while (! twim_idle(transfer.bus)) { barrier(); }
     5aa:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <__data_end>
     5ae:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <__data_end+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     5b2:	84 81       	ldd	r24, Z+4	; 0x04
     5b4:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	49 f0       	breq	.+18     	; 0x5cc <twi_master_transfer+0x9e>
     5ba:	a4 e1       	ldi	r26, 0x14	; 20
     5bc:	b0 e2       	ldi	r27, 0x20	; 32
     5be:	ed 91       	ld	r30, X+
     5c0:	fc 91       	ld	r31, X
     5c2:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     5c4:	84 81       	ldd	r24, Z+4	; 0x04
     5c6:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	c9 f7       	brne	.-14     	; 0x5be <twi_master_transfer+0x90>

	status_code_t const status = transfer.status;
     5cc:	e4 e1       	ldi	r30, 0x14	; 20
     5ce:	f0 e2       	ldi	r31, 0x20	; 32
     5d0:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     5d2:	11 86       	std	Z+9, r1	; 0x09
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <twi_master_transfer+0xb2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     5d6:	88 ef       	ldi	r24, 0xF8	; 248
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <twi_master_transfer+0xb2>
     5da:	88 ef       	ldi	r24, 0xF8	; 248
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <twi_master_transfer+0xb2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     5de:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     5e0:	0f 90       	pop	r0
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <circular_buffer_push>:
 */ 

#include "circular_buffer.h"

inline void circular_buffer_push(circular_buffer_t * cb, uint8_t data){
	cb->buffer[cb->front] = data;
     5e8:	fc 01       	movw	r30, r24
     5ea:	e8 58       	subi	r30, 0x88	; 136
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	20 81       	ld	r18, Z
     5f0:	dc 01       	movw	r26, r24
     5f2:	a2 0f       	add	r26, r18
     5f4:	b1 1d       	adc	r27, r1
     5f6:	6c 93       	st	X, r22
	cb->front++;
     5f8:	80 81       	ld	r24, Z
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	80 83       	st	Z, r24
	cb->front =  cb->front % MAX_BUFFER_SIZE;
     5fe:	90 81       	ld	r25, Z
     600:	89 e8       	ldi	r24, 0x89	; 137
     602:	98 9f       	mul	r25, r24
     604:	81 2d       	mov	r24, r1
     606:	11 24       	eor	r1, r1
     608:	82 95       	swap	r24
     60a:	86 95       	lsr	r24
     60c:	86 95       	lsr	r24
     60e:	83 70       	andi	r24, 0x03	; 3
     610:	28 e7       	ldi	r18, 0x78	; 120
     612:	82 9f       	mul	r24, r18
     614:	90 19       	sub	r25, r0
     616:	11 24       	eor	r1, r1
     618:	90 83       	st	Z, r25
     61a:	08 95       	ret

0000061c <circular_buffer_pop>:
}
inline uint8_t circular_buffer_pop(circular_buffer_t * cb){
	uint8_t ret = cb->buffer[cb->back];
     61c:	fc 01       	movw	r30, r24
     61e:	e7 58       	subi	r30, 0x87	; 135
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	20 81       	ld	r18, Z
     624:	dc 01       	movw	r26, r24
     626:	a2 0f       	add	r26, r18
     628:	b1 1d       	adc	r27, r1
     62a:	8c 91       	ld	r24, X
	cb->back++;
     62c:	90 81       	ld	r25, Z
     62e:	9f 5f       	subi	r25, 0xFF	; 255
     630:	90 83       	st	Z, r25
	cb->back = cb->back % MAX_BUFFER_SIZE;
     632:	20 81       	ld	r18, Z
     634:	99 e8       	ldi	r25, 0x89	; 137
     636:	29 9f       	mul	r18, r25
     638:	91 2d       	mov	r25, r1
     63a:	11 24       	eor	r1, r1
     63c:	92 95       	swap	r25
     63e:	96 95       	lsr	r25
     640:	96 95       	lsr	r25
     642:	93 70       	andi	r25, 0x03	; 3
     644:	38 e7       	ldi	r19, 0x78	; 120
     646:	93 9f       	mul	r25, r19
     648:	20 19       	sub	r18, r0
     64a:	11 24       	eor	r1, r1
     64c:	20 83       	st	Z, r18
	return ret;
}
     64e:	08 95       	ret

00000650 <circular_buffer_size>:

inline uint8_t circular_buffer_size(circular_buffer_t * cb){
	return abs(cb->front - cb->back);
     650:	fc 01       	movw	r30, r24
     652:	e8 58       	subi	r30, 0x88	; 136
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	20 81       	ld	r18, Z
     658:	31 96       	adiw	r30, 0x01	; 1
     65a:	80 81       	ld	r24, Z
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	28 1b       	sub	r18, r24
     660:	31 09       	sbc	r19, r1
     662:	c9 01       	movw	r24, r18
     664:	99 23       	and	r25, r25
     666:	24 f4       	brge	.+8      	; 0x670 <circular_buffer_size+0x20>
     668:	88 27       	eor	r24, r24
     66a:	99 27       	eor	r25, r25
     66c:	82 1b       	sub	r24, r18
     66e:	93 0b       	sbc	r25, r19
}
     670:	08 95       	ret

00000672 <__vector_24>:
uint8_t send_idx = 0;
uint8_t send_crc_length = 0;//set equal to maximum value of send_idx
uint16_t send_crc = 0;
uint8_t send_crc_idx = 0;

ISR(SPIC_INT_vect) {
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	08 b6       	in	r0, 0x38	; 56
     67e:	0f 92       	push	r0
     680:	18 be       	out	0x38, r1	; 56
     682:	09 b6       	in	r0, 0x39	; 57
     684:	0f 92       	push	r0
     686:	19 be       	out	0x39, r1	; 57
     688:	0b b6       	in	r0, 0x3b	; 59
     68a:	0f 92       	push	r0
     68c:	1b be       	out	0x3b, r1	; 59
     68e:	2f 93       	push	r18
     690:	3f 93       	push	r19
     692:	4f 93       	push	r20
     694:	5f 93       	push	r21
     696:	6f 93       	push	r22
     698:	7f 93       	push	r23
     69a:	8f 93       	push	r24
     69c:	9f 93       	push	r25
     69e:	af 93       	push	r26
     6a0:	bf 93       	push	r27
     6a2:	ef 93       	push	r30
     6a4:	ff 93       	push	r31
	//Add received byte to rx buffer
	circular_buffer_push(&rx_buff, SPIC.DATA);
     6a6:	60 91 c3 08 	lds	r22, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     6aa:	87 e3       	ldi	r24, 0x37	; 55
     6ac:	90 e2       	ldi	r25, 0x20	; 32
     6ae:	9c df       	rcall	.-200    	; 0x5e8 <circular_buffer_push>
	
	//Send tx byte if there is one to send
	if(circular_buffer_size(&tx_buff)){
     6b0:	86 eb       	ldi	r24, 0xB6	; 182
     6b2:	90 e2       	ldi	r25, 0x20	; 32
     6b4:	cd df       	rcall	.-102    	; 0x650 <circular_buffer_size>
     6b6:	88 23       	and	r24, r24
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <__vector_24+0x52>
		SPIC.DATA = circular_buffer_pop(&tx_buff);
     6ba:	86 eb       	ldi	r24, 0xB6	; 182
     6bc:	90 e2       	ldi	r25, 0x20	; 32
     6be:	ae df       	rcall	.-164    	; 0x61c <circular_buffer_pop>
     6c0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	}
	spi_isr = 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <spi_isr>
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0b be       	out	0x3b, r0	; 59
     6e6:	0f 90       	pop	r0
     6e8:	09 be       	out	0x39, r0	; 57
     6ea:	0f 90       	pop	r0
     6ec:	08 be       	out	0x38, r0	; 56
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <init_spi_to_bbb>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     6f8:	68 e0       	ldi	r22, 0x08	; 8
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	35 d1       	rcall	.+618    	; 0x968 <sysclk_enable_module>

void init_spi_to_bbb(){
	sysclk_enable_peripheral_clock( &SPIC ); 
	PORTC.DIR = 0x40;		// MISO output; MOSI, SCK, SS inputs
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0x40;		// slave mode, mode 0
     704:	e0 ec       	ldi	r30, 0xC0	; 192
     706:	f8 e0       	ldi	r31, 0x08	; 8
     708:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0x03;	// enable interrupts
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	81 83       	std	Z+1, r24	; 0x01
	PMIC.CTRL = 0x04;       // enable high priority interrupts
     70e:	84 e0       	ldi	r24, 0x04	; 4
     710:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	memset(&rx_buff, 0, sizeof(circular_buffer_t));
     714:	8a e7       	ldi	r24, 0x7A	; 122
     716:	e7 e3       	ldi	r30, 0x37	; 55
     718:	f0 e2       	ldi	r31, 0x20	; 32
     71a:	df 01       	movw	r26, r30
     71c:	98 2f       	mov	r25, r24
     71e:	1d 92       	st	X+, r1
     720:	9a 95       	dec	r25
     722:	e9 f7       	brne	.-6      	; 0x71e <init_spi_to_bbb+0x26>
	memset(&tx_buff, 0, sizeof(circular_buffer_t));
     724:	e6 eb       	ldi	r30, 0xB6	; 182
     726:	f0 e2       	ldi	r31, 0x20	; 32
     728:	df 01       	movw	r26, r30
     72a:	1d 92       	st	X+, r1
     72c:	8a 95       	dec	r24
     72e:	e9 f7       	brne	.-6      	; 0x72a <init_spi_to_bbb+0x32>
     730:	08 95       	ret

00000732 <handle_spi_to_bbb>:
	
	
}
void handle_spi_to_bbb(){
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
		rx_byte = circular_buffer_pop(&rx_buff);
		
		if(rx_byte == SPI_TX_START){
			cmd_idx = CMD_DATA_SIZE;
     748:	0f 2e       	mov	r0, r31
     74a:	f5 e0       	ldi	r31, 0x05	; 5
     74c:	bf 2e       	mov	r11, r31
     74e:	f0 2d       	mov	r31, r0
			cmd_finished = 0;
			send_idx = 0;
			send_crc_length = 0;
			send_crc = 0;
			send_crc_idx = 0;
			spi_transfer = 1;
     750:	cc 24       	eor	r12, r12
     752:	c3 94       	inc	r12
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
     754:	0f 2e       	mov	r0, r31
     756:	fc e0       	ldi	r31, 0x0C	; 12
     758:	af 2e       	mov	r10, r31
     75a:	f0 2d       	mov	r31, r0
				send_data[SENSOR_DATA_SIZE] = sensor_status;
				send_data[SENSOR_DATA_SIZE+1] = state;
				send_idx = SENSOR_DATA_SIZE+2;
     75c:	0f 2e       	mov	r0, r31
     75e:	fe e0       	ldi	r31, 0x0E	; 14
     760:	df 2e       	mov	r13, r31
     762:	f0 2d       	mov	r31, r0
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
     764:	c5 e0       	ldi	r28, 0x05	; 5
     766:	d0 e0       	ldi	r29, 0x00	; 0
			cmd_idx--;
			//Finished last storage of incoming data
			if(cmd_idx == 0){
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
     768:	01 eb       	ldi	r16, 0xB1	; 177
     76a:	10 e2       	ldi	r17, 0x20	; 32
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
					SPIC.DATA = SPI_CRC_PASS;
     76c:	0f 2e       	mov	r0, r31
     76e:	f0 ec       	ldi	r31, 0xC0	; 192
     770:	ef 2e       	mov	r14, r31
     772:	f8 e0       	ldi	r31, 0x08	; 8
     774:	ff 2e       	mov	r15, r31
     776:	f0 2d       	mov	r31, r0
     778:	0f 2e       	mov	r0, r31
     77a:	fa ea       	ldi	r31, 0xAA	; 170
     77c:	9f 2e       	mov	r9, r31
     77e:	f0 2d       	mov	r31, r0
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
     780:	9d c0       	rjmp	.+314    	; 0x8bc <handle_spi_to_bbb+0x18a>
		rx_byte = circular_buffer_pop(&rx_buff);
     782:	87 e3       	ldi	r24, 0x37	; 55
     784:	90 e2       	ldi	r25, 0x20	; 32
     786:	4a df       	rcall	.-364    	; 0x61c <circular_buffer_pop>
     788:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <rx_byte>
		
		if(rx_byte == SPI_TX_START){
     78c:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <rx_byte>
     790:	8a 3a       	cpi	r24, 0xAA	; 170
     792:	81 f4       	brne	.+32     	; 0x7b4 <handle_spi_to_bbb+0x82>
			cmd_idx = CMD_DATA_SIZE;
     794:	b0 92 29 20 	sts	0x2029, r11	; 0x802029 <cmd_idx>
			//Reset all the send variables/tmp storage
			cmd_finished = 0;
     798:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <cmd_finished>
			send_idx = 0;
     79c:	10 92 23 20 	sts	0x2023, r1	; 0x802023 <send_idx>
			send_crc_length = 0;
     7a0:	10 92 22 20 	sts	0x2022, r1	; 0x802022 <send_crc_length>
			send_crc = 0;
     7a4:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <send_crc>
     7a8:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <send_crc+0x1>
			send_crc_idx = 0;
     7ac:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <send_crc_idx>
			spi_transfer = 1;
     7b0:	c0 92 33 20 	sts	0x2033, r12	; 0x802033 <spi_transfer>
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
     7b4:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <cmd_idx>
     7b8:	88 23       	and	r24, r24
     7ba:	b1 f1       	breq	.+108    	; 0x828 <handle_spi_to_bbb+0xf6>
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
     7bc:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <rx_byte>
     7c0:	fe 01       	movw	r30, r28
     7c2:	e8 1b       	sub	r30, r24
     7c4:	f1 09       	sbc	r31, r1
     7c6:	ef 54       	subi	r30, 0x4F	; 79
     7c8:	ff 4d       	sbci	r31, 0xDF	; 223
     7ca:	90 83       	st	Z, r25
			cmd_idx--;
     7cc:	81 50       	subi	r24, 0x01	; 1
     7ce:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <cmd_idx>
			//Finished last storage of incoming data
			if(cmd_idx == 0){
     7d2:	81 11       	cpse	r24, r1
     7d4:	71 c0       	rjmp	.+226    	; 0x8b8 <handle_spi_to_bbb+0x186>
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
     7d6:	f8 01       	movw	r30, r16
     7d8:	84 81       	ldd	r24, Z+4	; 0x04
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	98 2f       	mov	r25, r24
     7de:	88 27       	eor	r24, r24
     7e0:	23 81       	ldd	r18, Z+3	; 0x03
     7e2:	82 2b       	or	r24, r18
     7e4:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <received_crc>
     7e8:	90 93 28 20 	sts	0x2028, r25	; 0x802028 <received_crc+0x1>
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	63 e0       	ldi	r22, 0x03	; 3
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	c8 01       	movw	r24, r16
     7f4:	57 d1       	rcall	.+686    	; 0xaa4 <crc_io_checksum>
     7f6:	60 93 25 20 	sts	0x2025, r22	; 0x802025 <calculated_crc>
     7fa:	70 93 26 20 	sts	0x2026, r23	; 0x802026 <calculated_crc+0x1>
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
     7fe:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <received_crc>
     802:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <received_crc+0x1>
     806:	26 17       	cp	r18, r22
     808:	37 07       	cpc	r19, r23
     80a:	49 f4       	brne	.+18     	; 0x81e <handle_spi_to_bbb+0xec>
					SPIC.DATA = SPI_CRC_PASS;
     80c:	f7 01       	movw	r30, r14
     80e:	93 82       	std	Z+3, r9	; 0x03
					
					circular_buffer_push(&tx_buff,SPI_CRC_PASS);
     810:	69 2d       	mov	r22, r9
     812:	86 eb       	ldi	r24, 0xB6	; 182
     814:	90 e2       	ldi	r25, 0x20	; 32
     816:	e8 de       	rcall	.-560    	; 0x5e8 <circular_buffer_push>
					cmd_finished = 1;
     818:	c0 92 24 20 	sts	0x2024, r12	; 0x802024 <cmd_finished>
     81c:	4d c0       	rjmp	.+154    	; 0x8b8 <handle_spi_to_bbb+0x186>
				}
				else{
					
					//SPIC.DATA = SPI_CRC_FAIL;
					circular_buffer_push(&tx_buff,SPI_CRC_FAIL);
     81e:	60 ef       	ldi	r22, 0xF0	; 240
     820:	86 eb       	ldi	r24, 0xB6	; 182
     822:	90 e2       	ldi	r25, 0x20	; 32
     824:	e1 de       	rcall	.-574    	; 0x5e8 <circular_buffer_push>
     826:	48 c0       	rjmp	.+144    	; 0x8b8 <handle_spi_to_bbb+0x186>
				}
			}
		}
		else if(cmd_finished){
     828:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <cmd_finished>
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <handle_spi_to_bbb+0x100>
     830:	43 c0       	rjmp	.+134    	; 0x8b8 <handle_spi_to_bbb+0x186>
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
     832:	e8 e0       	ldi	r30, 0x08	; 8
     834:	f0 e2       	ldi	r31, 0x20	; 32
     836:	a0 e3       	ldi	r26, 0x30	; 48
     838:	b1 e2       	ldi	r27, 0x21	; 33
     83a:	8a 2d       	mov	r24, r10
     83c:	01 90       	ld	r0, Z+
     83e:	0d 92       	st	X+, r0
     840:	8a 95       	dec	r24
     842:	e1 f7       	brne	.-8      	; 0x83c <handle_spi_to_bbb+0x10a>
				send_data[SENSOR_DATA_SIZE] = sensor_status;
     844:	e0 e3       	ldi	r30, 0x30	; 48
     846:	f1 e2       	ldi	r31, 0x21	; 33
     848:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <sensor_status>
     84c:	84 87       	std	Z+12, r24	; 0x0c
				send_data[SENSOR_DATA_SIZE+1] = state;
     84e:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <state>
     852:	85 87       	std	Z+13, r24	; 0x0d
				send_idx = SENSOR_DATA_SIZE+2;
     854:	d0 92 23 20 	sts	0x2023, r13	; 0x802023 <send_idx>
			//}
			send_crc_length = send_idx;
     858:	d0 92 22 20 	sts	0x2022, r13	; 0x802022 <send_crc_length>
			cmd_finished = 0;
     85c:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <cmd_finished>
			
			while(send_idx){
     860:	25 c0       	rjmp	.+74     	; 0x8ac <handle_spi_to_bbb+0x17a>
				//SPIC.DATA = send_data[send_crc_length-send_idx];
				circular_buffer_push(&tx_buff, send_data[send_crc_length-send_idx]);
     862:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <send_crc_length>
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	e8 1b       	sub	r30, r24
     86a:	f1 09       	sbc	r31, r1
     86c:	e0 5d       	subi	r30, 0xD0	; 208
     86e:	fe 4d       	sbci	r31, 0xDE	; 222
     870:	60 81       	ld	r22, Z
     872:	86 eb       	ldi	r24, 0xB6	; 182
     874:	90 e2       	ldi	r25, 0x20	; 32
     876:	b8 de       	rcall	.-656    	; 0x5e8 <circular_buffer_push>
				send_idx--;
     878:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <send_idx>
     87c:	81 50       	subi	r24, 0x01	; 1
     87e:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <send_idx>
				
				//Calculate CRC
				if(send_idx == 0){
     882:	81 11       	cpse	r24, r1
     884:	13 c0       	rjmp	.+38     	; 0x8ac <handle_spi_to_bbb+0x17a>
					send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
     886:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <send_crc_length>
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	80 e3       	ldi	r24, 0x30	; 48
     890:	91 e2       	ldi	r25, 0x21	; 33
     892:	08 d1       	rcall	.+528    	; 0xaa4 <crc_io_checksum>
     894:	60 93 20 20 	sts	0x2020, r22	; 0x802020 <send_crc>
     898:	70 93 21 20 	sts	0x2021, r23	; 0x802021 <send_crc+0x1>
					circular_buffer_push(&tx_buff, send_crc);
     89c:	86 eb       	ldi	r24, 0xB6	; 182
     89e:	90 e2       	ldi	r25, 0x20	; 32
     8a0:	a3 de       	rcall	.-698    	; 0x5e8 <circular_buffer_push>
					circular_buffer_push(&tx_buff, send_crc>> 8);
     8a2:	60 91 21 20 	lds	r22, 0x2021	; 0x802021 <send_crc+0x1>
     8a6:	86 eb       	ldi	r24, 0xB6	; 182
     8a8:	90 e2       	ldi	r25, 0x20	; 32
     8aa:	9e de       	rcall	.-708    	; 0x5e8 <circular_buffer_push>
				send_idx = SENSOR_DATA_SIZE+2;
			//}
			send_crc_length = send_idx;
			cmd_finished = 0;
			
			while(send_idx){
     8ac:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <send_idx>
     8b0:	81 11       	cpse	r24, r1
     8b2:	d7 cf       	rjmp	.-82     	; 0x862 <handle_spi_to_bbb+0x130>
					circular_buffer_push(&tx_buff, send_crc);
					circular_buffer_push(&tx_buff, send_crc>> 8);
				}
			}
			
			spi_transfer = 0;
     8b4:	10 92 33 20 	sts	0x2033, r1	; 0x802033 <spi_transfer>
		}
		spi_isr = 0;
     8b8:	10 92 34 20 	sts	0x2034, r1	; 0x802034 <spi_isr>
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
     8bc:	87 e3       	ldi	r24, 0x37	; 55
     8be:	90 e2       	ldi	r25, 0x20	; 32
     8c0:	c7 de       	rcall	.-626    	; 0x650 <circular_buffer_size>
     8c2:	81 11       	cpse	r24, r1
     8c4:	5e cf       	rjmp	.-324    	; 0x782 <handle_spi_to_bbb+0x50>
			
			spi_transfer = 0;
		}
		spi_isr = 0;
	}
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	bf 90       	pop	r11
     8d8:	af 90       	pop	r10
     8da:	9f 90       	pop	r9
     8dc:	08 95       	ret

000008de <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <sysclk_init+0x6>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     8ee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     8f2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     8f6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     8fa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     8fe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     902:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     906:	8f b7       	in	r24, 0x3f	; 63
     908:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     90a:	f8 94       	cli
	return flags;
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     90e:	e0 e5       	ldi	r30, 0x50	; 80
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	82 60       	ori	r24, 0x02	; 2
     916:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     918:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     91a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     91c:	81 ff       	sbrs	r24, 1
     91e:	fd cf       	rjmp	.-6      	; 0x91a <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	80 e4       	ldi	r24, 0x40	; 64
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	de d1       	rcall	.+956    	; 0xce4 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     928:	8f b7       	in	r24, 0x3f	; 63
     92a:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     92c:	f8 94       	cli
	return flags;
     92e:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     930:	e0 e5       	ldi	r30, 0x50	; 80
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     93a:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     940:	8f b7       	in	r24, 0x3f	; 63
     942:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     944:	f8 94       	cli
	return flags;
     946:	99 81       	ldd	r25, Y+1	; 0x01
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     948:	80 81       	ld	r24, Z
     94a:	88 60       	ori	r24, 0x08	; 8
     94c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     94e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     950:	81 81       	ldd	r24, Z+1	; 0x01
     952:	83 ff       	sbrs	r24, 3
     954:	fd cf       	rjmp	.-6      	; 0x950 <sysclk_init+0x72>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     956:	8b e0       	ldi	r24, 0x0B	; 11
     958:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     95c:	23 96       	adiw	r28, 0x03	; 3
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	de bf       	out	0x3e, r29	; 62
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	1f 92       	push	r1
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     972:	9f b7       	in	r25, 0x3f	; 63
     974:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     976:	f8 94       	cli
	return flags;
     978:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     97a:	e8 2f       	mov	r30, r24
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	e0 59       	subi	r30, 0x90	; 144
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	60 95       	com	r22
     984:	80 81       	ld	r24, Z
     986:	68 23       	and	r22, r24
     988:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     98a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <crc_io_checksum_byte_start>:
 * the module and get the calculated checksum.
 *
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 */
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
 *
 */
static inline void crc_reset(void)
{
	// Reset module
	CRC_CTRL |= CRC_RESET_RESET0_gc;
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	90 81       	ld	r25, Z
     99e:	90 68       	ori	r25, 0x80	; 128
     9a0:	90 83       	st	Z, r25

	// Set initial checksum value
	CRC.CHECKSUM0 = crc_initial_value & 0xFF;
     9a2:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <crc_initial_value>
     9a6:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <crc_initial_value+0x1>
     9aa:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <crc_initial_value+0x2>
     9ae:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <crc_initial_value+0x3>
     9b2:	44 83       	std	Z+4, r20	; 0x04
	CRC.CHECKSUM1 = (crc_initial_value >> 8) & 0xFF;
     9b4:	05 2f       	mov	r16, r21
     9b6:	16 2f       	mov	r17, r22
     9b8:	27 2f       	mov	r18, r23
     9ba:	33 27       	eor	r19, r19
     9bc:	05 83       	std	Z+5, r16	; 0x05
	CRC.CHECKSUM2 = (crc_initial_value >> 16) & 0xFF;
     9be:	8b 01       	movw	r16, r22
     9c0:	22 27       	eor	r18, r18
     9c2:	33 27       	eor	r19, r19
     9c4:	06 83       	std	Z+6, r16	; 0x06
	CRC.CHECKSUM3 = (crc_initial_value >> 24) & 0xFF;
     9c6:	47 2f       	mov	r20, r23
     9c8:	55 27       	eor	r21, r21
     9ca:	66 27       	eor	r22, r22
     9cc:	77 27       	eor	r23, r23
     9ce:	47 83       	std	Z+7, r20	; 0x07

	crc_initial_value = 0;
     9d0:	10 92 2b 20 	sts	0x202B, r1	; 0x80202b <crc_initial_value>
     9d4:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <crc_initial_value+0x1>
     9d8:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <crc_initial_value+0x2>
     9dc:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <crc_initial_value+0x3>
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
	// Initialize CRC calculations on I/O interface
	crc_reset();
	// Enable CRC-32 if chosen
	if (crc_16_32 == CRC_32BIT) {
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	19 f4       	brne	.+6      	; 0x9ea <crc_io_checksum_byte_start+0x56>
 * \note This cannot be changed while the busy flag is set.
 *
 */
static inline void crc_32_enable(void)
{
	CRC_CTRL |= CRC_CRC32_bm;
     9e4:	80 81       	ld	r24, Z
     9e6:	80 62       	ori	r24, 0x20	; 32
     9e8:	80 83       	st	Z, r24
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
     9ea:	e0 ed       	ldi	r30, 0xD0	; 208
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	80 7f       	andi	r24, 0xF0	; 240
     9f2:	80 83       	st	Z, r24
	CRC_CTRL |= source;
     9f4:	80 81       	ld	r24, Z
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	80 83       	st	Z, r24
	if (crc_16_32 == CRC_32BIT) {
		crc_32_enable();
	}
	// Enable CRC module using the I/O interface
	crc_set_source(CRC_SOURCE_IO_gc);
}
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	08 95       	ret

00000a00 <crc_io_checksum_byte_stop>:
 *
 * \retval checksum checksum
 *
 */
uint32_t crc_io_checksum_byte_stop(void)
{
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;
     a08:	e1 ed       	ldi	r30, 0xD1	; 209
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	80 83       	st	Z, r24
 * \retval false if module is not busy
 *
 */
static inline bool crc_is_busy(void)
{
	return ((CRC_STATUS & CRC_BUSY_bm) == CRC_BUSY_bm);
     a12:	80 81       	ld	r24, Z
 * \return checksum checksum value
 */
static inline uint32_t crc_checksum_read(void)
{
	// Wait until the CRC conversion is finished
	while (crc_is_busy()) {
     a14:	80 fd       	sbrc	r24, 0
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <crc_io_checksum_byte_stop+0x12>
		// Do nothing
	}

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
     a18:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     a1c:	85 ff       	sbrs	r24, 5
     a1e:	2e c0       	rjmp	.+92     	; 0xa7c <crc_io_checksum_byte_stop+0x7c>
 */
static inline uint32_t crc32_checksum_read(void)
{
	uint32_t checksum;

	checksum = ((uint32_t)CRC_CHECKSUM0 & 0x000000FF);
     a20:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint32_t)CRC_CHECKSUM1 << 8) & 0x0000FF00);
     a24:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	checksum |= (((uint32_t)CRC_CHECKSUM2 << 16) & 0x00FF0000);
     a28:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	checksum |= (((uint32_t)CRC_CHECKSUM3 << 24) & 0xFF000000);
     a2c:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7000d7>
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	72 2b       	or	r23, r18
     a38:	59 2b       	or	r21, r25
     a3a:	68 2b       	or	r22, r24
     a3c:	20 e2       	ldi	r18, 0x20	; 32
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	dc 01       	movw	r26, r24
		result = (result << 1) + (value & 1);
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	aa 1f       	adc	r26, r26
     a4a:	bb 1f       	adc	r27, r27
     a4c:	6a 01       	movw	r12, r20
     a4e:	7b 01       	movw	r14, r22
     a50:	31 e0       	ldi	r19, 0x01	; 1
     a52:	c3 22       	and	r12, r19
     a54:	dd 24       	eor	r13, r13
     a56:	ee 24       	eor	r14, r14
     a58:	ff 24       	eor	r15, r15
     a5a:	8c 0d       	add	r24, r12
     a5c:	9d 1d       	adc	r25, r13
     a5e:	ae 1d       	adc	r26, r14
     a60:	bf 1d       	adc	r27, r15
		value >>= 1;
     a62:	76 95       	lsr	r23
     a64:	67 95       	ror	r22
     a66:	57 95       	ror	r21
     a68:	47 95       	ror	r20
     a6a:	21 50       	subi	r18, 0x01	; 1
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
     a6c:	59 f7       	brne	.-42     	; 0xa44 <crc_io_checksum_byte_stop+0x44>

	// Bit reverse the result (to comply with IEEE 802.3 CRC-32)
	checksum = crc_bit_revert(checksum);

	// Complement the result (to comply with IEEE 802.3 CRC-32)
	checksum = ~checksum;
     a6e:	bc 01       	movw	r22, r24
     a70:	cd 01       	movw	r24, r26
     a72:	60 95       	com	r22
     a74:	70 95       	com	r23
     a76:	80 95       	com	r24
     a78:	90 95       	com	r25
     a7a:	08 c0       	rjmp	.+16     	; 0xa8c <crc_io_checksum_byte_stop+0x8c>
 */
static inline uint16_t crc16_checksum_read(void)
{
	uint16_t checksum;
	checksum = 0;
	checksum = ((uint16_t)CRC_CHECKSUM0 & 0x00FF);
     a7c:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint16_t)CRC_CHECKSUM1 << 8) & 0xFF00);
     a80:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	78 2b       	or	r23, r24

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
		return crc32_checksum_read();
	} else {
		return crc16_checksum_read();
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
     a8c:	e0 ed       	ldi	r30, 0xD0	; 208
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	20 81       	ld	r18, Z
     a92:	20 7f       	andi	r18, 0xF0	; 240
     a94:	20 83       	st	Z, r18
	CRC_CTRL |= source;
     a96:	20 81       	ld	r18, Z
     a98:	20 83       	st	Z, r18
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;

	// Stop CRC and return checksum
	return crc_checksum_complete();
}
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <crc_io_checksum>:
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 *
 * \return checksum checksum
 */
uint32_t crc_io_checksum(void *data, uint16_t len, enum crc_16_32_t crc_16_32)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	ec 01       	movw	r28, r24
     aae:	8b 01       	movw	r16, r22
     ab0:	84 2f       	mov	r24, r20
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);
     ab2:	70 df       	rcall	.-288    	; 0x994 <crc_io_checksum_byte_start>

	// Write data to DATAIN register
	while (len--) {
     ab4:	01 15       	cp	r16, r1
     ab6:	11 05       	cpc	r17, r1
     ab8:	51 f0       	breq	.+20     	; 0xace <crc_io_checksum+0x2a>
     aba:	be 01       	movw	r22, r28
     abc:	60 0f       	add	r22, r16
     abe:	71 1f       	adc	r23, r17
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
     ac0:	e3 ed       	ldi	r30, 0xD3	; 211
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
		crc_io_checksum_byte_add(*(uint8_t*)data);
     ac4:	89 91       	ld	r24, Y+
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
     ac6:	80 83       	st	Z, r24
{
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
     ac8:	c6 17       	cp	r28, r22
     aca:	d7 07       	cpc	r29, r23
     acc:	d9 f7       	brne	.-10     	; 0xac4 <crc_io_checksum+0x20>
		crc_io_checksum_byte_add(*(uint8_t*)data);
		data = (uint8_t*)data + 1;
	}

	// Return checksum
	return crc_io_checksum_byte_stop();
     ace:	98 df       	rcall	.-208    	; 0xa00 <crc_io_checksum_byte_stop>
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	1f 92       	push	r1
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	e0 e0       	ldi	r30, 0x00	; 0
     aea:	f4 e0       	ldi	r31, 0x04	; 4
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	80 fd       	sbrc	r24, 0
     af0:	fd cf       	rjmp	.-6      	; 0xaec <rtc_get_time+0x12>
     af2:	8f b7       	in	r24, 0x3f	; 63
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	f8 94       	cli
     af8:	29 81       	ldd	r18, Y+1	; 0x01
     afa:	40 91 44 21 	lds	r20, 0x2144	; 0x802144 <rtc_data>
     afe:	50 91 45 21 	lds	r21, 0x2145	; 0x802145 <rtc_data+0x1>
     b02:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     b06:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	31 f4       	brne	.+12     	; 0xb1a <rtc_get_time+0x40>
     b0e:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
     b12:	30 ff       	sbrs	r19, 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <rtc_get_time+0x40>
     b16:	4f 5f       	subi	r20, 0xFF	; 255
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	2f bf       	out	0x3f, r18	; 63
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	ba 01       	movw	r22, r20
     b22:	55 27       	eor	r21, r21
     b24:	44 27       	eor	r20, r20
     b26:	a0 e0       	ldi	r26, 0x00	; 0
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	8a 01       	movw	r16, r20
     b2c:	9b 01       	movw	r18, r22
     b2e:	08 2b       	or	r16, r24
     b30:	19 2b       	or	r17, r25
     b32:	2a 2b       	or	r18, r26
     b34:	3b 2b       	or	r19, r27
     b36:	c9 01       	movw	r24, r18
     b38:	b8 01       	movw	r22, r16
     b3a:	0f 90       	pop	r0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	09 df       	rcall	.-494    	; 0x968 <sysclk_enable_module>
	RTC.PER = 0xffff;
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f4 e0       	ldi	r31, 0x04	; 4
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
     b5e:	82 87       	std	Z+10, r24	; 0x0a
     b60:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     b62:	10 86       	std	Z+8, r1	; 0x08
     b64:	11 86       	std	Z+9, r1	; 0x09
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     b66:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <sleepmgr_locks+0x3>
     b6a:	8f 3f       	cpi	r24, 0xFF	; 255
     b6c:	09 f4       	brne	.+2      	; 0xb70 <rtc_init+0x2a>
     b6e:	ff cf       	rjmp	.-2      	; 0xb6e <rtc_init+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b70:	8f b7       	in	r24, 0x3f	; 63
     b72:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b74:	f8 94       	cli
	return flags;
     b76:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     b78:	ee e3       	ldi	r30, 0x3E	; 62
     b7a:	f1 e2       	ldi	r31, 0x21	; 33
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b82:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     b84:	e0 e0       	ldi	r30, 0x00	; 0
     b86:	f4 e0       	ldi	r31, 0x04	; 4
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     b8c:	80 83       	st	Z, r24
}
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	08 b6       	in	r0, 0x38	; 56
     ba2:	0f 92       	push	r0
     ba4:	18 be       	out	0x38, r1	; 56
     ba6:	0b b6       	in	r0, 0x3b	; 59
     ba8:	0f 92       	push	r0
     baa:	1b be       	out	0x3b, r1	; 59
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
	rtc_data.counter_high++;
     bb4:	e4 e4       	ldi	r30, 0x44	; 68
     bb6:	f1 e2       	ldi	r31, 0x21	; 33
     bb8:	80 81       	ld	r24, Z
     bba:	91 81       	ldd	r25, Z+1	; 0x01
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	80 83       	st	Z, r24
     bc0:	91 83       	std	Z+1, r25	; 0x01
}
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	0f 90       	pop	r0
     bcc:	0b be       	out	0x3b, r0	; 59
     bce:	0f 90       	pop	r0
     bd0:	08 be       	out	0x38, r0	; 56
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	08 b6       	in	r0, 0x38	; 56
     be8:	0f 92       	push	r0
     bea:	18 be       	out	0x38, r1	; 56
     bec:	09 b6       	in	r0, 0x39	; 57
     bee:	0f 92       	push	r0
     bf0:	19 be       	out	0x39, r1	; 57
     bf2:	0b b6       	in	r0, 0x3b	; 59
     bf4:	0f 92       	push	r0
     bf6:	1b be       	out	0x3b, r1	; 59
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	2f 93       	push	r18
     c06:	3f 93       	push	r19
     c08:	4f 93       	push	r20
     c0a:	5f 93       	push	r21
     c0c:	6f 93       	push	r22
     c0e:	7f 93       	push	r23
     c10:	8f 93       	push	r24
     c12:	9f 93       	push	r25
     c14:	af 93       	push	r26
     c16:	bf 93       	push	r27
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     c1c:	e4 e4       	ldi	r30, 0x44	; 68
     c1e:	f1 e2       	ldi	r31, 0x21	; 33
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	22 81       	ldd	r18, Z+2	; 0x02
     c26:	33 81       	ldd	r19, Z+3	; 0x03
     c28:	82 17       	cp	r24, r18
     c2a:	93 07       	cpc	r25, r19
     c2c:	f0 f1       	brcs	.+124    	; 0xcaa <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     c34:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <rtc_data+0x6>
     c38:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <rtc_data+0x7>
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	a9 f1       	breq	.+106    	; 0xcaa <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     c40:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     c44:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	dc 01       	movw	r26, r24
     c4e:	99 27       	eor	r25, r25
     c50:	88 27       	eor	r24, r24
					| RTC.CNT;
     c52:	ab 01       	movw	r20, r22
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     c58:	8c 01       	movw	r16, r24
     c5a:	9d 01       	movw	r18, r26
     c5c:	04 2b       	or	r16, r20
     c5e:	15 2b       	or	r17, r21
     c60:	26 2b       	or	r18, r22
     c62:	37 2b       	or	r19, r23
     c64:	c9 01       	movw	r24, r18
     c66:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     c68:	a4 e4       	ldi	r26, 0x44	; 68
     c6a:	b1 e2       	ldi	r27, 0x21	; 33
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	0d 91       	ld	r16, X+
     c70:	1c 91       	ld	r17, X
     c72:	13 97       	sbiw	r26, 0x03	; 3
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	98 01       	movw	r18, r16
     c7a:	11 27       	eor	r17, r17
     c7c:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	cd 90       	ld	r12, X+
     c82:	dc 90       	ld	r13, X
     c84:	15 97       	sbiw	r26, 0x05	; 5
     c86:	e1 2c       	mov	r14, r1
     c88:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     c8a:	0c 29       	or	r16, r12
     c8c:	1d 29       	or	r17, r13
     c8e:	2e 29       	or	r18, r14
     c90:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     c92:	06 17       	cp	r16, r22
     c94:	17 07       	cpc	r17, r23
     c96:	28 07       	cpc	r18, r24
     c98:	39 07       	cpc	r19, r25
     c9a:	30 f0       	brcs	.+12     	; 0xca8 <__vector_11+0xcc>
				count = alarm + 1;
     c9c:	c9 01       	movw	r24, r18
     c9e:	b8 01       	movw	r22, r16
     ca0:	6f 5f       	subi	r22, 0xFF	; 255
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	8f 4f       	sbci	r24, 0xFF	; 255
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     ca8:	19 95       	eicall
		}
	}
}
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	0f 90       	pop	r0
     cd0:	0b be       	out	0x3b, r0	; 59
     cd2:	0f 90       	pop	r0
     cd4:	09 be       	out	0x39, r0	; 57
     cd6:	0f 90       	pop	r0
     cd8:	08 be       	out	0x38, r0	; 56
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     ce4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     ce6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     ce8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     cea:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     cec:	60 83       	st	Z, r22
	ret                             // Return to caller
     cee:	08 95       	ret

00000cf0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	fc 01       	movw	r30, r24
     cf6:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     cfc:	c6 2f       	mov	r28, r22
     cfe:	d0 e0       	ldi	r29, 0x00	; 0
     d00:	de 01       	movw	r26, r28
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <ioport_configure_port_pin+0x1a>
     d06:	b5 95       	asr	r27
     d08:	a7 95       	ror	r26
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <ioport_configure_port_pin+0x16>
     d0e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d10:	50 83       	st	Z, r21
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d18:	28 30       	cpi	r18, 0x08	; 8
     d1a:	31 05       	cpc	r19, r1
     d1c:	89 f7       	brne	.-30     	; 0xd00 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d1e:	40 ff       	sbrs	r20, 0
     d20:	0a c0       	rjmp	.+20     	; 0xd36 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     d22:	41 ff       	sbrs	r20, 1
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d26:	fc 01       	movw	r30, r24
     d28:	65 83       	std	Z+5, r22	; 0x05
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d2c:	fc 01       	movw	r30, r24
     d2e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d30:	fc 01       	movw	r30, r24
     d32:	61 83       	std	Z+1, r22	; 0x01
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d36:	fc 01       	movw	r30, r24
     d38:	62 83       	std	Z+2, r22	; 0x02
	}
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     d40:	43 e0       	ldi	r20, 0x03	; 3
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	68 e0       	ldi	r22, 0x08	; 8
     d46:	80 ec       	ldi	r24, 0xC0	; 192
     d48:	97 e0       	ldi	r25, 0x07	; 7
     d4a:	d2 df       	rcall	.-92     	; 0xcf0 <ioport_configure_port_pin>
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	58 e1       	ldi	r21, 0x18	; 24
     d50:	64 e0       	ldi	r22, 0x04	; 4
     d52:	80 ec       	ldi	r24, 0xC0	; 192
     d54:	97 e0       	ldi	r25, 0x07	; 7
     d56:	cc cf       	rjmp	.-104    	; 0xcf0 <ioport_configure_port_pin>
     d58:	08 95       	ret

00000d5a <init_i2c>:



uint8_t init_i2c(void);
uint8_t init_i2c(void)
{
     d5a:	4f 92       	push	r4
     d5c:	5f 92       	push	r5
     d5e:	6f 92       	push	r6
     d60:	7f 92       	push	r7
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	c2 55       	subi	r28, 0x52	; 82
     d80:	d1 09       	sbc	r29, r1
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	de bf       	out	0x3e, r29	; 62
	twi_master_options_t opt48 = {
     d86:	0f 2e       	mov	r0, r31
     d88:	f9 e0       	ldi	r31, 0x09	; 9
     d8a:	7f 2e       	mov	r7, r31
     d8c:	f0 2d       	mov	r31, r0
     d8e:	8e 01       	movw	r16, r28
     d90:	0f 5f       	subi	r16, 0xFF	; 255
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	d8 01       	movw	r26, r16
     d96:	e7 2d       	mov	r30, r7
     d98:	1d 92       	st	X+, r1
     d9a:	ea 95       	dec	r30
     d9c:	e9 f7       	brne	.-6      	; 0xd98 <init_i2c+0x3e>
     d9e:	0f 2e       	mov	r0, r31
     da0:	f0 ea       	ldi	r31, 0xA0	; 160
     da2:	8f 2e       	mov	r8, r31
     da4:	f6 e8       	ldi	r31, 0x86	; 134
     da6:	9f 2e       	mov	r9, r31
     da8:	aa 24       	eor	r10, r10
     daa:	a3 94       	inc	r10
     dac:	b1 2c       	mov	r11, r1
     dae:	f0 2d       	mov	r31, r0
     db0:	89 82       	std	Y+1, r8	; 0x01
     db2:	9a 82       	std	Y+2, r9	; 0x02
     db4:	ab 82       	std	Y+3, r10	; 0x03
     db6:	bc 82       	std	Y+4, r11	; 0x04
     db8:	0f 2e       	mov	r0, r31
     dba:	f8 e4       	ldi	r31, 0x48	; 72
     dbc:	6f 2e       	mov	r6, r31
     dbe:	f0 2d       	mov	r31, r0
     dc0:	69 86       	std	Y+9, r6	; 0x09
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	fb e9       	ldi	r31, 0x9B	; 155
     dc6:	cf 2e       	mov	r12, r31
     dc8:	d1 2c       	mov	r13, r1
     dca:	e1 2c       	mov	r14, r1
     dcc:	f1 2c       	mov	r15, r1
     dce:	f0 2d       	mov	r31, r0
     dd0:	cd 82       	std	Y+5, r12	; 0x05
     dd2:	de 82       	std	Y+6, r13	; 0x06
     dd4:	ef 82       	std	Y+7, r14	; 0x07
     dd6:	f8 86       	std	Y+8, r15	; 0x08
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     dd8:	60 e4       	ldi	r22, 0x40	; 64
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	c5 dd       	rcall	.-1142   	; 0x968 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     dde:	b8 01       	movw	r22, r16
     de0:	80 eb       	ldi	r24, 0xB0	; 176
     de2:	94 e0       	ldi	r25, 0x04	; 4
     de4:	8f db       	rcall	.-2274   	; 0x504 <twi_master_init>
		.speed = 100000,
		.chip = 0x48
	};
	twi_master_setup(&TWIF, &opt48);
	
	twi_master_options_t opt49 = {
     de6:	07 5f       	subi	r16, 0xF7	; 247
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	d8 01       	movw	r26, r16
     dec:	e7 2d       	mov	r30, r7
     dee:	1d 92       	st	X+, r1
     df0:	ea 95       	dec	r30
     df2:	e9 f7       	brne	.-6      	; 0xdee <init_i2c+0x94>
     df4:	8a 86       	std	Y+10, r8	; 0x0a
     df6:	9b 86       	std	Y+11, r9	; 0x0b
     df8:	ac 86       	std	Y+12, r10	; 0x0c
     dfa:	bd 86       	std	Y+13, r11	; 0x0d
     dfc:	0f 2e       	mov	r0, r31
     dfe:	f9 e4       	ldi	r31, 0x49	; 73
     e00:	5f 2e       	mov	r5, r31
     e02:	f0 2d       	mov	r31, r0
     e04:	5a 8a       	std	Y+18, r5	; 0x12
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e06:	ce 86       	std	Y+14, r12	; 0x0e
     e08:	df 86       	std	Y+15, r13	; 0x0f
     e0a:	e8 8a       	std	Y+16, r14	; 0x10
     e0c:	f9 8a       	std	Y+17, r15	; 0x11
     e0e:	60 e4       	ldi	r22, 0x40	; 64
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	aa dd       	rcall	.-1196   	; 0x968 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e14:	b8 01       	movw	r22, r16
     e16:	80 eb       	ldi	r24, 0xB0	; 176
     e18:	94 e0       	ldi	r25, 0x04	; 4
     e1a:	74 db       	rcall	.-2328   	; 0x504 <twi_master_init>
		.speed = 100000,
		.chip = 0x49
	};
	twi_master_setup(&TWIF, &opt49);
	
	twi_master_options_t opt4A = {
     e1c:	07 5f       	subi	r16, 0xF7	; 247
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	d8 01       	movw	r26, r16
     e22:	e7 2d       	mov	r30, r7
     e24:	1d 92       	st	X+, r1
     e26:	ea 95       	dec	r30
     e28:	e9 f7       	brne	.-6      	; 0xe24 <init_i2c+0xca>
     e2a:	8b 8a       	std	Y+19, r8	; 0x13
     e2c:	9c 8a       	std	Y+20, r9	; 0x14
     e2e:	ad 8a       	std	Y+21, r10	; 0x15
     e30:	be 8a       	std	Y+22, r11	; 0x16
     e32:	0f 2e       	mov	r0, r31
     e34:	fa e4       	ldi	r31, 0x4A	; 74
     e36:	4f 2e       	mov	r4, r31
     e38:	f0 2d       	mov	r31, r0
     e3a:	4b 8e       	std	Y+27, r4	; 0x1b
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e3c:	cf 8a       	std	Y+23, r12	; 0x17
     e3e:	d8 8e       	std	Y+24, r13	; 0x18
     e40:	e9 8e       	std	Y+25, r14	; 0x19
     e42:	fa 8e       	std	Y+26, r15	; 0x1a
     e44:	60 e4       	ldi	r22, 0x40	; 64
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	8f dd       	rcall	.-1250   	; 0x968 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e4a:	b8 01       	movw	r22, r16
     e4c:	80 eb       	ldi	r24, 0xB0	; 176
     e4e:	94 e0       	ldi	r25, 0x04	; 4
     e50:	59 db       	rcall	.-2382   	; 0x504 <twi_master_init>
		.speed = 100000,
		.chip = 0x4A
	};
	twi_master_setup(&TWIF, &opt4A);
	
	twi_master_options_t opt4B = {
     e52:	07 5f       	subi	r16, 0xF7	; 247
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	d8 01       	movw	r26, r16
     e58:	1d 92       	st	X+, r1
     e5a:	7a 94       	dec	r7
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <init_i2c+0xfe>
     e5e:	8c 8e       	std	Y+28, r8	; 0x1c
     e60:	9d 8e       	std	Y+29, r9	; 0x1d
     e62:	ae 8e       	std	Y+30, r10	; 0x1e
     e64:	bf 8e       	std	Y+31, r11	; 0x1f
     e66:	0f 2e       	mov	r0, r31
     e68:	fb e4       	ldi	r31, 0x4B	; 75
     e6a:	bf 2e       	mov	r11, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	bc a2       	std	Y+36, r11	; 0x24
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e70:	c8 a2       	std	Y+32, r12	; 0x20
     e72:	d9 a2       	std	Y+33, r13	; 0x21
     e74:	ea a2       	std	Y+34, r14	; 0x22
     e76:	fb a2       	std	Y+35, r15	; 0x23
     e78:	60 e4       	ldi	r22, 0x40	; 64
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	75 dd       	rcall	.-1302   	; 0x968 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e7e:	b8 01       	movw	r22, r16
     e80:	80 eb       	ldi	r24, 0xB0	; 176
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	3f db       	rcall	.-2434   	; 0x504 <twi_master_init>
	 * 4: Comparater mode. 0=default
	 * 3: Comparater polarity. 0=default
	 * 2: Comparater Latch. 0=Nonlatching comparater
	 * 1: Comparater queue and disable. 00=Assert after one conversion
	 **/
	const uint8_t adc_setup_bytes[] = {0x42, 0xe3};
     e86:	82 e4       	ldi	r24, 0x42	; 66
     e88:	8d a3       	std	Y+37, r24	; 0x25
     e8a:	83 ee       	ldi	r24, 0xE3	; 227
     e8c:	8e a3       	std	Y+38, r24	; 0x26
	twi_package_t adc_setup_48;
	memset(&adc_setup_48,0,sizeof(twi_package_t));
     e8e:	05 5f       	subi	r16, 0xF5	; 245
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	0f 2e       	mov	r0, r31
     e94:	fb e0       	ldi	r31, 0x0B	; 11
     e96:	ff 2e       	mov	r15, r31
     e98:	f0 2d       	mov	r31, r0
     e9a:	f8 01       	movw	r30, r16
     e9c:	6f 2d       	mov	r22, r15
     e9e:	11 92       	st	Z+, r1
     ea0:	6a 95       	dec	r22
     ea2:	e9 f7       	brne	.-6      	; 0xe9e <init_i2c+0x144>
	adc_setup_48.addr[0]		= 0x01;
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	78 a7       	std	Y+40, r23	; 0x28
	adc_setup_48.addr_length	= sizeof(uint8_t);
     ea8:	41 e0       	ldi	r20, 0x01	; 1
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	4b a7       	std	Y+43, r20	; 0x2b
     eae:	5c a7       	std	Y+44, r21	; 0x2c
	adc_setup_48.chip			= 0x48;
     eb0:	6f a2       	std	Y+39, r6	; 0x27
	adc_setup_48.buffer			= (void *)adc_setup_bytes;
     eb2:	9e 01       	movw	r18, r28
     eb4:	2b 5d       	subi	r18, 0xDB	; 219
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	2d a7       	std	Y+45, r18	; 0x2d
     eba:	3e a7       	std	Y+46, r19	; 0x2e
	adc_setup_48.length			= sizeof(adc_setup_bytes);
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	8f a7       	std	Y+47, r24	; 0x2f
     ec2:	98 ab       	std	Y+48, r25	; 0x30
	
	twi_package_t adc_setup_49;
	memset(&adc_setup_49,0,sizeof(twi_package_t));
     ec4:	de 01       	movw	r26, r28
     ec6:	d2 96       	adiw	r26, 0x32	; 50
     ec8:	fd 01       	movw	r30, r26
     eca:	6f 2d       	mov	r22, r15
     ecc:	11 92       	st	Z+, r1
     ece:	6a 95       	dec	r22
     ed0:	e9 f7       	brne	.-6      	; 0xecc <init_i2c+0x172>
	adc_setup_49.addr[0]		= 0x01;
     ed2:	7b ab       	std	Y+51, r23	; 0x33
	adc_setup_49.addr_length	= sizeof(uint8_t);
     ed4:	4e ab       	std	Y+54, r20	; 0x36
     ed6:	5f ab       	std	Y+55, r21	; 0x37
	adc_setup_49.chip			= 0x49;
     ed8:	5a aa       	std	Y+50, r5	; 0x32
	adc_setup_49.buffer			= (void *)adc_setup_bytes;
     eda:	28 af       	std	Y+56, r18	; 0x38
     edc:	39 af       	std	Y+57, r19	; 0x39
	adc_setup_49.length			= sizeof(adc_setup_bytes);
     ede:	8a af       	std	Y+58, r24	; 0x3a
     ee0:	9b af       	std	Y+59, r25	; 0x3b
	
	twi_package_t adc_setup_4A;
	memset(&adc_setup_4A,0,sizeof(twi_package_t));
     ee2:	1b 96       	adiw	r26, 0x0b	; 11
     ee4:	fd 01       	movw	r30, r26
     ee6:	6f 2d       	mov	r22, r15
     ee8:	11 92       	st	Z+, r1
     eea:	6a 95       	dec	r22
     eec:	e9 f7       	brne	.-6      	; 0xee8 <init_i2c+0x18e>
	adc_setup_4A.addr[0]		= 0x01;
     eee:	7e af       	std	Y+62, r23	; 0x3e
	adc_setup_4A.addr_length	= sizeof(uint8_t);
     ef0:	23 96       	adiw	r28, 0x03	; 3
     ef2:	4e af       	std	Y+62, r20	; 0x3e
     ef4:	5f af       	std	Y+63, r21	; 0x3f
     ef6:	23 97       	sbiw	r28, 0x03	; 3
	adc_setup_4A.chip			= 0x4A;
     ef8:	4d ae       	std	Y+61, r4	; 0x3d
	adc_setup_4A.buffer			= (void *)adc_setup_bytes;
     efa:	25 96       	adiw	r28, 0x05	; 5
     efc:	2e af       	std	Y+62, r18	; 0x3e
     efe:	3f af       	std	Y+63, r19	; 0x3f
     f00:	25 97       	sbiw	r28, 0x05	; 5
	adc_setup_4A.length			= sizeof(adc_setup_bytes);
     f02:	27 96       	adiw	r28, 0x07	; 7
     f04:	8e af       	std	Y+62, r24	; 0x3e
     f06:	9f af       	std	Y+63, r25	; 0x3f
     f08:	27 97       	sbiw	r28, 0x07	; 7
	
	twi_package_t adc_setup_4B;
	memset(&adc_setup_4B,0,sizeof(twi_package_t));
     f0a:	fe 01       	movw	r30, r28
     f0c:	e8 5b       	subi	r30, 0xB8	; 184
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	df 01       	movw	r26, r30
     f12:	1d 92       	st	X+, r1
     f14:	fa 94       	dec	r15
     f16:	e9 f7       	brne	.-6      	; 0xf12 <init_i2c+0x1b8>
	adc_setup_4B.addr[0]		= 0x01;
     f18:	71 83       	std	Z+1, r23	; 0x01
	adc_setup_4B.addr_length	= sizeof(uint8_t);
     f1a:	44 83       	std	Z+4, r20	; 0x04
     f1c:	55 83       	std	Z+5, r21	; 0x05
	adc_setup_4B.chip			= 0x4B;
     f1e:	b0 82       	st	Z, r11
	adc_setup_4B.buffer			= (void *)adc_setup_bytes;
     f20:	26 83       	std	Z+6, r18	; 0x06
     f22:	37 83       	std	Z+7, r19	; 0x07
	adc_setup_4B.length			= sizeof(adc_setup_bytes);
     f24:	80 87       	std	Z+8, r24	; 0x08
     f26:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	b8 01       	movw	r22, r16
     f2c:	80 eb       	ldi	r24, 0xB0	; 176
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	fe da       	rcall	.-2564   	; 0x52e <twi_master_transfer>
	
	uint8_t error = 0;
	if(twi_master_write(&TWIF, &adc_setup_48) != TWI_SUCCESS)
     f32:	11 e0       	ldi	r17, 0x01	; 1
     f34:	81 11       	cpse	r24, r1
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <init_i2c+0x1e0>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	be 01       	movw	r22, r28
     f3e:	6e 5c       	subi	r22, 0xCE	; 206
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	80 eb       	ldi	r24, 0xB0	; 176
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	f3 da       	rcall	.-2586   	; 0x52e <twi_master_transfer>
		error |= 1;
	if(twi_master_write(&TWIF, &adc_setup_49) != TWI_SUCCESS)
     f48:	81 11       	cpse	r24, r1
		error |= 2;
     f4a:	12 60       	ori	r17, 0x02	; 2
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	be 01       	movw	r22, r28
     f50:	63 5c       	subi	r22, 0xC3	; 195
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	80 eb       	ldi	r24, 0xB0	; 176
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	ea da       	rcall	.-2604   	; 0x52e <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4A) != TWI_SUCCESS)
     f5a:	81 11       	cpse	r24, r1
		error |= 4;
     f5c:	14 60       	ori	r17, 0x04	; 4
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	be 01       	movw	r22, r28
     f62:	68 5b       	subi	r22, 0xB8	; 184
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	80 eb       	ldi	r24, 0xB0	; 176
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	e1 da       	rcall	.-2622   	; 0x52e <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4B) != TWI_SUCCESS)
     f6c:	81 11       	cpse	r24, r1
		error |= 8;
     f6e:	18 60       	ori	r17, 0x08	; 8
	
	return error;
}
     f70:	81 2f       	mov	r24, r17
     f72:	ce 5a       	subi	r28, 0xAE	; 174
     f74:	df 4f       	sbci	r29, 0xFF	; 255
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	7f 90       	pop	r7
     f94:	6f 90       	pop	r6
     f96:	5f 90       	pop	r5
     f98:	4f 90       	pop	r4
     f9a:	08 95       	ret

00000f9c <main>:


int main (void)
{
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	2d 97       	sbiw	r28, 0x0d	; 13
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	de bf       	out	0x3e, r29	; 62
	board_init();	//Init board
     faa:	ca de       	rcall	.-620    	; 0xd40 <board_init>
	sysclk_init();
     fac:	98 dc       	rcall	.-1744   	; 0x8de <sysclk_init>
	rtc_init();	
     fae:	cb dd       	rcall	.-1130   	; 0xb46 <rtc_init>
	init_spi_to_bbb();	//Setup SPI on Port C
     fb0:	a3 db       	rcall	.-2234   	; 0x6f8 <init_spi_to_bbb>
	sensor_status = init_i2c();
     fb2:	d3 de       	rcall	.-602    	; 0xd5a <init_i2c>
     fb4:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <sensor_status>
	sei();            // enable global interrupts
     fb8:	78 94       	sei
	
	state = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <state>
		
		if(spi_transfer == 0){//Do anything that is not SPI related
			
			uint8_t recieved_data[2];	
			twi_package_t packet_read;
			memset(&packet_read, 0, sizeof(twi_package_t));
     fc0:	0f 2e       	mov	r0, r31
     fc2:	fb e0       	ldi	r31, 0x0B	; 11
     fc4:	6f 2e       	mov	r6, r31
     fc6:	f0 2d       	mov	r31, r0
     fc8:	8e 01       	movw	r16, r28
     fca:	0f 5f       	subi	r16, 0xFF	; 255
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
			packet_read.addr[0]			= 0x00;
			packet_read.addr_length		= sizeof(uint8_t);
     fce:	88 24       	eor	r8, r8
     fd0:	83 94       	inc	r8
     fd2:	91 2c       	mov	r9, r1
			packet_read.chip			= 0x48;
     fd4:	0f 2e       	mov	r0, r31
     fd6:	f8 e4       	ldi	r31, 0x48	; 72
     fd8:	7f 2e       	mov	r7, r31
     fda:	f0 2d       	mov	r31, r0
			packet_read.buffer			= recieved_data;
     fdc:	5e 01       	movw	r10, r28
     fde:	8c e0       	ldi	r24, 0x0C	; 12
     fe0:	a8 0e       	add	r10, r24
     fe2:	b1 1c       	adc	r11, r1
			packet_read.length			= 2;
     fe4:	68 94       	set
     fe6:	cc 24       	eor	r12, r12
     fe8:	c1 f8       	bld	r12, 1
     fea:	d1 2c       	mov	r13, r1
			
			time1= rtc_get_time();
			
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
				sensor_data[0] = recieved_data[1];
     fec:	0f 2e       	mov	r0, r31
     fee:	f8 e0       	ldi	r31, 0x08	; 8
     ff0:	ef 2e       	mov	r14, r31
     ff2:	f0 e2       	ldi	r31, 0x20	; 32
     ff4:	ff 2e       	mov	r15, r31
     ff6:	f0 2d       	mov	r31, r0
				sensor_data[1] = recieved_data[0];
			}
			if(spi_isr) continue;
			
			
			packet_read.chip = 0x49;
     ff8:	0f 2e       	mov	r0, r31
     ffa:	f9 e4       	ldi	r31, 0x49	; 73
     ffc:	5f 2e       	mov	r5, r31
     ffe:	f0 2d       	mov	r31, r0
				sensor_data[2] = recieved_data[1];
				sensor_data[3] = recieved_data[0];
			}
			if(spi_isr) continue;
			
			packet_read.chip = 0x4A;
    1000:	0f 2e       	mov	r0, r31
    1002:	fa e4       	ldi	r31, 0x4A	; 74
    1004:	4f 2e       	mov	r4, r31
    1006:	f0 2d       	mov	r31, r0
				sensor_data[4] = recieved_data[1];
				sensor_data[5] = recieved_data[0];
			}
			if(spi_isr) continue;
			
			packet_read.chip = 0x4B;
    1008:	0f 2e       	mov	r0, r31
    100a:	fb e4       	ldi	r31, 0x4B	; 75
    100c:	3f 2e       	mov	r3, r31
    100e:	f0 2d       	mov	r31, r0
		//SPIC handler
		//When this is true, it means we have just received a byte
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		//_delay_ms(200);
		handle_spi_to_bbb();
    1010:	90 db       	rcall	.-2272   	; 0x732 <handle_spi_to_bbb>
		
		if(spi_transfer == 0){//Do anything that is not SPI related
    1012:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <spi_transfer>
    1016:	81 11       	cpse	r24, r1
    1018:	fb cf       	rjmp	.-10     	; 0x1010 <main+0x74>
			
			uint8_t recieved_data[2];	
			twi_package_t packet_read;
			memset(&packet_read, 0, sizeof(twi_package_t));
    101a:	f8 01       	movw	r30, r16
    101c:	86 2d       	mov	r24, r6
    101e:	11 92       	st	Z+, r1
    1020:	8a 95       	dec	r24
    1022:	e9 f7       	brne	.-6      	; 0x101e <main+0x82>
			packet_read.addr[0]			= 0x00;
			packet_read.addr_length		= sizeof(uint8_t);
    1024:	8d 82       	std	Y+5, r8	; 0x05
    1026:	9e 82       	std	Y+6, r9	; 0x06
			packet_read.chip			= 0x48;
    1028:	79 82       	std	Y+1, r7	; 0x01
			packet_read.buffer			= recieved_data;
    102a:	af 82       	std	Y+7, r10	; 0x07
    102c:	b8 86       	std	Y+8, r11	; 0x08
			packet_read.length			= 2;
    102e:	c9 86       	std	Y+9, r12	; 0x09
    1030:	da 86       	std	Y+10, r13	; 0x0a
			
			time1= rtc_get_time();
    1032:	53 dd       	rcall	.-1370   	; 0xada <rtc_get_time>
    1034:	60 93 2f 20 	sts	0x202F, r22	; 0x80202f <time1>
    1038:	70 93 30 20 	sts	0x2030, r23	; 0x802030 <time1+0x1>
    103c:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <time1+0x2>
    1040:	90 93 32 20 	sts	0x2032, r25	; 0x802032 <time1+0x3>
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	b8 01       	movw	r22, r16
    1048:	80 eb       	ldi	r24, 0xB0	; 176
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	70 da       	rcall	.-2848   	; 0x52e <twi_master_transfer>
			
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
    104e:	81 11       	cpse	r24, r1
    1050:	05 c0       	rjmp	.+10     	; 0x105c <main+0xc0>
				sensor_data[0] = recieved_data[1];
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	f7 01       	movw	r30, r14
    1056:	80 83       	st	Z, r24
				sensor_data[1] = recieved_data[0];
    1058:	8c 85       	ldd	r24, Y+12	; 0x0c
    105a:	81 83       	std	Z+1, r24	; 0x01
			}
			if(spi_isr) continue;
    105c:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    1060:	81 11       	cpse	r24, r1
    1062:	d6 cf       	rjmp	.-84     	; 0x1010 <main+0x74>
			
			
			packet_read.chip = 0x49;
    1064:	59 82       	std	Y+1, r5	; 0x01
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	b8 01       	movw	r22, r16
    106a:	80 eb       	ldi	r24, 0xB0	; 176
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	5f da       	rcall	.-2882   	; 0x52e <twi_master_transfer>
			
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    1070:	81 11       	cpse	r24, r1
    1072:	05 c0       	rjmp	.+10     	; 0x107e <main+0xe2>
				sensor_data[2] = recieved_data[1];
    1074:	8d 85       	ldd	r24, Y+13	; 0x0d
    1076:	f7 01       	movw	r30, r14
    1078:	82 83       	std	Z+2, r24	; 0x02
				sensor_data[3] = recieved_data[0];
    107a:	8c 85       	ldd	r24, Y+12	; 0x0c
    107c:	83 83       	std	Z+3, r24	; 0x03
			}
			if(spi_isr) continue;
    107e:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    1082:	81 11       	cpse	r24, r1
    1084:	c5 cf       	rjmp	.-118    	; 0x1010 <main+0x74>
			
			packet_read.chip = 0x4A;
    1086:	49 82       	std	Y+1, r4	; 0x01
    1088:	41 e0       	ldi	r20, 0x01	; 1
    108a:	b8 01       	movw	r22, r16
    108c:	80 eb       	ldi	r24, 0xB0	; 176
    108e:	94 e0       	ldi	r25, 0x04	; 4
    1090:	4e da       	rcall	.-2916   	; 0x52e <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    1092:	81 11       	cpse	r24, r1
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <main+0x104>
				sensor_data[4] = recieved_data[1];
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	f7 01       	movw	r30, r14
    109a:	84 83       	std	Z+4, r24	; 0x04
				sensor_data[5] = recieved_data[0];
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	85 83       	std	Z+5, r24	; 0x05
			}
			if(spi_isr) continue;
    10a0:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    10a4:	81 11       	cpse	r24, r1
    10a6:	b4 cf       	rjmp	.-152    	; 0x1010 <main+0x74>
			
			packet_read.chip = 0x4B;
    10a8:	39 82       	std	Y+1, r3	; 0x01
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	b8 01       	movw	r22, r16
    10ae:	80 eb       	ldi	r24, 0xB0	; 176
    10b0:	94 e0       	ldi	r25, 0x04	; 4
    10b2:	3d da       	rcall	.-2950   	; 0x52e <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    10b4:	81 11       	cpse	r24, r1
    10b6:	05 c0       	rjmp	.+10     	; 0x10c2 <main+0x126>
				sensor_data[6] = recieved_data[1];
    10b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ba:	f7 01       	movw	r30, r14
    10bc:	86 83       	std	Z+6, r24	; 0x06
				sensor_data[7] = recieved_data[0];
    10be:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c0:	87 83       	std	Z+7, r24	; 0x07
			}
			if(spi_isr) continue;
    10c2:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    10c6:	81 11       	cpse	r24, r1
    10c8:	a3 cf       	rjmp	.-186    	; 0x1010 <main+0x74>
			
			
			time2 = rtc_get_time();
    10ca:	07 dd       	rcall	.-1522   	; 0xada <rtc_get_time>
    10cc:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <time2>
    10d0:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <time2+0x1>
    10d4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <time2+0x2>
    10d8:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <time2+0x3>
			time3 = time2-time1;
    10dc:	20 91 2f 20 	lds	r18, 0x202F	; 0x80202f <time1>
    10e0:	30 91 30 20 	lds	r19, 0x2030	; 0x802030 <time1+0x1>
    10e4:	40 91 31 20 	lds	r20, 0x2031	; 0x802031 <time1+0x2>
    10e8:	50 91 32 20 	lds	r21, 0x2032	; 0x802032 <time1+0x3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	82 1b       	sub	r24, r18
    10f2:	93 0b       	sbc	r25, r19
    10f4:	a4 0b       	sbc	r26, r20
    10f6:	b5 0b       	sbc	r27, r21
    10f8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    10fc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1100:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    1104:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
			sensor_data[8] = time3 >> 0;
    1108:	f7 01       	movw	r30, r14
    110a:	80 87       	std	Z+8, r24	; 0x08
			sensor_data[9] = time3 >> 8;
    110c:	91 87       	std	Z+9, r25	; 0x09
			sensor_data[10] = time3 >> 16;
    110e:	a2 87       	std	Z+10, r26	; 0x0a
			sensor_data[11] = time3 >> 24;
    1110:	b3 87       	std	Z+11, r27	; 0x0b
    1112:	7e cf       	rjmp	.-260    	; 0x1010 <main+0x74>

00001114 <_exit>:
    1114:	f8 94       	cli

00001116 <__stop_program>:
    1116:	ff cf       	rjmp	.-2      	; 0x1116 <__stop_program>
