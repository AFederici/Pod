
SPI_Communication_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  000010e2  00001176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ab  00802014  00802014  0000118a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b6e4  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004eea  00000000  00000000  0000cb34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c6a  00000000  00000000  00011a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  00016688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003308a  00000000  00000000  00016d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001976  00000000  00000000  00049e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0004b79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bf68  00000000  00000000  0004b984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__vector_10>
      2a:	00 00       	nop
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__vector_11>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c5       	rjmp	.+2714   	; 0xad0 <__vector_13>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__vector_24>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6f c5       	rjmp	.+2782   	; 0xb98 <__vector_46>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	01 c5       	rjmp	.+2562   	; 0xb34 <__vector_76>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	27 c5       	rjmp	.+2638   	; 0xbfc <__vector_107>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e2 ee       	ldi	r30, 0xE2	; 226
     21c:	f0 e1       	ldi	r31, 0x10	; 16
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a4 31       	cpi	r26, 0x14	; 20
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a4 e1       	ldi	r26, 0x14	; 20
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 3b       	cpi	r26, 0xBF	; 191
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	a2 d6       	rcall	.+3396   	; 0xf86 <main>
     242:	4d c7       	rjmp	.+3738   	; 0x10de <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	e0 e0       	ldi	r30, 0x00	; 0
     256:	f4 e0       	ldi	r31, 0x04	; 4
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	80 fd       	sbrc	r24, 0
     25c:	fd cf       	rjmp	.-6      	; 0x258 <rtc_get_time+0x12>
     25e:	8f b7       	in	r24, 0x3f	; 63
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	f8 94       	cli
     264:	29 81       	ldd	r18, Y+1	; 0x01
     266:	40 91 3c 20 	lds	r20, 0x203C	; 0x80203c <rtc_data>
     26a:	50 91 3d 20 	lds	r21, 0x203D	; 0x80203d <rtc_data+0x1>
     26e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     272:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	31 f4       	brne	.+12     	; 0x286 <rtc_get_time+0x40>
     27a:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
     27e:	30 ff       	sbrs	r19, 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <rtc_get_time+0x40>
     282:	4f 5f       	subi	r20, 0xFF	; 255
     284:	5f 4f       	sbci	r21, 0xFF	; 255
     286:	2f bf       	out	0x3f, r18	; 63
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	ba 01       	movw	r22, r20
     28e:	55 27       	eor	r21, r21
     290:	44 27       	eor	r20, r20
     292:	a0 e0       	ldi	r26, 0x00	; 0
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	8a 01       	movw	r16, r20
     298:	9b 01       	movw	r18, r22
     29a:	08 2b       	or	r16, r24
     29c:	19 2b       	or	r17, r25
     29e:	2a 2b       	or	r18, r26
     2a0:	3b 2b       	or	r19, r27
     2a2:	c9 01       	movw	r24, r18
     2a4:	b8 01       	movw	r22, r16
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2bc:	64 e0       	ldi	r22, 0x04	; 4
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	7c d2       	rcall	.+1272   	; 0x7ba <sysclk_enable_module>
	RTC.PER = 0xffff;
     2c2:	e0 e0       	ldi	r30, 0x00	; 0
     2c4:	f4 e0       	ldi	r31, 0x04	; 4
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	9f ef       	ldi	r25, 0xFF	; 255
     2ca:	82 87       	std	Z+10, r24	; 0x0a
     2cc:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     2ce:	10 86       	std	Z+8, r1	; 0x08
     2d0:	11 86       	std	Z+9, r1	; 0x09
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     2d2:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <sleepmgr_locks+0x3>
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	09 f4       	brne	.+2      	; 0x2dc <rtc_init+0x2a>
     2da:	ff cf       	rjmp	.-2      	; 0x2da <rtc_init+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2dc:	8f b7       	in	r24, 0x3f	; 63
     2de:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2e0:	f8 94       	cli
	return flags;
     2e2:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     2e4:	e6 e3       	ldi	r30, 0x36	; 54
     2e6:	f0 e2       	ldi	r31, 0x20	; 32
     2e8:	83 81       	ldd	r24, Z+3	; 0x03
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ee:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     2f0:	e0 e0       	ldi	r30, 0x00	; 0
     2f2:	f4 e0       	ldi	r31, 0x04	; 4
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     2f8:	80 83       	st	Z, r24
}
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	08 b6       	in	r0, 0x38	; 56
     30e:	0f 92       	push	r0
     310:	18 be       	out	0x38, r1	; 56
     312:	0b b6       	in	r0, 0x3b	; 59
     314:	0f 92       	push	r0
     316:	1b be       	out	0x3b, r1	; 59
     318:	8f 93       	push	r24
     31a:	9f 93       	push	r25
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
	rtc_data.counter_high++;
     320:	ec e3       	ldi	r30, 0x3C	; 60
     322:	f0 e2       	ldi	r31, 0x20	; 32
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	80 83       	st	Z, r24
     32c:	91 83       	std	Z+1, r25	; 0x01
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	0f 90       	pop	r0
     338:	0b be       	out	0x3b, r0	; 59
     33a:	0f 90       	pop	r0
     33c:	08 be       	out	0x38, r0	; 56
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	08 b6       	in	r0, 0x38	; 56
     354:	0f 92       	push	r0
     356:	18 be       	out	0x38, r1	; 56
     358:	09 b6       	in	r0, 0x39	; 57
     35a:	0f 92       	push	r0
     35c:	19 be       	out	0x39, r1	; 57
     35e:	0b b6       	in	r0, 0x3b	; 59
     360:	0f 92       	push	r0
     362:	1b be       	out	0x3b, r1	; 59
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     388:	ec e3       	ldi	r30, 0x3C	; 60
     38a:	f0 e2       	ldi	r31, 0x20	; 32
     38c:	80 81       	ld	r24, Z
     38e:	91 81       	ldd	r25, Z+1	; 0x01
     390:	22 81       	ldd	r18, Z+2	; 0x02
     392:	33 81       	ldd	r19, Z+3	; 0x03
     394:	82 17       	cp	r24, r18
     396:	93 07       	cpc	r25, r19
     398:	f0 f1       	brcs	.+124    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     3a0:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <rtc_data+0x6>
     3a4:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <rtc_data+0x7>
     3a8:	30 97       	sbiw	r30, 0x00	; 0
     3aa:	a9 f1       	breq	.+106    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     3ac:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     3b0:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	dc 01       	movw	r26, r24
     3ba:	99 27       	eor	r25, r25
     3bc:	88 27       	eor	r24, r24
					| RTC.CNT;
     3be:	ab 01       	movw	r20, r22
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3c4:	8c 01       	movw	r16, r24
     3c6:	9d 01       	movw	r18, r26
     3c8:	04 2b       	or	r16, r20
     3ca:	15 2b       	or	r17, r21
     3cc:	26 2b       	or	r18, r22
     3ce:	37 2b       	or	r19, r23
     3d0:	c9 01       	movw	r24, r18
     3d2:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3d4:	ac e3       	ldi	r26, 0x3C	; 60
     3d6:	b0 e2       	ldi	r27, 0x20	; 32
     3d8:	12 96       	adiw	r26, 0x02	; 2
     3da:	0d 91       	ld	r16, X+
     3dc:	1c 91       	ld	r17, X
     3de:	13 97       	sbiw	r26, 0x03	; 3
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	98 01       	movw	r18, r16
     3e6:	11 27       	eor	r17, r17
     3e8:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     3ea:	14 96       	adiw	r26, 0x04	; 4
     3ec:	cd 90       	ld	r12, X+
     3ee:	dc 90       	ld	r13, X
     3f0:	15 97       	sbiw	r26, 0x05	; 5
     3f2:	e1 2c       	mov	r14, r1
     3f4:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3f6:	0c 29       	or	r16, r12
     3f8:	1d 29       	or	r17, r13
     3fa:	2e 29       	or	r18, r14
     3fc:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     3fe:	06 17       	cp	r16, r22
     400:	17 07       	cpc	r17, r23
     402:	28 07       	cpc	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	30 f0       	brcs	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				count = alarm + 1;
     408:	c9 01       	movw	r24, r18
     40a:	b8 01       	movw	r22, r16
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	8f 4f       	sbci	r24, 0xFF	; 255
     412:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     414:	19 95       	eicall
		}
	}
}
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	0f 90       	pop	r0
     43c:	0b be       	out	0x3b, r0	; 59
     43e:	0f 90       	pop	r0
     440:	09 be       	out	0x39, r0	; 57
     442:	0f 90       	pop	r0
     444:	08 be       	out	0x38, r0	; 56
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <circular_buffer_push>:
 *  Author: rgw3d
 */ 

#include "circular_buffer.h"

void circular_buffer_push(circular_buffer_t * cb, uint8_t data){
     450:	fc 01       	movw	r30, r24
	cb->buffer[cb->front] = data;
     452:	82 a9       	ldd	r24, Z+50	; 0x32
     454:	df 01       	movw	r26, r30
     456:	a8 0f       	add	r26, r24
     458:	b1 1d       	adc	r27, r1
     45a:	6c 93       	st	X, r22
	cb->front++;
     45c:	82 a9       	ldd	r24, Z+50	; 0x32
     45e:	8f 5f       	subi	r24, 0xFF	; 255
     460:	82 ab       	std	Z+50, r24	; 0x32
	cb->front =  cb->front % MAX_BUFFER_SIZE;
     462:	82 a9       	ldd	r24, Z+50	; 0x32
     464:	99 e2       	ldi	r25, 0x29	; 41
     466:	89 9f       	mul	r24, r25
     468:	91 2d       	mov	r25, r1
     46a:	11 24       	eor	r1, r1
     46c:	96 95       	lsr	r25
     46e:	96 95       	lsr	r25
     470:	96 95       	lsr	r25
     472:	22 e3       	ldi	r18, 0x32	; 50
     474:	92 9f       	mul	r25, r18
     476:	80 19       	sub	r24, r0
     478:	11 24       	eor	r1, r1
     47a:	82 ab       	std	Z+50, r24	; 0x32
     47c:	08 95       	ret

0000047e <circular_buffer_pop>:
	//cb->len++;
}
uint8_t circular_buffer_pop(circular_buffer_t * cb){
     47e:	fc 01       	movw	r30, r24
	uint8_t ret = cb->buffer[cb->back];
     480:	83 a9       	ldd	r24, Z+51	; 0x33
     482:	df 01       	movw	r26, r30
     484:	a8 0f       	add	r26, r24
     486:	b1 1d       	adc	r27, r1
     488:	8c 91       	ld	r24, X
	cb->back++;
     48a:	93 a9       	ldd	r25, Z+51	; 0x33
     48c:	9f 5f       	subi	r25, 0xFF	; 255
     48e:	93 ab       	std	Z+51, r25	; 0x33
	cb->back = cb->back % MAX_BUFFER_SIZE;
     490:	23 a9       	ldd	r18, Z+51	; 0x33
     492:	99 e2       	ldi	r25, 0x29	; 41
     494:	29 9f       	mul	r18, r25
     496:	91 2d       	mov	r25, r1
     498:	11 24       	eor	r1, r1
     49a:	96 95       	lsr	r25
     49c:	96 95       	lsr	r25
     49e:	96 95       	lsr	r25
     4a0:	32 e3       	ldi	r19, 0x32	; 50
     4a2:	93 9f       	mul	r25, r19
     4a4:	20 19       	sub	r18, r0
     4a6:	11 24       	eor	r1, r1
     4a8:	23 ab       	std	Z+51, r18	; 0x33
	//cb->len--;
	return ret;
}
     4aa:	08 95       	ret

000004ac <circular_buffer_size>:

inline uint8_t circular_buffer_size(circular_buffer_t * cb){
     4ac:	fc 01       	movw	r30, r24
	return ((uint8_t)(cb->front - cb->back))%MAX_BUFFER_SIZE;
     4ae:	92 a9       	ldd	r25, Z+50	; 0x32
     4b0:	83 a9       	ldd	r24, Z+51	; 0x33
     4b2:	98 1b       	sub	r25, r24
     4b4:	89 2f       	mov	r24, r25
     4b6:	99 e2       	ldi	r25, 0x29	; 41
     4b8:	89 9f       	mul	r24, r25
     4ba:	91 2d       	mov	r25, r1
     4bc:	11 24       	eor	r1, r1
     4be:	96 95       	lsr	r25
     4c0:	96 95       	lsr	r25
     4c2:	96 95       	lsr	r25
}
     4c4:	22 e3       	ldi	r18, 0x32	; 50
     4c6:	92 9f       	mul	r25, r18
     4c8:	80 19       	sub	r24, r0
     4ca:	11 24       	eor	r1, r1
     4cc:	08 95       	ret

000004ce <__vector_24>:
uint8_t send_idx = 0;
uint8_t send_crc_length = 0;//set equal to maximum value of send_idx
uint16_t send_crc = 0;
uint8_t send_crc_idx = 0;

ISR(SPIC_INT_vect) {
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	08 b6       	in	r0, 0x38	; 56
     4da:	0f 92       	push	r0
     4dc:	18 be       	out	0x38, r1	; 56
     4de:	09 b6       	in	r0, 0x39	; 57
     4e0:	0f 92       	push	r0
     4e2:	19 be       	out	0x39, r1	; 57
     4e4:	0b b6       	in	r0, 0x3b	; 59
     4e6:	0f 92       	push	r0
     4e8:	1b be       	out	0x3b, r1	; 59
     4ea:	2f 93       	push	r18
     4ec:	3f 93       	push	r19
     4ee:	4f 93       	push	r20
     4f0:	5f 93       	push	r21
     4f2:	6f 93       	push	r22
     4f4:	7f 93       	push	r23
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
	//Add recieved byte to rx buffer
	circular_buffer_push(&rx_buff, SPIC.DATA);
     502:	60 91 c3 08 	lds	r22, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     506:	84 e4       	ldi	r24, 0x44	; 68
     508:	90 e2       	ldi	r25, 0x20	; 32
     50a:	a2 df       	rcall	.-188    	; 0x450 <circular_buffer_push>
	
	//Send tx byte if there is one to send
	if(circular_buffer_size(&tx_buff)){
     50c:	8d e7       	ldi	r24, 0x7D	; 125
     50e:	90 e2       	ldi	r25, 0x20	; 32
     510:	cd df       	rcall	.-102    	; 0x4ac <circular_buffer_size>
     512:	88 23       	and	r24, r24
     514:	29 f0       	breq	.+10     	; 0x520 <__vector_24+0x52>
		SPIC.DATA = circular_buffer_pop(&tx_buff);
     516:	8d e7       	ldi	r24, 0x7D	; 125
     518:	90 e2       	ldi	r25, 0x20	; 32
     51a:	b1 df       	rcall	.-158    	; 0x47e <circular_buffer_pop>
     51c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	}
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0b be       	out	0x3b, r0	; 59
     53c:	0f 90       	pop	r0
     53e:	09 be       	out	0x39, r0	; 57
     540:	0f 90       	pop	r0
     542:	08 be       	out	0x38, r0	; 56
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <init_spi_to_bbb>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     54e:	68 e0       	ldi	r22, 0x08	; 8
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	33 d1       	rcall	.+614    	; 0x7ba <sysclk_enable_module>

void init_spi_to_bbb(){
	sysclk_enable_peripheral_clock( &SPIC ); 
	PORTC.DIR = 0x40;		// MISO output; MOSI, SCK, SS inputs
     554:	80 e4       	ldi	r24, 0x40	; 64
     556:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0x40;		// slave mode, mode 0
     55a:	e0 ec       	ldi	r30, 0xC0	; 192
     55c:	f8 e0       	ldi	r31, 0x08	; 8
     55e:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0x03;	// enable interrupts
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	81 83       	std	Z+1, r24	; 0x01
	PMIC.CTRL = 0x04;       // enable high priority interrupts
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	memset(&rx_buff, 0, sizeof(circular_buffer_t));
     56a:	84 e3       	ldi	r24, 0x34	; 52
     56c:	e4 e4       	ldi	r30, 0x44	; 68
     56e:	f0 e2       	ldi	r31, 0x20	; 32
     570:	df 01       	movw	r26, r30
     572:	98 2f       	mov	r25, r24
     574:	1d 92       	st	X+, r1
     576:	9a 95       	dec	r25
     578:	e9 f7       	brne	.-6      	; 0x574 <init_spi_to_bbb+0x26>
	memset(&tx_buff, 0, sizeof(circular_buffer_t));
     57a:	ed e7       	ldi	r30, 0x7D	; 125
     57c:	f0 e2       	ldi	r31, 0x20	; 32
     57e:	df 01       	movw	r26, r30
     580:	1d 92       	st	X+, r1
     582:	8a 95       	dec	r24
     584:	e9 f7       	brne	.-6      	; 0x580 <init_spi_to_bbb+0x32>
     586:	08 95       	ret

00000588 <handle_spi_to_bbb>:
	
	
}
void handle_spi_to_bbb(){
     588:	9f 92       	push	r9
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
		rx_byte = circular_buffer_pop(&rx_buff);
		
		if(rx_byte == SPI_TX_START){
			cmd_idx = CMD_DATA_SIZE;
     59e:	0f 2e       	mov	r0, r31
     5a0:	f5 e0       	ldi	r31, 0x05	; 5
     5a2:	bf 2e       	mov	r11, r31
     5a4:	f0 2d       	mov	r31, r0
			cmd_finished = 0;
			send_idx = 0;
			send_crc_length = 0;
			send_crc = 0;
			send_crc_idx = 0;
			lock = 1;
     5a6:	cc 24       	eor	r12, r12
     5a8:	c3 94       	inc	r12
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
     5aa:	0f 2e       	mov	r0, r31
     5ac:	fc e0       	ldi	r31, 0x0C	; 12
     5ae:	af 2e       	mov	r10, r31
     5b0:	f0 2d       	mov	r31, r0
				send_data[SENSOR_DATA_SIZE] = sensor_status;
				send_data[SENSOR_DATA_SIZE+1] = state;
				send_idx = SENSOR_DATA_SIZE+2;
     5b2:	0f 2e       	mov	r0, r31
     5b4:	fe e0       	ldi	r31, 0x0E	; 14
     5b6:	df 2e       	mov	r13, r31
     5b8:	f0 2d       	mov	r31, r0
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
     5ba:	c5 e0       	ldi	r28, 0x05	; 5
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
			cmd_idx--;
			//Finished last storage of incoming data
			if(cmd_idx == 0){
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
     5be:	08 e7       	ldi	r16, 0x78	; 120
     5c0:	10 e2       	ldi	r17, 0x20	; 32
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
					SPIC.DATA = SPI_CRC_PASS;
     5c2:	0f 2e       	mov	r0, r31
     5c4:	f0 ec       	ldi	r31, 0xC0	; 192
     5c6:	ef 2e       	mov	r14, r31
     5c8:	f8 e0       	ldi	r31, 0x08	; 8
     5ca:	ff 2e       	mov	r15, r31
     5cc:	f0 2d       	mov	r31, r0
     5ce:	0f 2e       	mov	r0, r31
     5d0:	fa ea       	ldi	r31, 0xAA	; 170
     5d2:	9f 2e       	mov	r9, r31
     5d4:	f0 2d       	mov	r31, r0
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
     5d6:	9b c0       	rjmp	.+310    	; 0x70e <handle_spi_to_bbb+0x186>
		rx_byte = circular_buffer_pop(&rx_buff);
     5d8:	84 e4       	ldi	r24, 0x44	; 68
     5da:	90 e2       	ldi	r25, 0x20	; 32
     5dc:	50 df       	rcall	.-352    	; 0x47e <circular_buffer_pop>
     5de:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <rx_byte>
		
		if(rx_byte == SPI_TX_START){
     5e2:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <rx_byte>
     5e6:	8a 3a       	cpi	r24, 0xAA	; 170
     5e8:	81 f4       	brne	.+32     	; 0x60a <handle_spi_to_bbb+0x82>
			cmd_idx = CMD_DATA_SIZE;
     5ea:	b0 92 1e 20 	sts	0x201E, r11	; 0x80201e <cmd_idx>
			//Reset all the send variables/tmp storage
			cmd_finished = 0;
     5ee:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <cmd_finished>
			send_idx = 0;
     5f2:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <send_idx>
			send_crc_length = 0;
     5f6:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <send_crc_length>
			send_crc = 0;
     5fa:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <send_crc>
     5fe:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <send_crc+0x1>
			send_crc_idx = 0;
     602:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <__data_end>
			lock = 1;
     606:	c0 92 33 20 	sts	0x2033, r12	; 0x802033 <lock>
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
     60a:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <cmd_idx>
     60e:	88 23       	and	r24, r24
     610:	b1 f1       	breq	.+108    	; 0x67e <handle_spi_to_bbb+0xf6>
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
     612:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <rx_byte>
     616:	fe 01       	movw	r30, r28
     618:	e8 1b       	sub	r30, r24
     61a:	f1 09       	sbc	r31, r1
     61c:	e8 58       	subi	r30, 0x88	; 136
     61e:	ff 4d       	sbci	r31, 0xDF	; 223
     620:	90 83       	st	Z, r25
			cmd_idx--;
     622:	81 50       	subi	r24, 0x01	; 1
     624:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <cmd_idx>
			//Finished last storage of incoming data
			if(cmd_idx == 0){
     628:	81 11       	cpse	r24, r1
     62a:	71 c0       	rjmp	.+226    	; 0x70e <handle_spi_to_bbb+0x186>
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
     62c:	f8 01       	movw	r30, r16
     62e:	84 81       	ldd	r24, Z+4	; 0x04
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	98 2f       	mov	r25, r24
     634:	88 27       	eor	r24, r24
     636:	23 81       	ldd	r18, Z+3	; 0x03
     638:	82 2b       	or	r24, r18
     63a:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <received_crc>
     63e:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <received_crc+0x1>
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	c8 01       	movw	r24, r16
     64a:	55 d1       	rcall	.+682    	; 0x8f6 <crc_io_checksum>
     64c:	60 93 1a 20 	sts	0x201A, r22	; 0x80201a <calculated_crc>
     650:	70 93 1b 20 	sts	0x201B, r23	; 0x80201b <calculated_crc+0x1>
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
     654:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <received_crc>
     658:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <received_crc+0x1>
     65c:	26 17       	cp	r18, r22
     65e:	37 07       	cpc	r19, r23
     660:	49 f4       	brne	.+18     	; 0x674 <handle_spi_to_bbb+0xec>
					SPIC.DATA = SPI_CRC_PASS;
     662:	f7 01       	movw	r30, r14
     664:	93 82       	std	Z+3, r9	; 0x03
					
					circular_buffer_push(&tx_buff,SPI_CRC_PASS);
     666:	69 2d       	mov	r22, r9
     668:	8d e7       	ldi	r24, 0x7D	; 125
     66a:	90 e2       	ldi	r25, 0x20	; 32
     66c:	f1 de       	rcall	.-542    	; 0x450 <circular_buffer_push>
					cmd_finished = 1;
     66e:	c0 92 19 20 	sts	0x2019, r12	; 0x802019 <cmd_finished>
     672:	4d c0       	rjmp	.+154    	; 0x70e <handle_spi_to_bbb+0x186>
				}
				else{
					
					//SPIC.DATA = SPI_CRC_FAIL;
					circular_buffer_push(&tx_buff,SPI_CRC_FAIL);
     674:	60 ef       	ldi	r22, 0xF0	; 240
     676:	8d e7       	ldi	r24, 0x7D	; 125
     678:	90 e2       	ldi	r25, 0x20	; 32
     67a:	ea de       	rcall	.-556    	; 0x450 <circular_buffer_push>
     67c:	48 c0       	rjmp	.+144    	; 0x70e <handle_spi_to_bbb+0x186>
				}
			}
		}
		else if(cmd_finished){
     67e:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <cmd_finished>
     682:	88 23       	and	r24, r24
     684:	09 f4       	brne	.+2      	; 0x688 <handle_spi_to_bbb+0x100>
     686:	43 c0       	rjmp	.+134    	; 0x70e <handle_spi_to_bbb+0x186>
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
     688:	e8 e0       	ldi	r30, 0x08	; 8
     68a:	f0 e2       	ldi	r31, 0x20	; 32
     68c:	a1 eb       	ldi	r26, 0xB1	; 177
     68e:	b0 e2       	ldi	r27, 0x20	; 32
     690:	8a 2d       	mov	r24, r10
     692:	01 90       	ld	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	8a 95       	dec	r24
     698:	e1 f7       	brne	.-8      	; 0x692 <handle_spi_to_bbb+0x10a>
				send_data[SENSOR_DATA_SIZE] = sensor_status;
     69a:	e1 eb       	ldi	r30, 0xB1	; 177
     69c:	f0 e2       	ldi	r31, 0x20	; 32
     69e:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <sensor_status>
     6a2:	84 87       	std	Z+12, r24	; 0x0c
				send_data[SENSOR_DATA_SIZE+1] = state;
     6a4:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <state>
     6a8:	85 87       	std	Z+13, r24	; 0x0d
				send_idx = SENSOR_DATA_SIZE+2;
     6aa:	d0 92 18 20 	sts	0x2018, r13	; 0x802018 <send_idx>
			//}
			send_crc_length = send_idx;
     6ae:	d0 92 17 20 	sts	0x2017, r13	; 0x802017 <send_crc_length>
			cmd_finished = 0;
     6b2:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <cmd_finished>
			
			while(send_idx){
     6b6:	25 c0       	rjmp	.+74     	; 0x702 <handle_spi_to_bbb+0x17a>
				//SPIC.DATA = send_data[send_crc_length-send_idx];
				circular_buffer_push(&tx_buff, send_data[send_crc_length-send_idx]);
     6b8:	e0 91 17 20 	lds	r30, 0x2017	; 0x802017 <send_crc_length>
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e8 1b       	sub	r30, r24
     6c0:	f1 09       	sbc	r31, r1
     6c2:	ef 54       	subi	r30, 0x4F	; 79
     6c4:	ff 4d       	sbci	r31, 0xDF	; 223
     6c6:	60 81       	ld	r22, Z
     6c8:	8d e7       	ldi	r24, 0x7D	; 125
     6ca:	90 e2       	ldi	r25, 0x20	; 32
     6cc:	c1 de       	rcall	.-638    	; 0x450 <circular_buffer_push>
				send_idx--;
     6ce:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <send_idx>
     6d2:	81 50       	subi	r24, 0x01	; 1
     6d4:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <send_idx>
				
				//Calculate CRC
				if(send_idx == 0){
     6d8:	81 11       	cpse	r24, r1
     6da:	13 c0       	rjmp	.+38     	; 0x702 <handle_spi_to_bbb+0x17a>
					send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
     6dc:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <send_crc_length>
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	81 eb       	ldi	r24, 0xB1	; 177
     6e6:	90 e2       	ldi	r25, 0x20	; 32
     6e8:	06 d1       	rcall	.+524    	; 0x8f6 <crc_io_checksum>
     6ea:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <send_crc>
     6ee:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <send_crc+0x1>
					circular_buffer_push(&tx_buff, send_crc);
     6f2:	8d e7       	ldi	r24, 0x7D	; 125
     6f4:	90 e2       	ldi	r25, 0x20	; 32
     6f6:	ac de       	rcall	.-680    	; 0x450 <circular_buffer_push>
					circular_buffer_push(&tx_buff, send_crc>> 8);
     6f8:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <send_crc+0x1>
     6fc:	8d e7       	ldi	r24, 0x7D	; 125
     6fe:	90 e2       	ldi	r25, 0x20	; 32
     700:	a7 de       	rcall	.-690    	; 0x450 <circular_buffer_push>
				send_idx = SENSOR_DATA_SIZE+2;
			//}
			send_crc_length = send_idx;
			cmd_finished = 0;
			
			while(send_idx){
     702:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <send_idx>
     706:	81 11       	cpse	r24, r1
     708:	d7 cf       	rjmp	.-82     	; 0x6b8 <handle_spi_to_bbb+0x130>
					circular_buffer_push(&tx_buff, send_crc);
					circular_buffer_push(&tx_buff, send_crc>> 8);
				}
			}
			
			lock = 0;
     70a:	10 92 33 20 	sts	0x2033, r1	; 0x802033 <lock>
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
     70e:	84 e4       	ldi	r24, 0x44	; 68
     710:	90 e2       	ldi	r25, 0x20	; 32
     712:	cc de       	rcall	.-616    	; 0x4ac <circular_buffer_size>
     714:	81 11       	cpse	r24, r1
     716:	60 cf       	rjmp	.-320    	; 0x5d8 <handle_spi_to_bbb+0x50>
			}
			
			lock = 0;
		}
	}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	9f 90       	pop	r9
     72e:	08 95       	ret

00000730 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <sysclk_init+0x6>
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     740:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     744:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     748:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     74c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     750:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     754:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     758:	8f b7       	in	r24, 0x3f	; 63
     75a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     75c:	f8 94       	cli
	return flags;
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     760:	e0 e5       	ldi	r30, 0x50	; 80
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	82 60       	ori	r24, 0x02	; 2
     768:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     76a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     76e:	81 ff       	sbrs	r24, 1
     770:	fd cf       	rjmp	.-6      	; 0x76c <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	d9 d0       	rcall	.+434    	; 0x92c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     77a:	8f b7       	in	r24, 0x3f	; 63
     77c:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     77e:	f8 94       	cli
	return flags;
     780:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     782:	e0 e5       	ldi	r30, 0x50	; 80
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     78c:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     792:	8f b7       	in	r24, 0x3f	; 63
     794:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     796:	f8 94       	cli
	return flags;
     798:	99 81       	ldd	r25, Y+1	; 0x01
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     79a:	80 81       	ld	r24, Z
     79c:	88 60       	ori	r24, 0x08	; 8
     79e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7a0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	83 ff       	sbrs	r24, 3
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <sysclk_init+0x72>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     7a8:	8b e0       	ldi	r24, 0x0B	; 11
     7aa:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     7ae:	23 96       	adiw	r28, 0x03	; 3
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7c4:	9f b7       	in	r25, 0x3f	; 63
     7c6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7c8:	f8 94       	cli
	return flags;
     7ca:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7cc:	e8 2f       	mov	r30, r24
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	e0 59       	subi	r30, 0x90	; 144
     7d2:	ff 4f       	sbci	r31, 0xFF	; 255
     7d4:	60 95       	com	r22
     7d6:	80 81       	ld	r24, Z
     7d8:	68 23       	and	r22, r24
     7da:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7dc:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     7de:	0f 90       	pop	r0
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <crc_io_checksum_byte_start>:
 * the module and get the calculated checksum.
 *
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 */
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
 *
 */
static inline void crc_reset(void)
{
	// Reset module
	CRC_CTRL |= CRC_RESET_RESET0_gc;
     7ea:	e0 ed       	ldi	r30, 0xD0	; 208
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	90 81       	ld	r25, Z
     7f0:	90 68       	ori	r25, 0x80	; 128
     7f2:	90 83       	st	Z, r25

	// Set initial checksum value
	CRC.CHECKSUM0 = crc_initial_value & 0xFF;
     7f4:	40 91 20 20 	lds	r20, 0x2020	; 0x802020 <crc_initial_value>
     7f8:	50 91 21 20 	lds	r21, 0x2021	; 0x802021 <crc_initial_value+0x1>
     7fc:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <crc_initial_value+0x2>
     800:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <crc_initial_value+0x3>
     804:	44 83       	std	Z+4, r20	; 0x04
	CRC.CHECKSUM1 = (crc_initial_value >> 8) & 0xFF;
     806:	05 2f       	mov	r16, r21
     808:	16 2f       	mov	r17, r22
     80a:	27 2f       	mov	r18, r23
     80c:	33 27       	eor	r19, r19
     80e:	05 83       	std	Z+5, r16	; 0x05
	CRC.CHECKSUM2 = (crc_initial_value >> 16) & 0xFF;
     810:	8b 01       	movw	r16, r22
     812:	22 27       	eor	r18, r18
     814:	33 27       	eor	r19, r19
     816:	06 83       	std	Z+6, r16	; 0x06
	CRC.CHECKSUM3 = (crc_initial_value >> 24) & 0xFF;
     818:	47 2f       	mov	r20, r23
     81a:	55 27       	eor	r21, r21
     81c:	66 27       	eor	r22, r22
     81e:	77 27       	eor	r23, r23
     820:	47 83       	std	Z+7, r20	; 0x07

	crc_initial_value = 0;
     822:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <crc_initial_value>
     826:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <crc_initial_value+0x1>
     82a:	10 92 22 20 	sts	0x2022, r1	; 0x802022 <crc_initial_value+0x2>
     82e:	10 92 23 20 	sts	0x2023, r1	; 0x802023 <crc_initial_value+0x3>
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
	// Initialize CRC calculations on I/O interface
	crc_reset();
	// Enable CRC-32 if chosen
	if (crc_16_32 == CRC_32BIT) {
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	19 f4       	brne	.+6      	; 0x83c <crc_io_checksum_byte_start+0x56>
 * \note This cannot be changed while the busy flag is set.
 *
 */
static inline void crc_32_enable(void)
{
	CRC_CTRL |= CRC_CRC32_bm;
     836:	80 81       	ld	r24, Z
     838:	80 62       	ori	r24, 0x20	; 32
     83a:	80 83       	st	Z, r24
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
     83c:	e0 ed       	ldi	r30, 0xD0	; 208
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	80 7f       	andi	r24, 0xF0	; 240
     844:	80 83       	st	Z, r24
	CRC_CTRL |= source;
     846:	80 81       	ld	r24, Z
     848:	81 60       	ori	r24, 0x01	; 1
     84a:	80 83       	st	Z, r24
	if (crc_16_32 == CRC_32BIT) {
		crc_32_enable();
	}
	// Enable CRC module using the I/O interface
	crc_set_source(CRC_SOURCE_IO_gc);
}
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <crc_io_checksum_byte_stop>:
 *
 * \retval checksum checksum
 *
 */
uint32_t crc_io_checksum_byte_stop(void)
{
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;
     85a:	e1 ed       	ldi	r30, 0xD1	; 209
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	81 60       	ori	r24, 0x01	; 1
     862:	80 83       	st	Z, r24
 * \retval false if module is not busy
 *
 */
static inline bool crc_is_busy(void)
{
	return ((CRC_STATUS & CRC_BUSY_bm) == CRC_BUSY_bm);
     864:	80 81       	ld	r24, Z
 * \return checksum checksum value
 */
static inline uint32_t crc_checksum_read(void)
{
	// Wait until the CRC conversion is finished
	while (crc_is_busy()) {
     866:	80 fd       	sbrc	r24, 0
     868:	fd cf       	rjmp	.-6      	; 0x864 <crc_io_checksum_byte_stop+0x12>
		// Do nothing
	}

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
     86a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     86e:	85 ff       	sbrs	r24, 5
     870:	2e c0       	rjmp	.+92     	; 0x8ce <crc_io_checksum_byte_stop+0x7c>
 */
static inline uint32_t crc32_checksum_read(void)
{
	uint32_t checksum;

	checksum = ((uint32_t)CRC_CHECKSUM0 & 0x000000FF);
     872:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint32_t)CRC_CHECKSUM1 << 8) & 0x0000FF00);
     876:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	checksum |= (((uint32_t)CRC_CHECKSUM2 << 16) & 0x00FF0000);
     87a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	checksum |= (((uint32_t)CRC_CHECKSUM3 << 24) & 0xFF000000);
     87e:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7000d7>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	72 2b       	or	r23, r18
     88a:	59 2b       	or	r21, r25
     88c:	68 2b       	or	r22, r24
     88e:	20 e2       	ldi	r18, 0x20	; 32
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	dc 01       	movw	r26, r24
		result = (result << 1) + (value & 1);
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	aa 1f       	adc	r26, r26
     89c:	bb 1f       	adc	r27, r27
     89e:	6a 01       	movw	r12, r20
     8a0:	7b 01       	movw	r14, r22
     8a2:	31 e0       	ldi	r19, 0x01	; 1
     8a4:	c3 22       	and	r12, r19
     8a6:	dd 24       	eor	r13, r13
     8a8:	ee 24       	eor	r14, r14
     8aa:	ff 24       	eor	r15, r15
     8ac:	8c 0d       	add	r24, r12
     8ae:	9d 1d       	adc	r25, r13
     8b0:	ae 1d       	adc	r26, r14
     8b2:	bf 1d       	adc	r27, r15
		value >>= 1;
     8b4:	76 95       	lsr	r23
     8b6:	67 95       	ror	r22
     8b8:	57 95       	ror	r21
     8ba:	47 95       	ror	r20
     8bc:	21 50       	subi	r18, 0x01	; 1
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
     8be:	59 f7       	brne	.-42     	; 0x896 <crc_io_checksum_byte_stop+0x44>

	// Bit reverse the result (to comply with IEEE 802.3 CRC-32)
	checksum = crc_bit_revert(checksum);

	// Complement the result (to comply with IEEE 802.3 CRC-32)
	checksum = ~checksum;
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	60 95       	com	r22
     8c6:	70 95       	com	r23
     8c8:	80 95       	com	r24
     8ca:	90 95       	com	r25
     8cc:	08 c0       	rjmp	.+16     	; 0x8de <crc_io_checksum_byte_stop+0x8c>
 */
static inline uint16_t crc16_checksum_read(void)
{
	uint16_t checksum;
	checksum = 0;
	checksum = ((uint16_t)CRC_CHECKSUM0 & 0x00FF);
     8ce:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint16_t)CRC_CHECKSUM1 << 8) & 0xFF00);
     8d2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	78 2b       	or	r23, r24

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
		return crc32_checksum_read();
	} else {
		return crc16_checksum_read();
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
     8de:	e0 ed       	ldi	r30, 0xD0	; 208
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	20 81       	ld	r18, Z
     8e4:	20 7f       	andi	r18, 0xF0	; 240
     8e6:	20 83       	st	Z, r18
	CRC_CTRL |= source;
     8e8:	20 81       	ld	r18, Z
     8ea:	20 83       	st	Z, r18
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;

	// Stop CRC and return checksum
	return crc_checksum_complete();
}
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	08 95       	ret

000008f6 <crc_io_checksum>:
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 *
 * \return checksum checksum
 */
uint32_t crc_io_checksum(void *data, uint16_t len, enum crc_16_32_t crc_16_32)
{
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
     900:	8b 01       	movw	r16, r22
     902:	84 2f       	mov	r24, r20
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);
     904:	70 df       	rcall	.-288    	; 0x7e6 <crc_io_checksum_byte_start>

	// Write data to DATAIN register
	while (len--) {
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f0       	breq	.+20     	; 0x920 <crc_io_checksum+0x2a>
     90c:	be 01       	movw	r22, r28
     90e:	60 0f       	add	r22, r16
     910:	71 1f       	adc	r23, r17
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
     912:	e3 ed       	ldi	r30, 0xD3	; 211
     914:	f0 e0       	ldi	r31, 0x00	; 0
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
		crc_io_checksum_byte_add(*(uint8_t*)data);
     916:	89 91       	ld	r24, Y+
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
     918:	80 83       	st	Z, r24
{
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
     91a:	c6 17       	cp	r28, r22
     91c:	d7 07       	cpc	r29, r23
     91e:	d9 f7       	brne	.-10     	; 0x916 <crc_io_checksum+0x20>
		crc_io_checksum_byte_add(*(uint8_t*)data);
		data = (uint8_t*)data + 1;
	}

	// Return checksum
	return crc_io_checksum_byte_stop();
     920:	98 df       	rcall	.-208    	; 0x852 <crc_io_checksum_byte_stop>
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     92c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     92e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     930:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     932:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     934:	60 83       	st	Z, r22
	ret                             // Return to caller
     936:	08 95       	ret

00000938 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	fc 01       	movw	r30, r24
     93e:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     944:	c6 2f       	mov	r28, r22
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	de 01       	movw	r26, r28
     94a:	02 2e       	mov	r0, r18
     94c:	02 c0       	rjmp	.+4      	; 0x952 <ioport_configure_port_pin+0x1a>
     94e:	b5 95       	asr	r27
     950:	a7 95       	ror	r26
     952:	0a 94       	dec	r0
     954:	e2 f7       	brpl	.-8      	; 0x94e <ioport_configure_port_pin+0x16>
     956:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     958:	50 83       	st	Z, r21
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     960:	28 30       	cpi	r18, 0x08	; 8
     962:	31 05       	cpc	r19, r1
     964:	89 f7       	brne	.-30     	; 0x948 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     966:	40 ff       	sbrs	r20, 0
     968:	0a c0       	rjmp	.+20     	; 0x97e <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     96a:	41 ff       	sbrs	r20, 1
     96c:	03 c0       	rjmp	.+6      	; 0x974 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     96e:	fc 01       	movw	r30, r24
     970:	65 83       	std	Z+5, r22	; 0x05
     972:	02 c0       	rjmp	.+4      	; 0x978 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     974:	fc 01       	movw	r30, r24
     976:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     978:	fc 01       	movw	r30, r24
     97a:	61 83       	std	Z+1, r22	; 0x01
     97c:	02 c0       	rjmp	.+4      	; 0x982 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     97e:	fc 01       	movw	r30, r24
     980:	62 83       	std	Z+2, r22	; 0x02
	}
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     988:	43 e0       	ldi	r20, 0x03	; 3
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	68 e0       	ldi	r22, 0x08	; 8
     98e:	80 ec       	ldi	r24, 0xC0	; 192
     990:	97 e0       	ldi	r25, 0x07	; 7
     992:	d2 df       	rcall	.-92     	; 0x938 <ioport_configure_port_pin>
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	58 e1       	ldi	r21, 0x18	; 24
     998:	64 e0       	ldi	r22, 0x04	; 4
     99a:	80 ec       	ldi	r24, 0xC0	; 192
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	cc cf       	rjmp	.-104    	; 0x938 <ioport_configure_port_pin>
     9a0:	08 95       	ret

000009a2 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     9a6:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <transfer>
     9aa:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <transfer+0x1>
     9ae:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     9b0:	83 ff       	sbrs	r24, 3
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     9b4:	88 60       	ori	r24, 0x08	; 8
     9b6:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     9bc:	86 ef       	ldi	r24, 0xF6	; 246
     9be:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
     9c2:	83 c0       	rjmp	.+262    	; 0xaca <twim_interrupt_handler+0x128>
     9c4:	98 2f       	mov	r25, r24
     9c6:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     9c8:	31 f0       	breq	.+12     	; 0x9d6 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
     9d4:	7a c0       	rjmp	.+244    	; 0xaca <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     9d6:	86 ff       	sbrs	r24, 6
     9d8:	43 c0       	rjmp	.+134    	; 0xa60 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     9da:	c4 e2       	ldi	r28, 0x24	; 36
     9dc:	d0 e2       	ldi	r29, 0x20	; 32
     9de:	aa 81       	ldd	r26, Y+2	; 0x02
     9e0:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     9e2:	8c 81       	ldd	r24, Y+4	; 0x04
     9e4:	9d 81       	ldd	r25, Y+5	; 0x05
     9e6:	14 96       	adiw	r26, 0x04	; 4
     9e8:	2d 91       	ld	r18, X+
     9ea:	3c 91       	ld	r19, X
     9ec:	15 97       	sbiw	r26, 0x05	; 5
     9ee:	82 17       	cp	r24, r18
     9f0:	93 07       	cpc	r25, r19
     9f2:	6c f4       	brge	.+26     	; 0xa0e <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     9f4:	9c 01       	movw	r18, r24
     9f6:	2f 5f       	subi	r18, 0xFF	; 255
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	20 93 28 20 	sts	0x2028, r18	; 0x802028 <transfer+0x4>
     9fe:	30 93 29 20 	sts	0x2029, r19	; 0x802029 <transfer+0x5>
     a02:	a8 0f       	add	r26, r24
     a04:	b9 1f       	adc	r27, r25
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	8c 91       	ld	r24, X
     a0a:	87 83       	std	Z+7, r24	; 0x07
     a0c:	5e c0       	rjmp	.+188    	; 0xaca <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     a0e:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <transfer+0x6>
     a12:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <transfer+0x7>
     a16:	18 96       	adiw	r26, 0x08	; 8
     a18:	2d 91       	ld	r18, X+
     a1a:	3c 91       	ld	r19, X
     a1c:	19 97       	sbiw	r26, 0x09	; 9
     a1e:	82 17       	cp	r24, r18
     a20:	93 07       	cpc	r25, r19
     a22:	c8 f4       	brcc	.+50     	; 0xa56 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     a24:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <transfer+0x8>
     a28:	22 23       	and	r18, r18
     a2a:	21 f0       	breq	.+8      	; 0xa34 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     a2c:	86 81       	ldd	r24, Z+6	; 0x06
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	86 83       	std	Z+6, r24	; 0x06
     a32:	4b c0       	rjmp	.+150    	; 0xaca <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     a34:	16 96       	adiw	r26, 0x06	; 6
     a36:	2d 91       	ld	r18, X+
     a38:	3c 91       	ld	r19, X
     a3a:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     a3c:	ac 01       	movw	r20, r24
     a3e:	4f 5f       	subi	r20, 0xFF	; 255
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	40 93 2a 20 	sts	0x202A, r20	; 0x80202a <transfer+0x6>
     a46:	50 93 2b 20 	sts	0x202B, r21	; 0x80202b <transfer+0x7>
     a4a:	d9 01       	movw	r26, r18
     a4c:	a8 0f       	add	r26, r24
     a4e:	b9 1f       	adc	r27, r25
     a50:	8c 91       	ld	r24, X
     a52:	87 83       	std	Z+7, r24	; 0x07
     a54:	3a c0       	rjmp	.+116    	; 0xaca <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     a5a:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <transfer+0xa>
     a5e:	35 c0       	rjmp	.+106    	; 0xaca <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     a60:	88 23       	and	r24, r24
     a62:	84 f5       	brge	.+96     	; 0xac4 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     a64:	a4 e2       	ldi	r26, 0x24	; 36
     a66:	b0 e2       	ldi	r27, 0x20	; 32
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	cd 91       	ld	r28, X+
     a6c:	dc 91       	ld	r29, X
     a6e:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     a70:	16 96       	adiw	r26, 0x06	; 6
     a72:	8d 91       	ld	r24, X+
     a74:	9c 91       	ld	r25, X
     a76:	17 97       	sbiw	r26, 0x07	; 7
     a78:	28 85       	ldd	r18, Y+8	; 0x08
     a7a:	39 85       	ldd	r19, Y+9	; 0x09
     a7c:	82 17       	cp	r24, r18
     a7e:	93 07       	cpc	r25, r19
     a80:	d8 f4       	brcc	.+54     	; 0xab8 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     a82:	6e 81       	ldd	r22, Y+6	; 0x06
     a84:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     a86:	9c 01       	movw	r18, r24
     a88:	2f 5f       	subi	r18, 0xFF	; 255
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	20 93 2a 20 	sts	0x202A, r18	; 0x80202a <transfer+0x6>
     a90:	30 93 2b 20 	sts	0x202B, r19	; 0x80202b <transfer+0x7>
     a94:	47 81       	ldd	r20, Z+7	; 0x07
     a96:	db 01       	movw	r26, r22
     a98:	a8 0f       	add	r26, r24
     a9a:	b9 1f       	adc	r27, r25
     a9c:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     a9e:	88 85       	ldd	r24, Y+8	; 0x08
     aa0:	99 85       	ldd	r25, Y+9	; 0x09
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	18 f4       	brcc	.+6      	; 0xaae <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	83 83       	std	Z+3, r24	; 0x03
     aac:	0e c0       	rjmp	.+28     	; 0xaca <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     ab2:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <transfer+0xa>
     ab6:	09 c0       	rjmp	.+18     	; 0xaca <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     abc:	89 ef       	ldi	r24, 0xF9	; 249
     abe:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     ac4:	8b ef       	ldi	r24, 0xFB	; 251
     ac6:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
	}
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	08 b6       	in	r0, 0x38	; 56
     adc:	0f 92       	push	r0
     ade:	18 be       	out	0x38, r1	; 56
     ae0:	09 b6       	in	r0, 0x39	; 57
     ae2:	0f 92       	push	r0
     ae4:	19 be       	out	0x39, r1	; 57
     ae6:	0b b6       	in	r0, 0x3b	; 59
     ae8:	0f 92       	push	r0
     aea:	1b be       	out	0x3b, r1	; 59
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31
     b04:	4e df       	rcall	.-356    	; 0x9a2 <twim_interrupt_handler>
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0b be       	out	0x3b, r0	; 59
     b22:	0f 90       	pop	r0
     b24:	09 be       	out	0x39, r0	; 57
     b26:	0f 90       	pop	r0
     b28:	08 be       	out	0x38, r0	; 56
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	08 b6       	in	r0, 0x38	; 56
     b40:	0f 92       	push	r0
     b42:	18 be       	out	0x38, r1	; 56
     b44:	09 b6       	in	r0, 0x39	; 57
     b46:	0f 92       	push	r0
     b48:	19 be       	out	0x39, r1	; 57
     b4a:	0b b6       	in	r0, 0x3b	; 59
     b4c:	0f 92       	push	r0
     b4e:	1b be       	out	0x3b, r1	; 59
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	1c df       	rcall	.-456    	; 0x9a2 <twim_interrupt_handler>
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	09 be       	out	0x39, r0	; 57
     b8a:	0f 90       	pop	r0
     b8c:	08 be       	out	0x38, r0	; 56
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	08 b6       	in	r0, 0x38	; 56
     ba4:	0f 92       	push	r0
     ba6:	18 be       	out	0x38, r1	; 56
     ba8:	09 b6       	in	r0, 0x39	; 57
     baa:	0f 92       	push	r0
     bac:	19 be       	out	0x39, r1	; 57
     bae:	0b b6       	in	r0, 0x3b	; 59
     bb0:	0f 92       	push	r0
     bb2:	1b be       	out	0x3b, r1	; 59
     bb4:	2f 93       	push	r18
     bb6:	3f 93       	push	r19
     bb8:	4f 93       	push	r20
     bba:	5f 93       	push	r21
     bbc:	6f 93       	push	r22
     bbe:	7f 93       	push	r23
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
     bcc:	ea de       	rcall	.-556    	; 0x9a2 <twim_interrupt_handler>
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0b be       	out	0x3b, r0	; 59
     bea:	0f 90       	pop	r0
     bec:	09 be       	out	0x39, r0	; 57
     bee:	0f 90       	pop	r0
     bf0:	08 be       	out	0x38, r0	; 56
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	08 b6       	in	r0, 0x38	; 56
     c08:	0f 92       	push	r0
     c0a:	18 be       	out	0x38, r1	; 56
     c0c:	09 b6       	in	r0, 0x39	; 57
     c0e:	0f 92       	push	r0
     c10:	19 be       	out	0x39, r1	; 57
     c12:	0b b6       	in	r0, 0x3b	; 59
     c14:	0f 92       	push	r0
     c16:	1b be       	out	0x3b, r1	; 59
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	b8 de       	rcall	.-656    	; 0x9a2 <twim_interrupt_handler>
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0b be       	out	0x3b, r0	; 59
     c4e:	0f 90       	pop	r0
     c50:	09 be       	out	0x39, r0	; 57
     c52:	0f 90       	pop	r0
     c54:	08 be       	out	0x38, r0	; 56
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	0f 90       	pop	r0
     c5c:	1f 90       	pop	r1
     c5e:	18 95       	reti

00000c60 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     c60:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     c62:	db 01       	movw	r26, r22
     c64:	14 96       	adiw	r26, 0x04	; 4
     c66:	8c 91       	ld	r24, X
     c68:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     c6a:	88 eb       	ldi	r24, 0xB8	; 184
     c6c:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     c72:	e4 e2       	ldi	r30, 0x24	; 36
     c74:	f0 e2       	ldi	r31, 0x20	; 32
     c76:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     c78:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     c7a:	e0 ea       	ldi	r30, 0xA0	; 160
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     c84:	78 94       	sei

	return STATUS_OK;
}
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret

00000c8a <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	1f 92       	push	r1
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     c96:	89 2b       	or	r24, r25
     c98:	09 f4       	brne	.+2      	; 0xc9c <twi_master_transfer+0x12>
     c9a:	4b c0       	rjmp	.+150    	; 0xd32 <twi_master_transfer+0xa8>
     c9c:	61 15       	cp	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <twi_master_transfer+0x1a>
     ca2:	49 c0       	rjmp	.+146    	; 0xd36 <twi_master_transfer+0xac>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     ca4:	fb 01       	movw	r30, r22
     ca6:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     ca8:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <transfer+0x9>
     cac:	88 23       	and	r24, r24
     cae:	19 f0       	breq	.+6      	; 0xcb6 <twi_master_transfer+0x2c>

		if (no_wait) { return ERR_BUSY; }
     cb0:	99 23       	and	r25, r25
     cb2:	f1 f3       	breq	.-4      	; 0xcb0 <twi_master_transfer+0x26>
     cb4:	42 c0       	rjmp	.+132    	; 0xd3a <twi_master_transfer+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cb6:	8f b7       	in	r24, 0x3f	; 63
     cb8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cba:	f8 94       	cli
	return flags;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     cbe:	e4 e2       	ldi	r30, 0x24	; 36
     cc0:	f0 e2       	ldi	r31, 0x20	; 32
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
     cc6:	90 e8       	ldi	r25, 0x80	; 128
     cc8:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cca:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     ccc:	a0 83       	st	Z, r26
     cce:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
     cd0:	62 83       	std	Z+2, r22	; 0x02
     cd2:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
     cd4:	14 82       	std	Z+4, r1	; 0x04
     cd6:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
     cd8:	16 82       	std	Z+6, r1	; 0x06
     cda:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
     cdc:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
     cde:	fb 01       	movw	r30, r22
     ce0:	80 81       	ld	r24, Z
     ce2:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     ce4:	24 81       	ldd	r18, Z+4	; 0x04
     ce6:	35 81       	ldd	r19, Z+5	; 0x05
     ce8:	23 2b       	or	r18, r19
     cea:	11 f4       	brne	.+4      	; 0xcf0 <twi_master_transfer+0x66>
     cec:	41 11       	cpse	r20, r1
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <twi_master_transfer+0x6c>
			transfer.bus->MASTER.ADDR = chip;
     cf0:	16 96       	adiw	r26, 0x06	; 6
     cf2:	8c 93       	st	X, r24
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <twi_master_transfer+0x72>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     cf6:	81 60       	ori	r24, 0x01	; 1
     cf8:	16 96       	adiw	r26, 0x06	; 6
     cfa:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     cfc:	e4 e2       	ldi	r30, 0x24	; 36
     cfe:	f0 e2       	ldi	r31, 0x20	; 32
     d00:	82 85       	ldd	r24, Z+10	; 0x0a
     d02:	80 38       	cpi	r24, 0x80	; 128
     d04:	e9 f3       	breq	.-6      	; 0xd00 <twi_master_transfer+0x76>

	while (! twim_idle(transfer.bus)) { barrier(); }
     d06:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <transfer>
     d0a:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <transfer+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     d0e:	84 81       	ldd	r24, Z+4	; 0x04
     d10:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	49 f0       	breq	.+18     	; 0xd28 <twi_master_transfer+0x9e>
     d16:	a4 e2       	ldi	r26, 0x24	; 36
     d18:	b0 e2       	ldi	r27, 0x20	; 32
     d1a:	ed 91       	ld	r30, X+
     d1c:	fc 91       	ld	r31, X
     d1e:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     d20:	84 81       	ldd	r24, Z+4	; 0x04
     d22:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	c9 f7       	brne	.-14     	; 0xd1a <twi_master_transfer+0x90>

	status_code_t const status = transfer.status;
     d28:	e4 e2       	ldi	r30, 0x24	; 36
     d2a:	f0 e2       	ldi	r31, 0x20	; 32
     d2c:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     d2e:	11 86       	std	Z+9, r1	; 0x09
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <twi_master_transfer+0xb2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     d32:	88 ef       	ldi	r24, 0xF8	; 248
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <twi_master_transfer+0xb2>
     d36:	88 ef       	ldi	r24, 0xF8	; 248
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <twi_master_transfer+0xb2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     d3a:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <init_i2c>:



uint8_t init_i2c(void);
uint8_t init_i2c(void)
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	c2 55       	subi	r28, 0x52	; 82
     d6a:	d1 09       	sbc	r29, r1
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	de bf       	out	0x3e, r29	; 62
	twi_master_options_t opt48 = {
     d70:	0f 2e       	mov	r0, r31
     d72:	f9 e0       	ldi	r31, 0x09	; 9
     d74:	7f 2e       	mov	r7, r31
     d76:	f0 2d       	mov	r31, r0
     d78:	8e 01       	movw	r16, r28
     d7a:	0f 5f       	subi	r16, 0xFF	; 255
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	e7 2d       	mov	r30, r7
     d82:	1d 92       	st	X+, r1
     d84:	ea 95       	dec	r30
     d86:	e9 f7       	brne	.-6      	; 0xd82 <init_i2c+0x3e>
     d88:	0f 2e       	mov	r0, r31
     d8a:	f0 ea       	ldi	r31, 0xA0	; 160
     d8c:	8f 2e       	mov	r8, r31
     d8e:	f6 e8       	ldi	r31, 0x86	; 134
     d90:	9f 2e       	mov	r9, r31
     d92:	aa 24       	eor	r10, r10
     d94:	a3 94       	inc	r10
     d96:	b1 2c       	mov	r11, r1
     d98:	f0 2d       	mov	r31, r0
     d9a:	89 82       	std	Y+1, r8	; 0x01
     d9c:	9a 82       	std	Y+2, r9	; 0x02
     d9e:	ab 82       	std	Y+3, r10	; 0x03
     da0:	bc 82       	std	Y+4, r11	; 0x04
     da2:	0f 2e       	mov	r0, r31
     da4:	f8 e4       	ldi	r31, 0x48	; 72
     da6:	6f 2e       	mov	r6, r31
     da8:	f0 2d       	mov	r31, r0
     daa:	69 86       	std	Y+9, r6	; 0x09
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     dac:	0f 2e       	mov	r0, r31
     dae:	fb e9       	ldi	r31, 0x9B	; 155
     db0:	cf 2e       	mov	r12, r31
     db2:	d1 2c       	mov	r13, r1
     db4:	e1 2c       	mov	r14, r1
     db6:	f1 2c       	mov	r15, r1
     db8:	f0 2d       	mov	r31, r0
     dba:	cd 82       	std	Y+5, r12	; 0x05
     dbc:	de 82       	std	Y+6, r13	; 0x06
     dbe:	ef 82       	std	Y+7, r14	; 0x07
     dc0:	f8 86       	std	Y+8, r15	; 0x08
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     dc2:	60 e4       	ldi	r22, 0x40	; 64
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	f9 dc       	rcall	.-1550   	; 0x7ba <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     dc8:	b8 01       	movw	r22, r16
     dca:	80 eb       	ldi	r24, 0xB0	; 176
     dcc:	94 e0       	ldi	r25, 0x04	; 4
     dce:	48 df       	rcall	.-368    	; 0xc60 <twi_master_init>
		.speed = 100000,
		.chip = 0x48
	};
	twi_master_setup(&TWIF, &opt48);
	
	twi_master_options_t opt49 = {
     dd0:	07 5f       	subi	r16, 0xF7	; 247
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	d8 01       	movw	r26, r16
     dd6:	e7 2d       	mov	r30, r7
     dd8:	1d 92       	st	X+, r1
     dda:	ea 95       	dec	r30
     ddc:	e9 f7       	brne	.-6      	; 0xdd8 <init_i2c+0x94>
     dde:	8a 86       	std	Y+10, r8	; 0x0a
     de0:	9b 86       	std	Y+11, r9	; 0x0b
     de2:	ac 86       	std	Y+12, r10	; 0x0c
     de4:	bd 86       	std	Y+13, r11	; 0x0d
     de6:	0f 2e       	mov	r0, r31
     de8:	f9 e4       	ldi	r31, 0x49	; 73
     dea:	5f 2e       	mov	r5, r31
     dec:	f0 2d       	mov	r31, r0
     dee:	5a 8a       	std	Y+18, r5	; 0x12
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     df0:	ce 86       	std	Y+14, r12	; 0x0e
     df2:	df 86       	std	Y+15, r13	; 0x0f
     df4:	e8 8a       	std	Y+16, r14	; 0x10
     df6:	f9 8a       	std	Y+17, r15	; 0x11
     df8:	60 e4       	ldi	r22, 0x40	; 64
     dfa:	86 e0       	ldi	r24, 0x06	; 6
     dfc:	de dc       	rcall	.-1604   	; 0x7ba <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     dfe:	b8 01       	movw	r22, r16
     e00:	80 eb       	ldi	r24, 0xB0	; 176
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	2d df       	rcall	.-422    	; 0xc60 <twi_master_init>
		.speed = 100000,
		.chip = 0x49
	};
	twi_master_setup(&TWIF, &opt49);
	
	twi_master_options_t opt4A = {
     e06:	07 5f       	subi	r16, 0xF7	; 247
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	d8 01       	movw	r26, r16
     e0c:	e7 2d       	mov	r30, r7
     e0e:	1d 92       	st	X+, r1
     e10:	ea 95       	dec	r30
     e12:	e9 f7       	brne	.-6      	; 0xe0e <init_i2c+0xca>
     e14:	8b 8a       	std	Y+19, r8	; 0x13
     e16:	9c 8a       	std	Y+20, r9	; 0x14
     e18:	ad 8a       	std	Y+21, r10	; 0x15
     e1a:	be 8a       	std	Y+22, r11	; 0x16
     e1c:	0f 2e       	mov	r0, r31
     e1e:	fa e4       	ldi	r31, 0x4A	; 74
     e20:	4f 2e       	mov	r4, r31
     e22:	f0 2d       	mov	r31, r0
     e24:	4b 8e       	std	Y+27, r4	; 0x1b
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e26:	cf 8a       	std	Y+23, r12	; 0x17
     e28:	d8 8e       	std	Y+24, r13	; 0x18
     e2a:	e9 8e       	std	Y+25, r14	; 0x19
     e2c:	fa 8e       	std	Y+26, r15	; 0x1a
     e2e:	60 e4       	ldi	r22, 0x40	; 64
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	c3 dc       	rcall	.-1658   	; 0x7ba <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e34:	b8 01       	movw	r22, r16
     e36:	80 eb       	ldi	r24, 0xB0	; 176
     e38:	94 e0       	ldi	r25, 0x04	; 4
     e3a:	12 df       	rcall	.-476    	; 0xc60 <twi_master_init>
		.speed = 100000,
		.chip = 0x4A
	};
	twi_master_setup(&TWIF, &opt4A);
	
	twi_master_options_t opt4B = {
     e3c:	07 5f       	subi	r16, 0xF7	; 247
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	d8 01       	movw	r26, r16
     e42:	1d 92       	st	X+, r1
     e44:	7a 94       	dec	r7
     e46:	e9 f7       	brne	.-6      	; 0xe42 <init_i2c+0xfe>
     e48:	8c 8e       	std	Y+28, r8	; 0x1c
     e4a:	9d 8e       	std	Y+29, r9	; 0x1d
     e4c:	ae 8e       	std	Y+30, r10	; 0x1e
     e4e:	bf 8e       	std	Y+31, r11	; 0x1f
     e50:	0f 2e       	mov	r0, r31
     e52:	fb e4       	ldi	r31, 0x4B	; 75
     e54:	bf 2e       	mov	r11, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	bc a2       	std	Y+36, r11	; 0x24
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e5a:	c8 a2       	std	Y+32, r12	; 0x20
     e5c:	d9 a2       	std	Y+33, r13	; 0x21
     e5e:	ea a2       	std	Y+34, r14	; 0x22
     e60:	fb a2       	std	Y+35, r15	; 0x23
     e62:	60 e4       	ldi	r22, 0x40	; 64
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	a9 dc       	rcall	.-1710   	; 0x7ba <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e68:	b8 01       	movw	r22, r16
     e6a:	80 eb       	ldi	r24, 0xB0	; 176
     e6c:	94 e0       	ldi	r25, 0x04	; 4
     e6e:	f8 de       	rcall	.-528    	; 0xc60 <twi_master_init>
	 * 4: Comparater mode. 0=default
	 * 3: Comparater polarity. 0=default
	 * 2: Comparater Latch. 0=Nonlatching comparater
	 * 1: Comparater queue and disable. 00=Assert after one conversion
	 **/
	const uint8_t adc_setup_bytes[] = {0x42, 0xe3};
     e70:	82 e4       	ldi	r24, 0x42	; 66
     e72:	8d a3       	std	Y+37, r24	; 0x25
     e74:	83 ee       	ldi	r24, 0xE3	; 227
     e76:	8e a3       	std	Y+38, r24	; 0x26
	twi_package_t adc_setup_48;
	memset(&adc_setup_48,0,sizeof(twi_package_t));
     e78:	05 5f       	subi	r16, 0xF5	; 245
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	0f 2e       	mov	r0, r31
     e7e:	fb e0       	ldi	r31, 0x0B	; 11
     e80:	ff 2e       	mov	r15, r31
     e82:	f0 2d       	mov	r31, r0
     e84:	f8 01       	movw	r30, r16
     e86:	6f 2d       	mov	r22, r15
     e88:	11 92       	st	Z+, r1
     e8a:	6a 95       	dec	r22
     e8c:	e9 f7       	brne	.-6      	; 0xe88 <init_i2c+0x144>
	adc_setup_48.addr[0]		= 0x01;
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	78 a7       	std	Y+40, r23	; 0x28
	adc_setup_48.addr_length	= sizeof(uint8_t);
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	4b a7       	std	Y+43, r20	; 0x2b
     e98:	5c a7       	std	Y+44, r21	; 0x2c
	adc_setup_48.chip			= 0x48;
     e9a:	6f a2       	std	Y+39, r6	; 0x27
	adc_setup_48.buffer			= (void *)adc_setup_bytes;
     e9c:	9e 01       	movw	r18, r28
     e9e:	2b 5d       	subi	r18, 0xDB	; 219
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	2d a7       	std	Y+45, r18	; 0x2d
     ea4:	3e a7       	std	Y+46, r19	; 0x2e
	adc_setup_48.length			= sizeof(adc_setup_bytes);
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	8f a7       	std	Y+47, r24	; 0x2f
     eac:	98 ab       	std	Y+48, r25	; 0x30
	
	twi_package_t adc_setup_49;
	memset(&adc_setup_49,0,sizeof(twi_package_t));
     eae:	de 01       	movw	r26, r28
     eb0:	d2 96       	adiw	r26, 0x32	; 50
     eb2:	fd 01       	movw	r30, r26
     eb4:	6f 2d       	mov	r22, r15
     eb6:	11 92       	st	Z+, r1
     eb8:	6a 95       	dec	r22
     eba:	e9 f7       	brne	.-6      	; 0xeb6 <init_i2c+0x172>
	adc_setup_49.addr[0]		= 0x01;
     ebc:	7b ab       	std	Y+51, r23	; 0x33
	adc_setup_49.addr_length	= sizeof(uint8_t);
     ebe:	4e ab       	std	Y+54, r20	; 0x36
     ec0:	5f ab       	std	Y+55, r21	; 0x37
	adc_setup_49.chip			= 0x49;
     ec2:	5a aa       	std	Y+50, r5	; 0x32
	adc_setup_49.buffer			= (void *)adc_setup_bytes;
     ec4:	28 af       	std	Y+56, r18	; 0x38
     ec6:	39 af       	std	Y+57, r19	; 0x39
	adc_setup_49.length			= sizeof(adc_setup_bytes);
     ec8:	8a af       	std	Y+58, r24	; 0x3a
     eca:	9b af       	std	Y+59, r25	; 0x3b
	
	twi_package_t adc_setup_4A;
	memset(&adc_setup_4A,0,sizeof(twi_package_t));
     ecc:	1b 96       	adiw	r26, 0x0b	; 11
     ece:	fd 01       	movw	r30, r26
     ed0:	6f 2d       	mov	r22, r15
     ed2:	11 92       	st	Z+, r1
     ed4:	6a 95       	dec	r22
     ed6:	e9 f7       	brne	.-6      	; 0xed2 <init_i2c+0x18e>
	adc_setup_4A.addr[0]		= 0x01;
     ed8:	7e af       	std	Y+62, r23	; 0x3e
	adc_setup_4A.addr_length	= sizeof(uint8_t);
     eda:	23 96       	adiw	r28, 0x03	; 3
     edc:	4e af       	std	Y+62, r20	; 0x3e
     ede:	5f af       	std	Y+63, r21	; 0x3f
     ee0:	23 97       	sbiw	r28, 0x03	; 3
	adc_setup_4A.chip			= 0x4A;
     ee2:	4d ae       	std	Y+61, r4	; 0x3d
	adc_setup_4A.buffer			= (void *)adc_setup_bytes;
     ee4:	25 96       	adiw	r28, 0x05	; 5
     ee6:	2e af       	std	Y+62, r18	; 0x3e
     ee8:	3f af       	std	Y+63, r19	; 0x3f
     eea:	25 97       	sbiw	r28, 0x05	; 5
	adc_setup_4A.length			= sizeof(adc_setup_bytes);
     eec:	27 96       	adiw	r28, 0x07	; 7
     eee:	8e af       	std	Y+62, r24	; 0x3e
     ef0:	9f af       	std	Y+63, r25	; 0x3f
     ef2:	27 97       	sbiw	r28, 0x07	; 7
	
	twi_package_t adc_setup_4B;
	memset(&adc_setup_4B,0,sizeof(twi_package_t));
     ef4:	fe 01       	movw	r30, r28
     ef6:	e8 5b       	subi	r30, 0xB8	; 184
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	df 01       	movw	r26, r30
     efc:	1d 92       	st	X+, r1
     efe:	fa 94       	dec	r15
     f00:	e9 f7       	brne	.-6      	; 0xefc <init_i2c+0x1b8>
	adc_setup_4B.addr[0]		= 0x01;
     f02:	71 83       	std	Z+1, r23	; 0x01
	adc_setup_4B.addr_length	= sizeof(uint8_t);
     f04:	44 83       	std	Z+4, r20	; 0x04
     f06:	55 83       	std	Z+5, r21	; 0x05
	adc_setup_4B.chip			= 0x4B;
     f08:	b0 82       	st	Z, r11
	adc_setup_4B.buffer			= (void *)adc_setup_bytes;
     f0a:	26 83       	std	Z+6, r18	; 0x06
     f0c:	37 83       	std	Z+7, r19	; 0x07
	adc_setup_4B.length			= sizeof(adc_setup_bytes);
     f0e:	80 87       	std	Z+8, r24	; 0x08
     f10:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	b8 01       	movw	r22, r16
     f16:	80 eb       	ldi	r24, 0xB0	; 176
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	b7 de       	rcall	.-658    	; 0xc8a <twi_master_transfer>
	
	uint8_t error = 0;
	if(twi_master_write(&TWIF, &adc_setup_48) != TWI_SUCCESS)
     f1c:	11 e0       	ldi	r17, 0x01	; 1
     f1e:	81 11       	cpse	r24, r1
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <init_i2c+0x1e0>
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	be 01       	movw	r22, r28
     f28:	6e 5c       	subi	r22, 0xCE	; 206
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	80 eb       	ldi	r24, 0xB0	; 176
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	ac de       	rcall	.-680    	; 0xc8a <twi_master_transfer>
		error |= 1;
	if(twi_master_write(&TWIF, &adc_setup_49) != TWI_SUCCESS)
     f32:	81 11       	cpse	r24, r1
		error |= 2;
     f34:	12 60       	ori	r17, 0x02	; 2
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	be 01       	movw	r22, r28
     f3a:	63 5c       	subi	r22, 0xC3	; 195
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	80 eb       	ldi	r24, 0xB0	; 176
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	a3 de       	rcall	.-698    	; 0xc8a <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4A) != TWI_SUCCESS)
     f44:	81 11       	cpse	r24, r1
		error |= 4;
     f46:	14 60       	ori	r17, 0x04	; 4
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	be 01       	movw	r22, r28
     f4c:	68 5b       	subi	r22, 0xB8	; 184
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	80 eb       	ldi	r24, 0xB0	; 176
     f52:	94 e0       	ldi	r25, 0x04	; 4
     f54:	9a de       	rcall	.-716    	; 0xc8a <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4B) != TWI_SUCCESS)
     f56:	81 11       	cpse	r24, r1
		error |= 8;
     f58:	18 60       	ori	r17, 0x08	; 8
	
	return error;
}
     f5a:	81 2f       	mov	r24, r17
     f5c:	ce 5a       	subi	r28, 0xAE	; 174
     f5e:	df 4f       	sbci	r29, 0xFF	; 255
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	7f 90       	pop	r7
     f7e:	6f 90       	pop	r6
     f80:	5f 90       	pop	r5
     f82:	4f 90       	pop	r4
     f84:	08 95       	ret

00000f86 <main>:


int main (void)
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	2d 97       	sbiw	r28, 0x0d	; 13
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	de bf       	out	0x3e, r29	; 62
	board_init();	//Init board
     f94:	f9 dc       	rcall	.-1550   	; 0x988 <board_init>
	sysclk_init();
     f96:	cc db       	rcall	.-2152   	; 0x730 <sysclk_init>
	
	rtc_init();
     f98:	8c d9       	rcall	.-3304   	; 0x2b2 <rtc_init>
	
	
	
	//rtc_set_time(1038);
	
	init_spi_to_bbb();	//Setup SPI on Port C
     f9a:	d9 da       	rcall	.-2638   	; 0x54e <init_spi_to_bbb>
	
	sei();            // enable global interrupts
     f9c:	78 94       	sei
	int sensor_error = init_i2c();
     f9e:	d2 de       	rcall	.-604    	; 0xd44 <init_i2c>
	state = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <state>
	sensor_status = 52;
     fa6:	84 e3       	ldi	r24, 0x34	; 52
     fa8:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <sensor_status>
		
		if(lock == 0){//Do anything that is not SPI related
			
			uint8_t recieved_data[2];
			twi_package_t packet_read;
			memset(&packet_read, 0, sizeof(twi_package_t));
     fac:	0f 2e       	mov	r0, r31
     fae:	fb e0       	ldi	r31, 0x0B	; 11
     fb0:	3f 2e       	mov	r3, r31
     fb2:	f0 2d       	mov	r31, r0
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	7c 01       	movw	r14, r24
			packet_read.addr[0]			= 0x00;
			packet_read.addr_length		= sizeof(uint8_t);
     fba:	88 24       	eor	r8, r8
     fbc:	83 94       	inc	r8
     fbe:	91 2c       	mov	r9, r1
			packet_read.chip			= 0x48;
     fc0:	0f 2e       	mov	r0, r31
     fc2:	f8 e4       	ldi	r31, 0x48	; 72
     fc4:	4f 2e       	mov	r4, r31
     fc6:	f0 2d       	mov	r31, r0
			packet_read.buffer			= recieved_data;
     fc8:	5e 01       	movw	r10, r28
     fca:	9c e0       	ldi	r25, 0x0C	; 12
     fcc:	a9 0e       	add	r10, r25
     fce:	b1 1c       	adc	r11, r1
			packet_read.length			= 2;
     fd0:	68 94       	set
     fd2:	cc 24       	eor	r12, r12
     fd4:	c1 f8       	bld	r12, 1
     fd6:	d1 2c       	mov	r13, r1
			
			time1= rtc_get_time();
			
			//_delay_ms(1);
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
				sensor_data[0] = recieved_data[1];
     fd8:	08 e0       	ldi	r16, 0x08	; 8
     fda:	10 e2       	ldi	r17, 0x20	; 32
				sensor_data[1] = recieved_data[0];
				
			}
			
			
			packet_read.chip = 0x49;
     fdc:	0f 2e       	mov	r0, r31
     fde:	f9 e4       	ldi	r31, 0x49	; 73
     fe0:	5f 2e       	mov	r5, r31
     fe2:	f0 2d       	mov	r31, r0
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
				sensor_data[2] = recieved_data[1];
				sensor_data[3] = recieved_data[0];
			}
			
			packet_read.chip = 0x4A;
     fe4:	0f 2e       	mov	r0, r31
     fe6:	fa e4       	ldi	r31, 0x4A	; 74
     fe8:	6f 2e       	mov	r6, r31
     fea:	f0 2d       	mov	r31, r0
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
				sensor_data[4] = recieved_data[1];
				sensor_data[5] = recieved_data[0];
			}
			
			packet_read.chip = 0x4B;
     fec:	0f 2e       	mov	r0, r31
     fee:	fb e4       	ldi	r31, 0x4B	; 75
     ff0:	7f 2e       	mov	r7, r31
     ff2:	f0 2d       	mov	r31, r0
		//SPIC handler
		//When this is true, it means we have just received a byte
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		//_delay_ms(200);
		handle_spi_to_bbb();
     ff4:	c9 da       	rcall	.-2670   	; 0x588 <handle_spi_to_bbb>
		
		if(lock == 0){//Do anything that is not SPI related
     ff6:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <lock>
     ffa:	81 11       	cpse	r24, r1
     ffc:	fb cf       	rjmp	.-10     	; 0xff4 <main+0x6e>
			
			uint8_t recieved_data[2];
			twi_package_t packet_read;
			memset(&packet_read, 0, sizeof(twi_package_t));
     ffe:	f7 01       	movw	r30, r14
    1000:	83 2d       	mov	r24, r3
    1002:	11 92       	st	Z+, r1
    1004:	8a 95       	dec	r24
    1006:	e9 f7       	brne	.-6      	; 0x1002 <main+0x7c>
			packet_read.addr[0]			= 0x00;
			packet_read.addr_length		= sizeof(uint8_t);
    1008:	8d 82       	std	Y+5, r8	; 0x05
    100a:	9e 82       	std	Y+6, r9	; 0x06
			packet_read.chip			= 0x48;
    100c:	49 82       	std	Y+1, r4	; 0x01
			packet_read.buffer			= recieved_data;
    100e:	af 82       	std	Y+7, r10	; 0x07
    1010:	b8 86       	std	Y+8, r11	; 0x08
			packet_read.length			= 2;
    1012:	c9 86       	std	Y+9, r12	; 0x09
    1014:	da 86       	std	Y+10, r13	; 0x0a
			
			time1= rtc_get_time();
    1016:	17 d9       	rcall	.-3538   	; 0x246 <rtc_get_time>
    1018:	60 93 2f 20 	sts	0x202F, r22	; 0x80202f <time1>
    101c:	70 93 30 20 	sts	0x2030, r23	; 0x802030 <time1+0x1>
    1020:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <time1+0x2>
    1024:	90 93 32 20 	sts	0x2032, r25	; 0x802032 <time1+0x3>
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	b7 01       	movw	r22, r14
    102c:	80 eb       	ldi	r24, 0xB0	; 176
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	2c de       	rcall	.-936    	; 0xc8a <twi_master_transfer>
			
			//_delay_ms(1);
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
    1032:	81 11       	cpse	r24, r1
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <main+0xba>
				sensor_data[0] = recieved_data[1];
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	f8 01       	movw	r30, r16
    103a:	80 83       	st	Z, r24
				sensor_data[1] = recieved_data[0];
    103c:	8c 85       	ldd	r24, Y+12	; 0x0c
    103e:	81 83       	std	Z+1, r24	; 0x01
				
			}
			
			
			packet_read.chip = 0x49;
    1040:	59 82       	std	Y+1, r5	; 0x01
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	b7 01       	movw	r22, r14
    1046:	80 eb       	ldi	r24, 0xB0	; 176
    1048:	94 e0       	ldi	r25, 0x04	; 4
    104a:	1f de       	rcall	.-962    	; 0xc8a <twi_master_transfer>
			
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    104c:	81 11       	cpse	r24, r1
    104e:	05 c0       	rjmp	.+10     	; 0x105a <main+0xd4>
				sensor_data[2] = recieved_data[1];
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	f8 01       	movw	r30, r16
    1054:	82 83       	std	Z+2, r24	; 0x02
				sensor_data[3] = recieved_data[0];
    1056:	8c 85       	ldd	r24, Y+12	; 0x0c
    1058:	83 83       	std	Z+3, r24	; 0x03
			}
			
			packet_read.chip = 0x4A;
    105a:	69 82       	std	Y+1, r6	; 0x01
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	b7 01       	movw	r22, r14
    1060:	80 eb       	ldi	r24, 0xB0	; 176
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	12 de       	rcall	.-988    	; 0xc8a <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    1066:	81 11       	cpse	r24, r1
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <main+0xee>
				sensor_data[4] = recieved_data[1];
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	f8 01       	movw	r30, r16
    106e:	84 83       	std	Z+4, r24	; 0x04
				sensor_data[5] = recieved_data[0];
    1070:	8c 85       	ldd	r24, Y+12	; 0x0c
    1072:	85 83       	std	Z+5, r24	; 0x05
			}
			
			packet_read.chip = 0x4B;
    1074:	79 82       	std	Y+1, r7	; 0x01
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	b7 01       	movw	r22, r14
    107a:	80 eb       	ldi	r24, 0xB0	; 176
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	05 de       	rcall	.-1014   	; 0xc8a <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    1080:	81 11       	cpse	r24, r1
    1082:	05 c0       	rjmp	.+10     	; 0x108e <main+0x108>
				sensor_data[6] = recieved_data[1];
    1084:	8d 85       	ldd	r24, Y+13	; 0x0d
    1086:	f8 01       	movw	r30, r16
    1088:	86 83       	std	Z+6, r24	; 0x06
				sensor_data[7] = recieved_data[0];
    108a:	8c 85       	ldd	r24, Y+12	; 0x0c
    108c:	87 83       	std	Z+7, r24	; 0x07
			}
			
			
			time2 = rtc_get_time();
    108e:	db d8       	rcall	.-3658   	; 0x246 <rtc_get_time>
    1090:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <time2>
    1094:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <time2+0x1>
    1098:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <time2+0x2>
    109c:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <time2+0x3>
			time3 = time2-time1;
    10a0:	20 91 2f 20 	lds	r18, 0x202F	; 0x80202f <time1>
    10a4:	30 91 30 20 	lds	r19, 0x2030	; 0x802030 <time1+0x1>
    10a8:	40 91 31 20 	lds	r20, 0x2031	; 0x802031 <time1+0x2>
    10ac:	50 91 32 20 	lds	r21, 0x2032	; 0x802032 <time1+0x3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    10c0:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    10c4:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    10c8:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
			sensor_data[8] = time3 >> 0;
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 87       	std	Z+8, r24	; 0x08
			sensor_data[9] = time3 >> 8;
    10d0:	91 87       	std	Z+9, r25	; 0x09
			sensor_data[10] = time3 >> 16;
    10d2:	a2 87       	std	Z+10, r26	; 0x0a
			sensor_data[11] = time3 >> 24;
    10d4:	b3 87       	std	Z+11, r27	; 0x0b
			
			
			lock = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 33 20 	sts	0x2033, r24	; 0x802033 <lock>
    10dc:	8b cf       	rjmp	.-234    	; 0xff4 <main+0x6e>

000010de <_exit>:
    10de:	f8 94       	cli

000010e0 <__stop_program>:
    10e0:	ff cf       	rjmp	.-2      	; 0x10e0 <__stop_program>
