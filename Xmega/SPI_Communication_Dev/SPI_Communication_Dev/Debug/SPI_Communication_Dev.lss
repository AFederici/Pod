
SPI_Communication_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00802000  00000f7c  00001010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a7  0080200c  0080200c  0000101c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b523  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ee3  00000000  00000000  0000c803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b8b  00000000  00000000  000116e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  00016274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033060  00000000  00000000  00016988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001956  00000000  00000000  000499e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0004b33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bf68  00000000  00000000  0004b50e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	36 c1       	rjmp	.+620    	; 0x296 <__vector_10>
  2a:	00 00       	nop
  2c:	57 c1       	rjmp	.+686    	; 0x2dc <__vector_11>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c5       	rjmp	.+2672   	; 0xaa6 <__vector_13>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	fa c1       	rjmp	.+1012   	; 0x456 <__vector_24>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5a c5       	rjmp	.+2740   	; 0xb6e <__vector_46>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	ec c4       	rjmp	.+2520   	; 0xb0a <__vector_76>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	12 c5       	rjmp	.+2596   	; 0xbd2 <__vector_107>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec e7       	ldi	r30, 0x7C	; 124
 21c:	ff e0       	ldi	r31, 0x0F	; 15
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ac 30       	cpi	r26, 0x0C	; 12
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	ac e0       	ldi	r26, 0x0C	; 12
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a3 3b       	cpi	r26, 0xB3	; 179
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	8d d6       	rcall	.+3354   	; 0xf5c <main>
 242:	9a c6       	rjmp	.+3380   	; 0xf78 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	1f 92       	push	r1
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	9d d2       	rcall	.+1338   	; 0x790 <sysclk_enable_module>
	RTC.PER = 0xffff;
 256:	e0 e0       	ldi	r30, 0x00	; 0
 258:	f4 e0       	ldi	r31, 0x04	; 4
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	82 87       	std	Z+10, r24	; 0x0a
 260:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
 262:	10 86       	std	Z+8, r1	; 0x08
 264:	11 86       	std	Z+9, r1	; 0x09
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 266:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <sleepmgr_locks+0x3>
 26a:	8f 3f       	cpi	r24, 0xFF	; 255
 26c:	09 f4       	brne	.+2      	; 0x270 <rtc_init+0x2a>
 26e:	ff cf       	rjmp	.-2      	; 0x26e <rtc_init+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 270:	8f b7       	in	r24, 0x3f	; 63
 272:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 274:	f8 94       	cli
	return flags;
 276:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 278:	ea e2       	ldi	r30, 0x2A	; 42
 27a:	f0 e2       	ldi	r31, 0x20	; 32
 27c:	83 81       	ldd	r24, Z+3	; 0x03
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 282:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	f4 e0       	ldi	r31, 0x04	; 4
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
 28c:	80 83       	st	Z, r24
}
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	08 b6       	in	r0, 0x38	; 56
 2a2:	0f 92       	push	r0
 2a4:	18 be       	out	0x38, r1	; 56
 2a6:	0b b6       	in	r0, 0x3b	; 59
 2a8:	0f 92       	push	r0
 2aa:	1b be       	out	0x3b, r1	; 59
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	rtc_data.counter_high++;
 2b4:	e0 e3       	ldi	r30, 0x30	; 48
 2b6:	f0 e2       	ldi	r31, 0x20	; 32
 2b8:	80 81       	ld	r24, Z
 2ba:	91 81       	ldd	r25, Z+1	; 0x01
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	80 83       	st	Z, r24
 2c0:	91 83       	std	Z+1, r25	; 0x01
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0b be       	out	0x3b, r0	; 59
 2ce:	0f 90       	pop	r0
 2d0:	08 be       	out	0x38, r0	; 56
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	08 b6       	in	r0, 0x38	; 56
 2e8:	0f 92       	push	r0
 2ea:	18 be       	out	0x38, r1	; 56
 2ec:	09 b6       	in	r0, 0x39	; 57
 2ee:	0f 92       	push	r0
 2f0:	19 be       	out	0x39, r1	; 57
 2f2:	0b b6       	in	r0, 0x3b	; 59
 2f4:	0f 92       	push	r0
 2f6:	1b be       	out	0x3b, r1	; 59
 2f8:	cf 92       	push	r12
 2fa:	df 92       	push	r13
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
 31c:	e0 e3       	ldi	r30, 0x30	; 48
 31e:	f0 e2       	ldi	r31, 0x20	; 32
 320:	80 81       	ld	r24, Z
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	22 81       	ldd	r18, Z+2	; 0x02
 326:	33 81       	ldd	r19, Z+3	; 0x03
 328:	82 17       	cp	r24, r18
 32a:	93 07       	cpc	r25, r19
 32c:	f0 f1       	brcs	.+124    	; 0x3aa <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
 334:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <rtc_data+0x6>
 338:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <rtc_data+0x7>
 33c:	30 97       	sbiw	r30, 0x00	; 0
 33e:	a9 f1       	breq	.+106    	; 0x3aa <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
 340:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
 344:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 348:	a0 e0       	ldi	r26, 0x00	; 0
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	dc 01       	movw	r26, r24
 34e:	99 27       	eor	r25, r25
 350:	88 27       	eor	r24, r24
					| RTC.CNT;
 352:	ab 01       	movw	r20, r22
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 358:	8c 01       	movw	r16, r24
 35a:	9d 01       	movw	r18, r26
 35c:	04 2b       	or	r16, r20
 35e:	15 2b       	or	r17, r21
 360:	26 2b       	or	r18, r22
 362:	37 2b       	or	r19, r23
 364:	c9 01       	movw	r24, r18
 366:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 368:	a0 e3       	ldi	r26, 0x30	; 48
 36a:	b0 e2       	ldi	r27, 0x20	; 32
 36c:	12 96       	adiw	r26, 0x02	; 2
 36e:	0d 91       	ld	r16, X+
 370:	1c 91       	ld	r17, X
 372:	13 97       	sbiw	r26, 0x03	; 3
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	98 01       	movw	r18, r16
 37a:	11 27       	eor	r17, r17
 37c:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
 37e:	14 96       	adiw	r26, 0x04	; 4
 380:	cd 90       	ld	r12, X+
 382:	dc 90       	ld	r13, X
 384:	15 97       	sbiw	r26, 0x05	; 5
 386:	e1 2c       	mov	r14, r1
 388:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 38a:	0c 29       	or	r16, r12
 38c:	1d 29       	or	r17, r13
 38e:	2e 29       	or	r18, r14
 390:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
 392:	06 17       	cp	r16, r22
 394:	17 07       	cpc	r17, r23
 396:	28 07       	cpc	r18, r24
 398:	39 07       	cpc	r19, r25
 39a:	30 f0       	brcs	.+12     	; 0x3a8 <__vector_11+0xcc>
				count = alarm + 1;
 39c:	c9 01       	movw	r24, r18
 39e:	b8 01       	movw	r22, r16
 3a0:	6f 5f       	subi	r22, 0xFF	; 255
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	8f 4f       	sbci	r24, 0xFF	; 255
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
 3a8:	19 95       	eicall
		}
	}
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	df 90       	pop	r13
 3cc:	cf 90       	pop	r12
 3ce:	0f 90       	pop	r0
 3d0:	0b be       	out	0x3b, r0	; 59
 3d2:	0f 90       	pop	r0
 3d4:	09 be       	out	0x39, r0	; 57
 3d6:	0f 90       	pop	r0
 3d8:	08 be       	out	0x38, r0	; 56
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <circular_buffer_push>:
 *  Author: rgw3d
 */ 

#include "circular_buffer.h"

void circular_buffer_push(circular_buffer_t * cb, uint8_t data){
 3e4:	fc 01       	movw	r30, r24
	cb->buffer[cb->front] = data;
 3e6:	92 a9       	ldd	r25, Z+50	; 0x32
 3e8:	df 01       	movw	r26, r30
 3ea:	a9 0f       	add	r26, r25
 3ec:	b1 1d       	adc	r27, r1
 3ee:	6c 93       	st	X, r22
	cb->front++;
 3f0:	9f 5f       	subi	r25, 0xFF	; 255
	cb->front =  cb->front % MAX_BUFFER_SIZE;
 3f2:	29 e2       	ldi	r18, 0x29	; 41
 3f4:	92 9f       	mul	r25, r18
 3f6:	21 2d       	mov	r18, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	26 95       	lsr	r18
 3fc:	26 95       	lsr	r18
 3fe:	26 95       	lsr	r18
 400:	82 e3       	ldi	r24, 0x32	; 50
 402:	28 9f       	mul	r18, r24
 404:	90 19       	sub	r25, r0
 406:	11 24       	eor	r1, r1
 408:	92 ab       	std	Z+50, r25	; 0x32
 40a:	08 95       	ret

0000040c <circular_buffer_pop>:
	//cb->len++;
}
uint8_t circular_buffer_pop(circular_buffer_t * cb){
 40c:	fc 01       	movw	r30, r24
	uint8_t ret = cb->buffer[cb->back];
 40e:	93 a9       	ldd	r25, Z+51	; 0x33
 410:	df 01       	movw	r26, r30
 412:	a9 0f       	add	r26, r25
 414:	b1 1d       	adc	r27, r1
 416:	8c 91       	ld	r24, X
	cb->back++;
 418:	9f 5f       	subi	r25, 0xFF	; 255
	cb->back = cb->back % MAX_BUFFER_SIZE;
 41a:	29 e2       	ldi	r18, 0x29	; 41
 41c:	92 9f       	mul	r25, r18
 41e:	21 2d       	mov	r18, r1
 420:	11 24       	eor	r1, r1
 422:	26 95       	lsr	r18
 424:	26 95       	lsr	r18
 426:	26 95       	lsr	r18
 428:	32 e3       	ldi	r19, 0x32	; 50
 42a:	23 9f       	mul	r18, r19
 42c:	90 19       	sub	r25, r0
 42e:	11 24       	eor	r1, r1
 430:	93 ab       	std	Z+51, r25	; 0x33
	//cb->len--;
	return ret;
}
 432:	08 95       	ret

00000434 <circular_buffer_size>:

inline uint8_t circular_buffer_size(circular_buffer_t * cb){
 434:	fc 01       	movw	r30, r24
	return ((uint8_t)(cb->front - cb->back))%MAX_BUFFER_SIZE;
 436:	92 a9       	ldd	r25, Z+50	; 0x32
 438:	83 a9       	ldd	r24, Z+51	; 0x33
 43a:	98 1b       	sub	r25, r24
 43c:	89 2f       	mov	r24, r25
 43e:	99 e2       	ldi	r25, 0x29	; 41
 440:	89 9f       	mul	r24, r25
 442:	91 2d       	mov	r25, r1
 444:	11 24       	eor	r1, r1
 446:	96 95       	lsr	r25
 448:	96 95       	lsr	r25
 44a:	96 95       	lsr	r25
}
 44c:	22 e3       	ldi	r18, 0x32	; 50
 44e:	92 9f       	mul	r25, r18
 450:	80 19       	sub	r24, r0
 452:	11 24       	eor	r1, r1
 454:	08 95       	ret

00000456 <__vector_24>:
uint8_t send_idx = 0;
uint8_t send_crc_length = 0;//set equal to maximum value of send_idx
uint16_t send_crc = 0;
uint8_t send_crc_idx = 0;

ISR(SPIC_INT_vect) {
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	08 b6       	in	r0, 0x38	; 56
 462:	0f 92       	push	r0
 464:	18 be       	out	0x38, r1	; 56
 466:	09 b6       	in	r0, 0x39	; 57
 468:	0f 92       	push	r0
 46a:	19 be       	out	0x39, r1	; 57
 46c:	0b b6       	in	r0, 0x3b	; 59
 46e:	0f 92       	push	r0
 470:	1b be       	out	0x3b, r1	; 59
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	//Add recieved byte to rx buffer
	circular_buffer_push(&rx_buff, SPIC.DATA);
 48a:	60 91 c3 08 	lds	r22, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 48e:	88 e3       	ldi	r24, 0x38	; 56
 490:	90 e2       	ldi	r25, 0x20	; 32
 492:	a8 df       	rcall	.-176    	; 0x3e4 <circular_buffer_push>
	
	//Send tx byte if there is one to send
	if(circular_buffer_size(&tx_buff)){
 494:	81 e7       	ldi	r24, 0x71	; 113
 496:	90 e2       	ldi	r25, 0x20	; 32
 498:	cd df       	rcall	.-102    	; 0x434 <circular_buffer_size>
 49a:	88 23       	and	r24, r24
 49c:	29 f0       	breq	.+10     	; 0x4a8 <__vector_24+0x52>
		SPIC.DATA = circular_buffer_pop(&tx_buff);
 49e:	81 e7       	ldi	r24, 0x71	; 113
 4a0:	90 e2       	ldi	r25, 0x20	; 32
 4a2:	b4 df       	rcall	.-152    	; 0x40c <circular_buffer_pop>
 4a4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	}
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0b be       	out	0x3b, r0	; 59
 4c4:	0f 90       	pop	r0
 4c6:	09 be       	out	0x39, r0	; 57
 4c8:	0f 90       	pop	r0
 4ca:	08 be       	out	0x38, r0	; 56
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <init_spi_to_bbb>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 4d6:	68 e0       	ldi	r22, 0x08	; 8
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	5a d1       	rcall	.+692    	; 0x790 <sysclk_enable_module>

void init_spi_to_bbb(){
	sysclk_enable_peripheral_clock( &SPIC ); 
	PORTC.DIR = 0x40;		// MISO output; MOSI, SCK, SS inputs
 4dc:	80 e4       	ldi	r24, 0x40	; 64
 4de:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0x40;		// slave mode, mode 0
 4e2:	e0 ec       	ldi	r30, 0xC0	; 192
 4e4:	f8 e0       	ldi	r31, 0x08	; 8
 4e6:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0x03;	// enable interrupts
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	81 83       	std	Z+1, r24	; 0x01
	PMIC.CTRL = 0x04;       // enable high priority interrupts
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	memset(&rx_buff, 0, sizeof(circular_buffer_t));
 4f2:	84 e3       	ldi	r24, 0x34	; 52
 4f4:	e8 e3       	ldi	r30, 0x38	; 56
 4f6:	f0 e2       	ldi	r31, 0x20	; 32
 4f8:	df 01       	movw	r26, r30
 4fa:	98 2f       	mov	r25, r24
 4fc:	1d 92       	st	X+, r1
 4fe:	9a 95       	dec	r25
 500:	e9 f7       	brne	.-6      	; 0x4fc <init_spi_to_bbb+0x26>
	memset(&tx_buff, 0, sizeof(circular_buffer_t));
 502:	e1 e7       	ldi	r30, 0x71	; 113
 504:	f0 e2       	ldi	r31, 0x20	; 32
 506:	df 01       	movw	r26, r30
 508:	1d 92       	st	X+, r1
 50a:	8a 95       	dec	r24
 50c:	e9 f7       	brne	.-6      	; 0x508 <init_spi_to_bbb+0x32>
 50e:	08 95       	ret

00000510 <handle_spi_to_bbb>:
	
	
}
void handle_spi_to_bbb(){
 510:	6f 92       	push	r6
 512:	7f 92       	push	r7
 514:	8f 92       	push	r8
 516:	9f 92       	push	r9
 518:	af 92       	push	r10
 51a:	bf 92       	push	r11
 51c:	cf 92       	push	r12
 51e:	df 92       	push	r13
 520:	ef 92       	push	r14
 522:	ff 92       	push	r15
 524:	0f 93       	push	r16
 526:	1f 93       	push	r17
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
	while(circular_buffer_size(&rx_buff)){
		rx_byte = circular_buffer_pop(&rx_buff);
		//if(rx_byte == 0xaa)ioport_set_pin_level(LED_0_PIN,LED_0_ACTIVE);
		
		if(rx_byte == SPI_TX_START){
			cmd_idx = CMD_DATA_SIZE;
 52c:	0f 2e       	mov	r0, r31
 52e:	f5 e0       	ldi	r31, 0x05	; 5
 530:	9f 2e       	mov	r9, r31
 532:	f0 2d       	mov	r31, r0
			cmd_finished = 0;
			send_idx = 0;
			send_crc_length = 0;
			send_crc = 0;
			send_crc_idx = 0;
			lock = 1;
 534:	aa 24       	eor	r10, r10
 536:	a3 94       	inc	r10
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
 538:	0f 2e       	mov	r0, r31
 53a:	fc e0       	ldi	r31, 0x0C	; 12
 53c:	8f 2e       	mov	r8, r31
 53e:	f0 2d       	mov	r31, r0
				send_data[SENSOR_DATA_SIZE] = sensor_status;
				send_data[SENSOR_DATA_SIZE+1] = state;
				send_idx = SENSOR_DATA_SIZE+2;
 540:	0f 2e       	mov	r0, r31
 542:	fe e0       	ldi	r31, 0x0E	; 14
 544:	bf 2e       	mov	r11, r31
 546:	f0 2d       	mov	r31, r0
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
 548:	c5 e0       	ldi	r28, 0x05	; 5
 54a:	d0 e0       	ldi	r29, 0x00	; 0
			cmd_idx--;
			//Finished last storage of incoming data
			if(cmd_idx == 0){
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
 54c:	0c e6       	ldi	r16, 0x6C	; 108
 54e:	10 e2       	ldi	r17, 0x20	; 32
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
					SPIC.DATA = SPI_CRC_PASS;
 550:	0f 2e       	mov	r0, r31
 552:	f0 ec       	ldi	r31, 0xC0	; 192
 554:	cf 2e       	mov	r12, r31
 556:	f8 e0       	ldi	r31, 0x08	; 8
 558:	df 2e       	mov	r13, r31
 55a:	f0 2d       	mov	r31, r0
 55c:	0f 2e       	mov	r0, r31
 55e:	fa ea       	ldi	r31, 0xAA	; 170
 560:	6f 2e       	mov	r6, r31
 562:	f0 2d       	mov	r31, r0
		
		}
		else if(send_crc_idx > 0){
		
			//SPIC.DATA = send_crc >> ((2-send_crc_idx)*8);
			circular_buffer_push(&tx_buff, send_crc>> ((2-send_crc_idx)*8));
 564:	68 94       	set
 566:	ee 24       	eor	r14, r14
 568:	e1 f8       	bld	r14, 1
 56a:	f1 2c       	mov	r15, r1
			send_idx--;
		
			//Calculate CRC
			if(send_idx == 0){
				send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
				send_crc_idx = 2;
 56c:	68 94       	set
 56e:	77 24       	eor	r7, r7
 570:	71 f8       	bld	r7, 1
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
 572:	b5 c0       	rjmp	.+362    	; 0x6de <handle_spi_to_bbb+0x1ce>
		rx_byte = circular_buffer_pop(&rx_buff);
 574:	88 e3       	ldi	r24, 0x38	; 56
 576:	90 e2       	ldi	r25, 0x20	; 32
 578:	49 df       	rcall	.-366    	; 0x40c <circular_buffer_pop>
 57a:	80 93 17 20 	sts	0x2017, r24	; 0x802017 <rx_byte>
		//if(rx_byte == 0xaa)ioport_set_pin_level(LED_0_PIN,LED_0_ACTIVE);
		
		if(rx_byte == SPI_TX_START){
 57e:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <rx_byte>
 582:	8a 3a       	cpi	r24, 0xAA	; 170
 584:	81 f4       	brne	.+32     	; 0x5a6 <handle_spi_to_bbb+0x96>
			cmd_idx = CMD_DATA_SIZE;
 586:	90 92 16 20 	sts	0x2016, r9	; 0x802016 <cmd_idx>
			//Reset all the send variables/tmp storage
			cmd_finished = 0;
 58a:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <cmd_finished>
			send_idx = 0;
 58e:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <send_idx>
			send_crc_length = 0;
 592:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <send_crc_length>
			send_crc = 0;
 596:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <send_crc>
 59a:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <send_crc+0x1>
			send_crc_idx = 0;
 59e:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <__data_end>
			lock = 1;
 5a2:	a0 92 27 20 	sts	0x2027, r10	; 0x802027 <lock>
			

		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
 5a6:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <cmd_idx>
 5aa:	99 23       	and	r25, r25
 5ac:	b1 f1       	breq	.+108    	; 0x61a <handle_spi_to_bbb+0x10a>
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
 5ae:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <rx_byte>
 5b2:	fe 01       	movw	r30, r28
 5b4:	e9 1b       	sub	r30, r25
 5b6:	f1 09       	sbc	r31, r1
 5b8:	e4 59       	subi	r30, 0x94	; 148
 5ba:	ff 4d       	sbci	r31, 0xDF	; 223
 5bc:	80 83       	st	Z, r24
			cmd_idx--;
 5be:	91 50       	subi	r25, 0x01	; 1
 5c0:	90 93 16 20 	sts	0x2016, r25	; 0x802016 <cmd_idx>
			//Finished last storage of incoming data
			if(cmd_idx == 0){
 5c4:	91 11       	cpse	r25, r1
 5c6:	44 c0       	rjmp	.+136    	; 0x650 <handle_spi_to_bbb+0x140>
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
 5c8:	f8 01       	movw	r30, r16
 5ca:	84 81       	ldd	r24, Z+4	; 0x04
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	98 2f       	mov	r25, r24
 5d0:	88 27       	eor	r24, r24
 5d2:	23 81       	ldd	r18, Z+3	; 0x03
 5d4:	82 2b       	or	r24, r18
 5d6:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <received_crc>
 5da:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <received_crc+0x1>
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	63 e0       	ldi	r22, 0x03	; 3
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	c8 01       	movw	r24, r16
 5e6:	72 d1       	rcall	.+740    	; 0x8cc <crc_io_checksum>
 5e8:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <calculated_crc>
 5ec:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <calculated_crc+0x1>
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
 5f0:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <received_crc>
 5f4:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <received_crc+0x1>
 5f8:	26 17       	cp	r18, r22
 5fa:	37 07       	cpc	r19, r23
 5fc:	49 f4       	brne	.+18     	; 0x610 <handle_spi_to_bbb+0x100>
					SPIC.DATA = SPI_CRC_PASS;
 5fe:	f6 01       	movw	r30, r12
 600:	63 82       	std	Z+3, r6	; 0x03
					
					circular_buffer_push(&tx_buff,SPI_CRC_PASS);
 602:	66 2d       	mov	r22, r6
 604:	81 e7       	ldi	r24, 0x71	; 113
 606:	90 e2       	ldi	r25, 0x20	; 32
 608:	ed de       	rcall	.-550    	; 0x3e4 <circular_buffer_push>
					cmd_finished = 1;
 60a:	a0 92 11 20 	sts	0x2011, r10	; 0x802011 <cmd_finished>
 60e:	20 c0       	rjmp	.+64     	; 0x650 <handle_spi_to_bbb+0x140>
				}
				else{
					
					//SPIC.DATA = SPI_CRC_FAIL;
					circular_buffer_push(&tx_buff,SPI_CRC_FAIL);
 610:	60 ef       	ldi	r22, 0xF0	; 240
 612:	81 e7       	ldi	r24, 0x71	; 113
 614:	90 e2       	ldi	r25, 0x20	; 32
 616:	e6 de       	rcall	.-564    	; 0x3e4 <circular_buffer_push>
 618:	1b c0       	rjmp	.+54     	; 0x650 <handle_spi_to_bbb+0x140>
				}
			}
		}
		else if(cmd_finished){
 61a:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <cmd_finished>
 61e:	88 23       	and	r24, r24
 620:	b9 f0       	breq	.+46     	; 0x650 <handle_spi_to_bbb+0x140>
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
 622:	e0 e0       	ldi	r30, 0x00	; 0
 624:	f0 e2       	ldi	r31, 0x20	; 32
 626:	a5 ea       	ldi	r26, 0xA5	; 165
 628:	b0 e2       	ldi	r27, 0x20	; 32
 62a:	88 2d       	mov	r24, r8
 62c:	01 90       	ld	r0, Z+
 62e:	0d 92       	st	X+, r0
 630:	8a 95       	dec	r24
 632:	e1 f7       	brne	.-8      	; 0x62c <handle_spi_to_bbb+0x11c>
				send_data[SENSOR_DATA_SIZE] = sensor_status;
 634:	e5 ea       	ldi	r30, 0xA5	; 165
 636:	f0 e2       	ldi	r31, 0x20	; 32
 638:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <sensor_status>
 63c:	84 87       	std	Z+12, r24	; 0x0c
				send_data[SENSOR_DATA_SIZE+1] = state;
 63e:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <state>
 642:	85 87       	std	Z+13, r24	; 0x0d
				send_idx = SENSOR_DATA_SIZE+2;
 644:	b0 92 10 20 	sts	0x2010, r11	; 0x802010 <send_idx>
			//}
			send_crc_length = send_idx;
 648:	b0 92 0f 20 	sts	0x200F, r11	; 0x80200f <send_crc_length>
			cmd_finished = 0;
 64c:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <cmd_finished>
		}
	
		if(send_idx > 0){
 650:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <send_idx>
 654:	88 23       	and	r24, r24
 656:	01 f1       	breq	.+64     	; 0x698 <handle_spi_to_bbb+0x188>
			//SPIC.DATA = send_data[send_crc_length-send_idx];
			circular_buffer_push(&tx_buff, send_data[send_crc_length-send_idx]);
 658:	e0 91 0f 20 	lds	r30, 0x200F	; 0x80200f <send_crc_length>
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	e8 1b       	sub	r30, r24
 660:	f1 09       	sbc	r31, r1
 662:	eb 55       	subi	r30, 0x5B	; 91
 664:	ff 4d       	sbci	r31, 0xDF	; 223
 666:	60 81       	ld	r22, Z
 668:	81 e7       	ldi	r24, 0x71	; 113
 66a:	90 e2       	ldi	r25, 0x20	; 32
 66c:	bb de       	rcall	.-650    	; 0x3e4 <circular_buffer_push>
			send_idx--;
 66e:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <send_idx>
 672:	81 50       	subi	r24, 0x01	; 1
 674:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <send_idx>
		
			//Calculate CRC
			if(send_idx == 0){
 678:	81 11       	cpse	r24, r1
 67a:	31 c0       	rjmp	.+98     	; 0x6de <handle_spi_to_bbb+0x1ce>
				send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
 67c:	60 91 0f 20 	lds	r22, 0x200F	; 0x80200f <send_crc_length>
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	85 ea       	ldi	r24, 0xA5	; 165
 686:	90 e2       	ldi	r25, 0x20	; 32
 688:	21 d1       	rcall	.+578    	; 0x8cc <crc_io_checksum>
 68a:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <send_crc>
 68e:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <send_crc+0x1>
				send_crc_idx = 2;
 692:	70 92 0c 20 	sts	0x200C, r7	; 0x80200c <__data_end>
 696:	23 c0       	rjmp	.+70     	; 0x6de <handle_spi_to_bbb+0x1ce>
			}
		
		}
		else if(send_crc_idx > 0){
 698:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <__data_end>
 69c:	88 23       	and	r24, r24
 69e:	f9 f0       	breq	.+62     	; 0x6de <handle_spi_to_bbb+0x1ce>
		
			//SPIC.DATA = send_crc >> ((2-send_crc_idx)*8);
			circular_buffer_push(&tx_buff, send_crc>> ((2-send_crc_idx)*8));
 6a0:	97 01       	movw	r18, r14
 6a2:	28 1b       	sub	r18, r24
 6a4:	31 09       	sbc	r19, r1
 6a6:	c9 01       	movw	r24, r18
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <send_crc>
 6b8:	70 91 0e 20 	lds	r23, 0x200E	; 0x80200e <send_crc+0x1>
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <handle_spi_to_bbb+0x1b2>
 6be:	76 95       	lsr	r23
 6c0:	67 95       	ror	r22
 6c2:	8a 95       	dec	r24
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <handle_spi_to_bbb+0x1ae>
 6c6:	81 e7       	ldi	r24, 0x71	; 113
 6c8:	90 e2       	ldi	r25, 0x20	; 32
 6ca:	8c de       	rcall	.-744    	; 0x3e4 <circular_buffer_push>
			send_crc_idx--;
 6cc:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <__data_end>
 6d0:	81 50       	subi	r24, 0x01	; 1
 6d2:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <__data_end>
			if(send_crc_idx == 0) lock = 0;
 6d6:	81 11       	cpse	r24, r1
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <handle_spi_to_bbb+0x1ce>
 6da:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <lock>
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
 6de:	88 e3       	ldi	r24, 0x38	; 56
 6e0:	90 e2       	ldi	r25, 0x20	; 32
 6e2:	a8 de       	rcall	.-688    	; 0x434 <circular_buffer_size>
 6e4:	81 11       	cpse	r24, r1
 6e6:	46 cf       	rjmp	.-372    	; 0x574 <handle_spi_to_bbb+0x64>
			circular_buffer_push(&tx_buff, send_crc>> ((2-send_crc_idx)*8));
			send_crc_idx--;
			if(send_crc_idx == 0) lock = 0;
		}
	}
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	bf 90       	pop	r11
 6fa:	af 90       	pop	r10
 6fc:	9f 90       	pop	r9
 6fe:	8f 90       	pop	r8
 700:	7f 90       	pop	r7
 702:	6f 90       	pop	r6
 704:	08 95       	ret

00000706 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	00 d0       	rcall	.+0      	; 0x70c <sysclk_init+0x6>
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 716:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 71a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 71e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 722:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 726:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 72a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 72e:	8f b7       	in	r24, 0x3f	; 63
 730:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 732:	f8 94       	cli
	return flags;
 734:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 736:	e0 e5       	ldi	r30, 0x50	; 80
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	82 60       	ori	r24, 0x02	; 2
 73e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 740:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 742:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 744:	81 ff       	sbrs	r24, 1
 746:	fd cf       	rjmp	.-6      	; 0x742 <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	80 e4       	ldi	r24, 0x40	; 64
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	d9 d0       	rcall	.+434    	; 0x902 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 750:	8f b7       	in	r24, 0x3f	; 63
 752:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
 754:	f8 94       	cli
	return flags;
 756:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 758:	e0 e5       	ldi	r30, 0x50	; 80
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	8e 7f       	andi	r24, 0xFE	; 254
 760:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 762:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 768:	8f b7       	in	r24, 0x3f	; 63
 76a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 76c:	f8 94       	cli
	return flags;
 76e:	99 81       	ldd	r25, Y+1	; 0x01
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 770:	80 81       	ld	r24, Z
 772:	88 60       	ori	r24, 0x08	; 8
 774:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 776:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 778:	81 81       	ldd	r24, Z+1	; 0x01
 77a:	83 ff       	sbrs	r24, 3
 77c:	fd cf       	rjmp	.-6      	; 0x778 <sysclk_init+0x72>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
 77e:	8b e0       	ldi	r24, 0x0B	; 11
 780:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 784:	23 96       	adiw	r28, 0x03	; 3
 786:	cd bf       	out	0x3d, r28	; 61
 788:	de bf       	out	0x3e, r29	; 62
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	08 95       	ret

00000790 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	1f 92       	push	r1
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 79a:	9f b7       	in	r25, 0x3f	; 63
 79c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 79e:	f8 94       	cli
	return flags;
 7a0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 7a2:	e8 2f       	mov	r30, r24
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	e0 59       	subi	r30, 0x90	; 144
 7a8:	ff 4f       	sbci	r31, 0xFF	; 255
 7aa:	60 95       	com	r22
 7ac:	80 81       	ld	r24, Z
 7ae:	68 23       	and	r22, r24
 7b0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 7b2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 7b4:	0f 90       	pop	r0
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <crc_io_checksum_byte_start>:
 * the module and get the calculated checksum.
 *
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 */
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 *
 */
static inline void crc_reset(void)
{
	// Reset module
	CRC_CTRL |= CRC_RESET_RESET0_gc;
 7c0:	e0 ed       	ldi	r30, 0xD0	; 208
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	90 81       	ld	r25, Z
 7c6:	90 68       	ori	r25, 0x80	; 128
 7c8:	90 83       	st	Z, r25

	// Set initial checksum value
	CRC.CHECKSUM0 = crc_initial_value & 0xFF;
 7ca:	40 91 18 20 	lds	r20, 0x2018	; 0x802018 <crc_initial_value>
 7ce:	50 91 19 20 	lds	r21, 0x2019	; 0x802019 <crc_initial_value+0x1>
 7d2:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <crc_initial_value+0x2>
 7d6:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <crc_initial_value+0x3>
 7da:	44 83       	std	Z+4, r20	; 0x04
	CRC.CHECKSUM1 = (crc_initial_value >> 8) & 0xFF;
 7dc:	05 2f       	mov	r16, r21
 7de:	16 2f       	mov	r17, r22
 7e0:	27 2f       	mov	r18, r23
 7e2:	33 27       	eor	r19, r19
 7e4:	05 83       	std	Z+5, r16	; 0x05
	CRC.CHECKSUM2 = (crc_initial_value >> 16) & 0xFF;
 7e6:	8b 01       	movw	r16, r22
 7e8:	22 27       	eor	r18, r18
 7ea:	33 27       	eor	r19, r19
 7ec:	06 83       	std	Z+6, r16	; 0x06
	CRC.CHECKSUM3 = (crc_initial_value >> 24) & 0xFF;
 7ee:	47 2f       	mov	r20, r23
 7f0:	55 27       	eor	r21, r21
 7f2:	66 27       	eor	r22, r22
 7f4:	77 27       	eor	r23, r23
 7f6:	47 83       	std	Z+7, r20	; 0x07

	crc_initial_value = 0;
 7f8:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <crc_initial_value>
 7fc:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <crc_initial_value+0x1>
 800:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <crc_initial_value+0x2>
 804:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <crc_initial_value+0x3>
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
	// Initialize CRC calculations on I/O interface
	crc_reset();
	// Enable CRC-32 if chosen
	if (crc_16_32 == CRC_32BIT) {
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	19 f4       	brne	.+6      	; 0x812 <crc_io_checksum_byte_start+0x56>
 * \note This cannot be changed while the busy flag is set.
 *
 */
static inline void crc_32_enable(void)
{
	CRC_CTRL |= CRC_CRC32_bm;
 80c:	80 81       	ld	r24, Z
 80e:	80 62       	ori	r24, 0x20	; 32
 810:	80 83       	st	Z, r24
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
 812:	e0 ed       	ldi	r30, 0xD0	; 208
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	80 7f       	andi	r24, 0xF0	; 240
 81a:	80 83       	st	Z, r24
	CRC_CTRL |= source;
 81c:	80 81       	ld	r24, Z
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	80 83       	st	Z, r24
	if (crc_16_32 == CRC_32BIT) {
		crc_32_enable();
	}
	// Enable CRC module using the I/O interface
	crc_set_source(CRC_SOURCE_IO_gc);
}
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	08 95       	ret

00000828 <crc_io_checksum_byte_stop>:
 *
 * \retval checksum checksum
 *
 */
uint32_t crc_io_checksum_byte_stop(void)
{
 828:	cf 92       	push	r12
 82a:	df 92       	push	r13
 82c:	ef 92       	push	r14
 82e:	ff 92       	push	r15
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;
 830:	e1 ed       	ldi	r30, 0xD1	; 209
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	81 60       	ori	r24, 0x01	; 1
 838:	80 83       	st	Z, r24
 * \retval false if module is not busy
 *
 */
static inline bool crc_is_busy(void)
{
	return ((CRC_STATUS & CRC_BUSY_bm) == CRC_BUSY_bm);
 83a:	80 81       	ld	r24, Z
 * \return checksum checksum value
 */
static inline uint32_t crc_checksum_read(void)
{
	// Wait until the CRC conversion is finished
	while (crc_is_busy()) {
 83c:	80 fd       	sbrc	r24, 0
 83e:	fd cf       	rjmp	.-6      	; 0x83a <crc_io_checksum_byte_stop+0x12>
		// Do nothing
	}

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
 840:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 844:	85 ff       	sbrs	r24, 5
 846:	2e c0       	rjmp	.+92     	; 0x8a4 <crc_io_checksum_byte_stop+0x7c>
 */
static inline uint32_t crc32_checksum_read(void)
{
	uint32_t checksum;

	checksum = ((uint32_t)CRC_CHECKSUM0 & 0x000000FF);
 848:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint32_t)CRC_CHECKSUM1 << 8) & 0x0000FF00);
 84c:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	checksum |= (((uint32_t)CRC_CHECKSUM2 << 16) & 0x00FF0000);
 850:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	checksum |= (((uint32_t)CRC_CHECKSUM3 << 24) & 0xFF000000);
 854:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7000d7>
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	72 2b       	or	r23, r18
 860:	59 2b       	or	r21, r25
 862:	68 2b       	or	r22, r24
 864:	20 e2       	ldi	r18, 0x20	; 32
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	dc 01       	movw	r26, r24
		result = (result << 1) + (value & 1);
 86c:	88 0f       	add	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	aa 1f       	adc	r26, r26
 872:	bb 1f       	adc	r27, r27
 874:	6a 01       	movw	r12, r20
 876:	7b 01       	movw	r14, r22
 878:	31 e0       	ldi	r19, 0x01	; 1
 87a:	c3 22       	and	r12, r19
 87c:	dd 24       	eor	r13, r13
 87e:	ee 24       	eor	r14, r14
 880:	ff 24       	eor	r15, r15
 882:	8c 0d       	add	r24, r12
 884:	9d 1d       	adc	r25, r13
 886:	ae 1d       	adc	r26, r14
 888:	bf 1d       	adc	r27, r15
		value >>= 1;
 88a:	76 95       	lsr	r23
 88c:	67 95       	ror	r22
 88e:	57 95       	ror	r21
 890:	47 95       	ror	r20
 892:	21 50       	subi	r18, 0x01	; 1
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
 894:	59 f7       	brne	.-42     	; 0x86c <crc_io_checksum_byte_stop+0x44>

	// Bit reverse the result (to comply with IEEE 802.3 CRC-32)
	checksum = crc_bit_revert(checksum);

	// Complement the result (to comply with IEEE 802.3 CRC-32)
	checksum = ~checksum;
 896:	bc 01       	movw	r22, r24
 898:	cd 01       	movw	r24, r26
 89a:	60 95       	com	r22
 89c:	70 95       	com	r23
 89e:	80 95       	com	r24
 8a0:	90 95       	com	r25
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <crc_io_checksum_byte_stop+0x8c>
 */
static inline uint16_t crc16_checksum_read(void)
{
	uint16_t checksum;
	checksum = 0;
	checksum = ((uint16_t)CRC_CHECKSUM0 & 0x00FF);
 8a4:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint16_t)CRC_CHECKSUM1 << 8) & 0xFF00);
 8a8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	78 2b       	or	r23, r24

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
		return crc32_checksum_read();
	} else {
		return crc16_checksum_read();
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
 8b4:	e0 ed       	ldi	r30, 0xD0	; 208
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	20 81       	ld	r18, Z
 8ba:	20 7f       	andi	r18, 0xF0	; 240
 8bc:	20 83       	st	Z, r18
	CRC_CTRL |= source;
 8be:	20 81       	ld	r18, Z
 8c0:	20 83       	st	Z, r18
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;

	// Stop CRC and return checksum
	return crc_checksum_complete();
}
 8c2:	ff 90       	pop	r15
 8c4:	ef 90       	pop	r14
 8c6:	df 90       	pop	r13
 8c8:	cf 90       	pop	r12
 8ca:	08 95       	ret

000008cc <crc_io_checksum>:
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 *
 * \return checksum checksum
 */
uint32_t crc_io_checksum(void *data, uint16_t len, enum crc_16_32_t crc_16_32)
{
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	ec 01       	movw	r28, r24
 8d6:	8b 01       	movw	r16, r22
 8d8:	84 2f       	mov	r24, r20
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);
 8da:	70 df       	rcall	.-288    	; 0x7bc <crc_io_checksum_byte_start>

	// Write data to DATAIN register
	while (len--) {
 8dc:	01 15       	cp	r16, r1
 8de:	11 05       	cpc	r17, r1
 8e0:	51 f0       	breq	.+20     	; 0x8f6 <crc_io_checksum+0x2a>
 8e2:	be 01       	movw	r22, r28
 8e4:	60 0f       	add	r22, r16
 8e6:	71 1f       	adc	r23, r17
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
 8e8:	e3 ed       	ldi	r30, 0xD3	; 211
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
		crc_io_checksum_byte_add(*(uint8_t*)data);
 8ec:	89 91       	ld	r24, Y+
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
 8ee:	80 83       	st	Z, r24
{
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
 8f0:	c6 17       	cp	r28, r22
 8f2:	d7 07       	cpc	r29, r23
 8f4:	d9 f7       	brne	.-10     	; 0x8ec <crc_io_checksum+0x20>
		crc_io_checksum_byte_add(*(uint8_t*)data);
		data = (uint8_t*)data + 1;
	}

	// Return checksum
	return crc_io_checksum_byte_stop();
 8f6:	98 df       	rcall	.-208    	; 0x828 <crc_io_checksum_byte_stop>
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	08 95       	ret

00000902 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 902:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 904:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 906:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 908:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 90a:	60 83       	st	Z, r22
	ret                             // Return to caller
 90c:	08 95       	ret

0000090e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	fc 01       	movw	r30, r24
 914:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 916:	20 e0       	ldi	r18, 0x00	; 0
 918:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 91a:	c6 2f       	mov	r28, r22
 91c:	d0 e0       	ldi	r29, 0x00	; 0
 91e:	de 01       	movw	r26, r28
 920:	02 2e       	mov	r0, r18
 922:	02 c0       	rjmp	.+4      	; 0x928 <ioport_configure_port_pin+0x1a>
 924:	b5 95       	asr	r27
 926:	a7 95       	ror	r26
 928:	0a 94       	dec	r0
 92a:	e2 f7       	brpl	.-8      	; 0x924 <ioport_configure_port_pin+0x16>
 92c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 92e:	50 83       	st	Z, r21
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 936:	28 30       	cpi	r18, 0x08	; 8
 938:	31 05       	cpc	r19, r1
 93a:	89 f7       	brne	.-30     	; 0x91e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 93c:	40 ff       	sbrs	r20, 0
 93e:	0a c0       	rjmp	.+20     	; 0x954 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 940:	41 ff       	sbrs	r20, 1
 942:	03 c0       	rjmp	.+6      	; 0x94a <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 944:	fc 01       	movw	r30, r24
 946:	65 83       	std	Z+5, r22	; 0x05
 948:	02 c0       	rjmp	.+4      	; 0x94e <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 94a:	fc 01       	movw	r30, r24
 94c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 94e:	fc 01       	movw	r30, r24
 950:	61 83       	std	Z+1, r22	; 0x01
 952:	02 c0       	rjmp	.+4      	; 0x958 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 954:	fc 01       	movw	r30, r24
 956:	62 83       	std	Z+2, r22	; 0x02
	}
}
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	08 95       	ret

0000095e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 95e:	43 e0       	ldi	r20, 0x03	; 3
 960:	50 e0       	ldi	r21, 0x00	; 0
 962:	68 e0       	ldi	r22, 0x08	; 8
 964:	80 ec       	ldi	r24, 0xC0	; 192
 966:	97 e0       	ldi	r25, 0x07	; 7
 968:	d2 df       	rcall	.-92     	; 0x90e <ioport_configure_port_pin>
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	58 e1       	ldi	r21, 0x18	; 24
 96e:	64 e0       	ldi	r22, 0x04	; 4
 970:	80 ec       	ldi	r24, 0xC0	; 192
 972:	97 e0       	ldi	r25, 0x07	; 7
 974:	cc cf       	rjmp	.-104    	; 0x90e <ioport_configure_port_pin>
 976:	08 95       	ret

00000978 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 97c:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <transfer>
 980:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <transfer+0x1>
 984:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 986:	83 ff       	sbrs	r24, 3
 988:	08 c0       	rjmp	.+16     	; 0x99a <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 98a:	88 60       	ori	r24, 0x08	; 8
 98c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 992:	86 ef       	ldi	r24, 0xF6	; 246
 994:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <transfer+0xa>
 998:	83 c0       	rjmp	.+262    	; 0xaa0 <twim_interrupt_handler+0x128>
 99a:	98 2f       	mov	r25, r24
 99c:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 99e:	31 f0       	breq	.+12     	; 0x9ac <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 9a0:	83 e0       	ldi	r24, 0x03	; 3
 9a2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <transfer+0xa>
 9aa:	7a c0       	rjmp	.+244    	; 0xaa0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 9ac:	86 ff       	sbrs	r24, 6
 9ae:	43 c0       	rjmp	.+134    	; 0xa36 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 9b0:	cc e1       	ldi	r28, 0x1C	; 28
 9b2:	d0 e2       	ldi	r29, 0x20	; 32
 9b4:	aa 81       	ldd	r26, Y+2	; 0x02
 9b6:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 9b8:	8c 81       	ldd	r24, Y+4	; 0x04
 9ba:	9d 81       	ldd	r25, Y+5	; 0x05
 9bc:	14 96       	adiw	r26, 0x04	; 4
 9be:	2d 91       	ld	r18, X+
 9c0:	3c 91       	ld	r19, X
 9c2:	15 97       	sbiw	r26, 0x05	; 5
 9c4:	82 17       	cp	r24, r18
 9c6:	93 07       	cpc	r25, r19
 9c8:	6c f4       	brge	.+26     	; 0x9e4 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 9ca:	9c 01       	movw	r18, r24
 9cc:	2f 5f       	subi	r18, 0xFF	; 255
 9ce:	3f 4f       	sbci	r19, 0xFF	; 255
 9d0:	20 93 20 20 	sts	0x2020, r18	; 0x802020 <transfer+0x4>
 9d4:	30 93 21 20 	sts	0x2021, r19	; 0x802021 <transfer+0x5>
 9d8:	a8 0f       	add	r26, r24
 9da:	b9 1f       	adc	r27, r25
 9dc:	11 96       	adiw	r26, 0x01	; 1
 9de:	8c 91       	ld	r24, X
 9e0:	87 83       	std	Z+7, r24	; 0x07
 9e2:	5e c0       	rjmp	.+188    	; 0xaa0 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
 9e4:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <transfer+0x6>
 9e8:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <transfer+0x7>
 9ec:	18 96       	adiw	r26, 0x08	; 8
 9ee:	2d 91       	ld	r18, X+
 9f0:	3c 91       	ld	r19, X
 9f2:	19 97       	sbiw	r26, 0x09	; 9
 9f4:	82 17       	cp	r24, r18
 9f6:	93 07       	cpc	r25, r19
 9f8:	c8 f4       	brcc	.+50     	; 0xa2c <twim_interrupt_handler+0xb4>

		if (transfer.read) {
 9fa:	20 91 24 20 	lds	r18, 0x2024	; 0x802024 <transfer+0x8>
 9fe:	22 23       	and	r18, r18
 a00:	21 f0       	breq	.+8      	; 0xa0a <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 a02:	86 81       	ldd	r24, Z+6	; 0x06
 a04:	81 60       	ori	r24, 0x01	; 1
 a06:	86 83       	std	Z+6, r24	; 0x06
 a08:	4b c0       	rjmp	.+150    	; 0xaa0 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
 a0a:	16 96       	adiw	r26, 0x06	; 6
 a0c:	2d 91       	ld	r18, X+
 a0e:	3c 91       	ld	r19, X
 a10:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 a12:	ac 01       	movw	r20, r24
 a14:	4f 5f       	subi	r20, 0xFF	; 255
 a16:	5f 4f       	sbci	r21, 0xFF	; 255
 a18:	40 93 22 20 	sts	0x2022, r20	; 0x802022 <transfer+0x6>
 a1c:	50 93 23 20 	sts	0x2023, r21	; 0x802023 <transfer+0x7>
 a20:	d9 01       	movw	r26, r18
 a22:	a8 0f       	add	r26, r24
 a24:	b9 1f       	adc	r27, r25
 a26:	8c 91       	ld	r24, X
 a28:	87 83       	std	Z+7, r24	; 0x07
 a2a:	3a c0       	rjmp	.+116    	; 0xaa0 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 a2c:	83 e0       	ldi	r24, 0x03	; 3
 a2e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 a30:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <transfer+0xa>
 a34:	35 c0       	rjmp	.+106    	; 0xaa0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 a36:	88 23       	and	r24, r24
 a38:	84 f5       	brge	.+96     	; 0xa9a <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 a3a:	ac e1       	ldi	r26, 0x1C	; 28
 a3c:	b0 e2       	ldi	r27, 0x20	; 32
 a3e:	12 96       	adiw	r26, 0x02	; 2
 a40:	cd 91       	ld	r28, X+
 a42:	dc 91       	ld	r29, X
 a44:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 a46:	16 96       	adiw	r26, 0x06	; 6
 a48:	8d 91       	ld	r24, X+
 a4a:	9c 91       	ld	r25, X
 a4c:	17 97       	sbiw	r26, 0x07	; 7
 a4e:	28 85       	ldd	r18, Y+8	; 0x08
 a50:	39 85       	ldd	r19, Y+9	; 0x09
 a52:	82 17       	cp	r24, r18
 a54:	93 07       	cpc	r25, r19
 a56:	d8 f4       	brcc	.+54     	; 0xa8e <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
 a58:	6e 81       	ldd	r22, Y+6	; 0x06
 a5a:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 a5c:	9c 01       	movw	r18, r24
 a5e:	2f 5f       	subi	r18, 0xFF	; 255
 a60:	3f 4f       	sbci	r19, 0xFF	; 255
 a62:	20 93 22 20 	sts	0x2022, r18	; 0x802022 <transfer+0x6>
 a66:	30 93 23 20 	sts	0x2023, r19	; 0x802023 <transfer+0x7>
 a6a:	47 81       	ldd	r20, Z+7	; 0x07
 a6c:	db 01       	movw	r26, r22
 a6e:	a8 0f       	add	r26, r24
 a70:	b9 1f       	adc	r27, r25
 a72:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 a74:	88 85       	ldd	r24, Y+8	; 0x08
 a76:	99 85       	ldd	r25, Y+9	; 0x09
 a78:	28 17       	cp	r18, r24
 a7a:	39 07       	cpc	r19, r25
 a7c:	18 f4       	brcc	.+6      	; 0xa84 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 a7e:	82 e0       	ldi	r24, 0x02	; 2
 a80:	83 83       	std	Z+3, r24	; 0x03
 a82:	0e c0       	rjmp	.+28     	; 0xaa0 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 a84:	87 e0       	ldi	r24, 0x07	; 7
 a86:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 a88:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <transfer+0xa>
 a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 a8e:	83 e0       	ldi	r24, 0x03	; 3
 a90:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 a92:	89 ef       	ldi	r24, 0xF9	; 249
 a94:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <transfer+0xa>
 a98:	03 c0       	rjmp	.+6      	; 0xaa0 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 a9a:	8b ef       	ldi	r24, 0xFB	; 251
 a9c:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <transfer+0xa>
	}
}
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

00000aa6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 aa6:	1f 92       	push	r1
 aa8:	0f 92       	push	r0
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	0f 92       	push	r0
 aae:	11 24       	eor	r1, r1
 ab0:	08 b6       	in	r0, 0x38	; 56
 ab2:	0f 92       	push	r0
 ab4:	18 be       	out	0x38, r1	; 56
 ab6:	09 b6       	in	r0, 0x39	; 57
 ab8:	0f 92       	push	r0
 aba:	19 be       	out	0x39, r1	; 57
 abc:	0b b6       	in	r0, 0x3b	; 59
 abe:	0f 92       	push	r0
 ac0:	1b be       	out	0x3b, r1	; 59
 ac2:	2f 93       	push	r18
 ac4:	3f 93       	push	r19
 ac6:	4f 93       	push	r20
 ac8:	5f 93       	push	r21
 aca:	6f 93       	push	r22
 acc:	7f 93       	push	r23
 ace:	8f 93       	push	r24
 ad0:	9f 93       	push	r25
 ad2:	af 93       	push	r26
 ad4:	bf 93       	push	r27
 ad6:	ef 93       	push	r30
 ad8:	ff 93       	push	r31
 ada:	4e df       	rcall	.-356    	; 0x978 <twim_interrupt_handler>
 adc:	ff 91       	pop	r31
 ade:	ef 91       	pop	r30
 ae0:	bf 91       	pop	r27
 ae2:	af 91       	pop	r26
 ae4:	9f 91       	pop	r25
 ae6:	8f 91       	pop	r24
 ae8:	7f 91       	pop	r23
 aea:	6f 91       	pop	r22
 aec:	5f 91       	pop	r21
 aee:	4f 91       	pop	r20
 af0:	3f 91       	pop	r19
 af2:	2f 91       	pop	r18
 af4:	0f 90       	pop	r0
 af6:	0b be       	out	0x3b, r0	; 59
 af8:	0f 90       	pop	r0
 afa:	09 be       	out	0x39, r0	; 57
 afc:	0f 90       	pop	r0
 afe:	08 be       	out	0x38, r0	; 56
 b00:	0f 90       	pop	r0
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	0f 90       	pop	r0
 b06:	1f 90       	pop	r1
 b08:	18 95       	reti

00000b0a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
 b0a:	1f 92       	push	r1
 b0c:	0f 92       	push	r0
 b0e:	0f b6       	in	r0, 0x3f	; 63
 b10:	0f 92       	push	r0
 b12:	11 24       	eor	r1, r1
 b14:	08 b6       	in	r0, 0x38	; 56
 b16:	0f 92       	push	r0
 b18:	18 be       	out	0x38, r1	; 56
 b1a:	09 b6       	in	r0, 0x39	; 57
 b1c:	0f 92       	push	r0
 b1e:	19 be       	out	0x39, r1	; 57
 b20:	0b b6       	in	r0, 0x3b	; 59
 b22:	0f 92       	push	r0
 b24:	1b be       	out	0x3b, r1	; 59
 b26:	2f 93       	push	r18
 b28:	3f 93       	push	r19
 b2a:	4f 93       	push	r20
 b2c:	5f 93       	push	r21
 b2e:	6f 93       	push	r22
 b30:	7f 93       	push	r23
 b32:	8f 93       	push	r24
 b34:	9f 93       	push	r25
 b36:	af 93       	push	r26
 b38:	bf 93       	push	r27
 b3a:	ef 93       	push	r30
 b3c:	ff 93       	push	r31
 b3e:	1c df       	rcall	.-456    	; 0x978 <twim_interrupt_handler>
 b40:	ff 91       	pop	r31
 b42:	ef 91       	pop	r30
 b44:	bf 91       	pop	r27
 b46:	af 91       	pop	r26
 b48:	9f 91       	pop	r25
 b4a:	8f 91       	pop	r24
 b4c:	7f 91       	pop	r23
 b4e:	6f 91       	pop	r22
 b50:	5f 91       	pop	r21
 b52:	4f 91       	pop	r20
 b54:	3f 91       	pop	r19
 b56:	2f 91       	pop	r18
 b58:	0f 90       	pop	r0
 b5a:	0b be       	out	0x3b, r0	; 59
 b5c:	0f 90       	pop	r0
 b5e:	09 be       	out	0x39, r0	; 57
 b60:	0f 90       	pop	r0
 b62:	08 be       	out	0x38, r0	; 56
 b64:	0f 90       	pop	r0
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	0f 90       	pop	r0
 b6a:	1f 90       	pop	r1
 b6c:	18 95       	reti

00000b6e <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 b6e:	1f 92       	push	r1
 b70:	0f 92       	push	r0
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	0f 92       	push	r0
 b76:	11 24       	eor	r1, r1
 b78:	08 b6       	in	r0, 0x38	; 56
 b7a:	0f 92       	push	r0
 b7c:	18 be       	out	0x38, r1	; 56
 b7e:	09 b6       	in	r0, 0x39	; 57
 b80:	0f 92       	push	r0
 b82:	19 be       	out	0x39, r1	; 57
 b84:	0b b6       	in	r0, 0x3b	; 59
 b86:	0f 92       	push	r0
 b88:	1b be       	out	0x3b, r1	; 59
 b8a:	2f 93       	push	r18
 b8c:	3f 93       	push	r19
 b8e:	4f 93       	push	r20
 b90:	5f 93       	push	r21
 b92:	6f 93       	push	r22
 b94:	7f 93       	push	r23
 b96:	8f 93       	push	r24
 b98:	9f 93       	push	r25
 b9a:	af 93       	push	r26
 b9c:	bf 93       	push	r27
 b9e:	ef 93       	push	r30
 ba0:	ff 93       	push	r31
 ba2:	ea de       	rcall	.-556    	; 0x978 <twim_interrupt_handler>
 ba4:	ff 91       	pop	r31
 ba6:	ef 91       	pop	r30
 ba8:	bf 91       	pop	r27
 baa:	af 91       	pop	r26
 bac:	9f 91       	pop	r25
 bae:	8f 91       	pop	r24
 bb0:	7f 91       	pop	r23
 bb2:	6f 91       	pop	r22
 bb4:	5f 91       	pop	r21
 bb6:	4f 91       	pop	r20
 bb8:	3f 91       	pop	r19
 bba:	2f 91       	pop	r18
 bbc:	0f 90       	pop	r0
 bbe:	0b be       	out	0x3b, r0	; 59
 bc0:	0f 90       	pop	r0
 bc2:	09 be       	out	0x39, r0	; 57
 bc4:	0f 90       	pop	r0
 bc6:	08 be       	out	0x38, r0	; 56
 bc8:	0f 90       	pop	r0
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	0f 90       	pop	r0
 bce:	1f 90       	pop	r1
 bd0:	18 95       	reti

00000bd2 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
 bd2:	1f 92       	push	r1
 bd4:	0f 92       	push	r0
 bd6:	0f b6       	in	r0, 0x3f	; 63
 bd8:	0f 92       	push	r0
 bda:	11 24       	eor	r1, r1
 bdc:	08 b6       	in	r0, 0x38	; 56
 bde:	0f 92       	push	r0
 be0:	18 be       	out	0x38, r1	; 56
 be2:	09 b6       	in	r0, 0x39	; 57
 be4:	0f 92       	push	r0
 be6:	19 be       	out	0x39, r1	; 57
 be8:	0b b6       	in	r0, 0x3b	; 59
 bea:	0f 92       	push	r0
 bec:	1b be       	out	0x3b, r1	; 59
 bee:	2f 93       	push	r18
 bf0:	3f 93       	push	r19
 bf2:	4f 93       	push	r20
 bf4:	5f 93       	push	r21
 bf6:	6f 93       	push	r22
 bf8:	7f 93       	push	r23
 bfa:	8f 93       	push	r24
 bfc:	9f 93       	push	r25
 bfe:	af 93       	push	r26
 c00:	bf 93       	push	r27
 c02:	ef 93       	push	r30
 c04:	ff 93       	push	r31
 c06:	b8 de       	rcall	.-656    	; 0x978 <twim_interrupt_handler>
 c08:	ff 91       	pop	r31
 c0a:	ef 91       	pop	r30
 c0c:	bf 91       	pop	r27
 c0e:	af 91       	pop	r26
 c10:	9f 91       	pop	r25
 c12:	8f 91       	pop	r24
 c14:	7f 91       	pop	r23
 c16:	6f 91       	pop	r22
 c18:	5f 91       	pop	r21
 c1a:	4f 91       	pop	r20
 c1c:	3f 91       	pop	r19
 c1e:	2f 91       	pop	r18
 c20:	0f 90       	pop	r0
 c22:	0b be       	out	0x3b, r0	; 59
 c24:	0f 90       	pop	r0
 c26:	09 be       	out	0x39, r0	; 57
 c28:	0f 90       	pop	r0
 c2a:	08 be       	out	0x38, r0	; 56
 c2c:	0f 90       	pop	r0
 c2e:	0f be       	out	0x3f, r0	; 63
 c30:	0f 90       	pop	r0
 c32:	1f 90       	pop	r1
 c34:	18 95       	reti

00000c36 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
 c36:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
 c38:	db 01       	movw	r26, r22
 c3a:	14 96       	adiw	r26, 0x04	; 4
 c3c:	8c 91       	ld	r24, X
 c3e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
 c40:	88 eb       	ldi	r24, 0xB8	; 184
 c42:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
 c44:	81 e0       	ldi	r24, 0x01	; 1
 c46:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
 c48:	ec e1       	ldi	r30, 0x1C	; 28
 c4a:	f0 e2       	ldi	r31, 0x20	; 32
 c4c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
 c4e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
 c50:	e0 ea       	ldi	r30, 0xA0	; 160
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	82 81       	ldd	r24, Z+2	; 0x02
 c56:	82 60       	ori	r24, 0x02	; 2
 c58:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
 c5a:	78 94       	sei

	return STATUS_OK;
}
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	08 95       	ret

00000c60 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
 c60:	cf 93       	push	r28
 c62:	df 93       	push	r29
 c64:	1f 92       	push	r1
 c66:	cd b7       	in	r28, 0x3d	; 61
 c68:	de b7       	in	r29, 0x3e	; 62
 c6a:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
 c6c:	89 2b       	or	r24, r25
 c6e:	09 f4       	brne	.+2      	; 0xc72 <twi_master_transfer+0x12>
 c70:	4b c0       	rjmp	.+150    	; 0xd08 <twi_master_transfer+0xa8>
 c72:	61 15       	cp	r22, r1
 c74:	71 05       	cpc	r23, r1
 c76:	09 f4       	brne	.+2      	; 0xc7a <twi_master_transfer+0x1a>
 c78:	49 c0       	rjmp	.+146    	; 0xd0c <twi_master_transfer+0xac>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
 c7a:	fb 01       	movw	r30, r22
 c7c:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
 c7e:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <transfer+0x9>
 c82:	88 23       	and	r24, r24
 c84:	19 f0       	breq	.+6      	; 0xc8c <twi_master_transfer+0x2c>

		if (no_wait) { return ERR_BUSY; }
 c86:	99 23       	and	r25, r25
 c88:	f1 f3       	breq	.-4      	; 0xc86 <twi_master_transfer+0x26>
 c8a:	42 c0       	rjmp	.+132    	; 0xd10 <twi_master_transfer+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 c8c:	8f b7       	in	r24, 0x3f	; 63
 c8e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 c90:	f8 94       	cli
	return flags;
 c92:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
 c94:	ec e1       	ldi	r30, 0x1C	; 28
 c96:	f0 e2       	ldi	r31, 0x20	; 32
 c98:	91 e0       	ldi	r25, 0x01	; 1
 c9a:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
 c9c:	90 e8       	ldi	r25, 0x80	; 128
 c9e:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 ca0:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
 ca2:	a0 83       	st	Z, r26
 ca4:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
 ca6:	62 83       	std	Z+2, r22	; 0x02
 ca8:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
 caa:	14 82       	std	Z+4, r1	; 0x04
 cac:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
 cae:	16 82       	std	Z+6, r1	; 0x06
 cb0:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
 cb2:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
 cb4:	fb 01       	movw	r30, r22
 cb6:	80 81       	ld	r24, Z
 cb8:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
 cba:	24 81       	ldd	r18, Z+4	; 0x04
 cbc:	35 81       	ldd	r19, Z+5	; 0x05
 cbe:	23 2b       	or	r18, r19
 cc0:	11 f4       	brne	.+4      	; 0xcc6 <twi_master_transfer+0x66>
 cc2:	41 11       	cpse	r20, r1
 cc4:	03 c0       	rjmp	.+6      	; 0xccc <twi_master_transfer+0x6c>
			transfer.bus->MASTER.ADDR = chip;
 cc6:	16 96       	adiw	r26, 0x06	; 6
 cc8:	8c 93       	st	X, r24
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <twi_master_transfer+0x72>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
 ccc:	81 60       	ori	r24, 0x01	; 1
 cce:	16 96       	adiw	r26, 0x06	; 6
 cd0:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
 cd2:	ec e1       	ldi	r30, 0x1C	; 28
 cd4:	f0 e2       	ldi	r31, 0x20	; 32
 cd6:	82 85       	ldd	r24, Z+10	; 0x0a
 cd8:	80 38       	cpi	r24, 0x80	; 128
 cda:	e9 f3       	breq	.-6      	; 0xcd6 <twi_master_transfer+0x76>

	while (! twim_idle(transfer.bus)) { barrier(); }
 cdc:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <transfer>
 ce0:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <transfer+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
 ce4:	84 81       	ldd	r24, Z+4	; 0x04
 ce6:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
 ce8:	81 30       	cpi	r24, 0x01	; 1
 cea:	49 f0       	breq	.+18     	; 0xcfe <twi_master_transfer+0x9e>
 cec:	ac e1       	ldi	r26, 0x1C	; 28
 cee:	b0 e2       	ldi	r27, 0x20	; 32
 cf0:	ed 91       	ld	r30, X+
 cf2:	fc 91       	ld	r31, X
 cf4:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
 cf6:	84 81       	ldd	r24, Z+4	; 0x04
 cf8:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
 cfa:	81 30       	cpi	r24, 0x01	; 1
 cfc:	c9 f7       	brne	.-14     	; 0xcf0 <twi_master_transfer+0x90>

	status_code_t const status = transfer.status;
 cfe:	ec e1       	ldi	r30, 0x1C	; 28
 d00:	f0 e2       	ldi	r31, 0x20	; 32
 d02:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
 d04:	11 86       	std	Z+9, r1	; 0x09
 d06:	05 c0       	rjmp	.+10     	; 0xd12 <twi_master_transfer+0xb2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
 d08:	88 ef       	ldi	r24, 0xF8	; 248
 d0a:	03 c0       	rjmp	.+6      	; 0xd12 <twi_master_transfer+0xb2>
 d0c:	88 ef       	ldi	r24, 0xF8	; 248
 d0e:	01 c0       	rjmp	.+2      	; 0xd12 <twi_master_transfer+0xb2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
 d10:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
 d12:	0f 90       	pop	r0
 d14:	df 91       	pop	r29
 d16:	cf 91       	pop	r28
 d18:	08 95       	ret

00000d1a <init_i2c>:



uint8_t init_i2c(void);
uint8_t init_i2c(void)
{
 d1a:	4f 92       	push	r4
 d1c:	5f 92       	push	r5
 d1e:	6f 92       	push	r6
 d20:	7f 92       	push	r7
 d22:	8f 92       	push	r8
 d24:	9f 92       	push	r9
 d26:	af 92       	push	r10
 d28:	bf 92       	push	r11
 d2a:	cf 92       	push	r12
 d2c:	df 92       	push	r13
 d2e:	ef 92       	push	r14
 d30:	ff 92       	push	r15
 d32:	0f 93       	push	r16
 d34:	1f 93       	push	r17
 d36:	cf 93       	push	r28
 d38:	df 93       	push	r29
 d3a:	cd b7       	in	r28, 0x3d	; 61
 d3c:	de b7       	in	r29, 0x3e	; 62
 d3e:	c2 55       	subi	r28, 0x52	; 82
 d40:	d1 09       	sbc	r29, r1
 d42:	cd bf       	out	0x3d, r28	; 61
 d44:	de bf       	out	0x3e, r29	; 62
	twi_master_options_t opt48 = {
 d46:	0f 2e       	mov	r0, r31
 d48:	f9 e0       	ldi	r31, 0x09	; 9
 d4a:	7f 2e       	mov	r7, r31
 d4c:	f0 2d       	mov	r31, r0
 d4e:	8e 01       	movw	r16, r28
 d50:	0f 5f       	subi	r16, 0xFF	; 255
 d52:	1f 4f       	sbci	r17, 0xFF	; 255
 d54:	d8 01       	movw	r26, r16
 d56:	e7 2d       	mov	r30, r7
 d58:	1d 92       	st	X+, r1
 d5a:	ea 95       	dec	r30
 d5c:	e9 f7       	brne	.-6      	; 0xd58 <init_i2c+0x3e>
 d5e:	0f 2e       	mov	r0, r31
 d60:	f0 ea       	ldi	r31, 0xA0	; 160
 d62:	8f 2e       	mov	r8, r31
 d64:	f6 e8       	ldi	r31, 0x86	; 134
 d66:	9f 2e       	mov	r9, r31
 d68:	aa 24       	eor	r10, r10
 d6a:	a3 94       	inc	r10
 d6c:	b1 2c       	mov	r11, r1
 d6e:	f0 2d       	mov	r31, r0
 d70:	89 82       	std	Y+1, r8	; 0x01
 d72:	9a 82       	std	Y+2, r9	; 0x02
 d74:	ab 82       	std	Y+3, r10	; 0x03
 d76:	bc 82       	std	Y+4, r11	; 0x04
 d78:	0f 2e       	mov	r0, r31
 d7a:	f8 e4       	ldi	r31, 0x48	; 72
 d7c:	6f 2e       	mov	r6, r31
 d7e:	f0 2d       	mov	r31, r0
 d80:	69 86       	std	Y+9, r6	; 0x09
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
 d82:	0f 2e       	mov	r0, r31
 d84:	fb e9       	ldi	r31, 0x9B	; 155
 d86:	cf 2e       	mov	r12, r31
 d88:	d1 2c       	mov	r13, r1
 d8a:	e1 2c       	mov	r14, r1
 d8c:	f1 2c       	mov	r15, r1
 d8e:	f0 2d       	mov	r31, r0
 d90:	cd 82       	std	Y+5, r12	; 0x05
 d92:	de 82       	std	Y+6, r13	; 0x06
 d94:	ef 82       	std	Y+7, r14	; 0x07
 d96:	f8 86       	std	Y+8, r15	; 0x08
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
 d98:	60 e4       	ldi	r22, 0x40	; 64
 d9a:	86 e0       	ldi	r24, 0x06	; 6
 d9c:	f9 dc       	rcall	.-1550   	; 0x790 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
 d9e:	b8 01       	movw	r22, r16
 da0:	80 eb       	ldi	r24, 0xB0	; 176
 da2:	94 e0       	ldi	r25, 0x04	; 4
 da4:	48 df       	rcall	.-368    	; 0xc36 <twi_master_init>
		.speed = 100000,
		.chip = 0x48
	};
	twi_master_setup(&TWIF, &opt48);
	
	twi_master_options_t opt49 = {
 da6:	07 5f       	subi	r16, 0xF7	; 247
 da8:	1f 4f       	sbci	r17, 0xFF	; 255
 daa:	d8 01       	movw	r26, r16
 dac:	e7 2d       	mov	r30, r7
 dae:	1d 92       	st	X+, r1
 db0:	ea 95       	dec	r30
 db2:	e9 f7       	brne	.-6      	; 0xdae <init_i2c+0x94>
 db4:	8a 86       	std	Y+10, r8	; 0x0a
 db6:	9b 86       	std	Y+11, r9	; 0x0b
 db8:	ac 86       	std	Y+12, r10	; 0x0c
 dba:	bd 86       	std	Y+13, r11	; 0x0d
 dbc:	0f 2e       	mov	r0, r31
 dbe:	f9 e4       	ldi	r31, 0x49	; 73
 dc0:	5f 2e       	mov	r5, r31
 dc2:	f0 2d       	mov	r31, r0
 dc4:	5a 8a       	std	Y+18, r5	; 0x12
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
 dc6:	ce 86       	std	Y+14, r12	; 0x0e
 dc8:	df 86       	std	Y+15, r13	; 0x0f
 dca:	e8 8a       	std	Y+16, r14	; 0x10
 dcc:	f9 8a       	std	Y+17, r15	; 0x11
 dce:	60 e4       	ldi	r22, 0x40	; 64
 dd0:	86 e0       	ldi	r24, 0x06	; 6
 dd2:	de dc       	rcall	.-1604   	; 0x790 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
 dd4:	b8 01       	movw	r22, r16
 dd6:	80 eb       	ldi	r24, 0xB0	; 176
 dd8:	94 e0       	ldi	r25, 0x04	; 4
 dda:	2d df       	rcall	.-422    	; 0xc36 <twi_master_init>
		.speed = 100000,
		.chip = 0x49
	};
	twi_master_setup(&TWIF, &opt49);
	
	twi_master_options_t opt4A = {
 ddc:	07 5f       	subi	r16, 0xF7	; 247
 dde:	1f 4f       	sbci	r17, 0xFF	; 255
 de0:	d8 01       	movw	r26, r16
 de2:	e7 2d       	mov	r30, r7
 de4:	1d 92       	st	X+, r1
 de6:	ea 95       	dec	r30
 de8:	e9 f7       	brne	.-6      	; 0xde4 <init_i2c+0xca>
 dea:	8b 8a       	std	Y+19, r8	; 0x13
 dec:	9c 8a       	std	Y+20, r9	; 0x14
 dee:	ad 8a       	std	Y+21, r10	; 0x15
 df0:	be 8a       	std	Y+22, r11	; 0x16
 df2:	0f 2e       	mov	r0, r31
 df4:	fa e4       	ldi	r31, 0x4A	; 74
 df6:	4f 2e       	mov	r4, r31
 df8:	f0 2d       	mov	r31, r0
 dfa:	4b 8e       	std	Y+27, r4	; 0x1b
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
 dfc:	cf 8a       	std	Y+23, r12	; 0x17
 dfe:	d8 8e       	std	Y+24, r13	; 0x18
 e00:	e9 8e       	std	Y+25, r14	; 0x19
 e02:	fa 8e       	std	Y+26, r15	; 0x1a
 e04:	60 e4       	ldi	r22, 0x40	; 64
 e06:	86 e0       	ldi	r24, 0x06	; 6
 e08:	c3 dc       	rcall	.-1658   	; 0x790 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
 e0a:	b8 01       	movw	r22, r16
 e0c:	80 eb       	ldi	r24, 0xB0	; 176
 e0e:	94 e0       	ldi	r25, 0x04	; 4
 e10:	12 df       	rcall	.-476    	; 0xc36 <twi_master_init>
		.speed = 100000,
		.chip = 0x4A
	};
	twi_master_setup(&TWIF, &opt4A);
	
	twi_master_options_t opt4B = {
 e12:	07 5f       	subi	r16, 0xF7	; 247
 e14:	1f 4f       	sbci	r17, 0xFF	; 255
 e16:	d8 01       	movw	r26, r16
 e18:	1d 92       	st	X+, r1
 e1a:	7a 94       	dec	r7
 e1c:	e9 f7       	brne	.-6      	; 0xe18 <init_i2c+0xfe>
 e1e:	8c 8e       	std	Y+28, r8	; 0x1c
 e20:	9d 8e       	std	Y+29, r9	; 0x1d
 e22:	ae 8e       	std	Y+30, r10	; 0x1e
 e24:	bf 8e       	std	Y+31, r11	; 0x1f
 e26:	0f 2e       	mov	r0, r31
 e28:	fb e4       	ldi	r31, 0x4B	; 75
 e2a:	bf 2e       	mov	r11, r31
 e2c:	f0 2d       	mov	r31, r0
 e2e:	bc a2       	std	Y+36, r11	; 0x24
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
 e30:	c8 a2       	std	Y+32, r12	; 0x20
 e32:	d9 a2       	std	Y+33, r13	; 0x21
 e34:	ea a2       	std	Y+34, r14	; 0x22
 e36:	fb a2       	std	Y+35, r15	; 0x23
 e38:	60 e4       	ldi	r22, 0x40	; 64
 e3a:	86 e0       	ldi	r24, 0x06	; 6
 e3c:	a9 dc       	rcall	.-1710   	; 0x790 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
 e3e:	b8 01       	movw	r22, r16
 e40:	80 eb       	ldi	r24, 0xB0	; 176
 e42:	94 e0       	ldi	r25, 0x04	; 4
 e44:	f8 de       	rcall	.-528    	; 0xc36 <twi_master_init>
	 * 4: Comparater mode. 0=default
	 * 3: Comparater polarity. 0=default
	 * 2: Comparater Latch. 0=Nonlatching comparater
	 * 1: Comparater queue and disable. 00=Assert after one conversion
	 **/
	const uint8_t adc_setup_bytes[] = {0x42, 0xe3};
 e46:	82 e4       	ldi	r24, 0x42	; 66
 e48:	8d a3       	std	Y+37, r24	; 0x25
 e4a:	83 ee       	ldi	r24, 0xE3	; 227
 e4c:	8e a3       	std	Y+38, r24	; 0x26
	twi_package_t adc_setup_48;
	memset(&adc_setup_48,0,sizeof(twi_package_t));
 e4e:	05 5f       	subi	r16, 0xF5	; 245
 e50:	1f 4f       	sbci	r17, 0xFF	; 255
 e52:	0f 2e       	mov	r0, r31
 e54:	fb e0       	ldi	r31, 0x0B	; 11
 e56:	ff 2e       	mov	r15, r31
 e58:	f0 2d       	mov	r31, r0
 e5a:	f8 01       	movw	r30, r16
 e5c:	6f 2d       	mov	r22, r15
 e5e:	11 92       	st	Z+, r1
 e60:	6a 95       	dec	r22
 e62:	e9 f7       	brne	.-6      	; 0xe5e <init_i2c+0x144>
	adc_setup_48.addr[0]		= 0x01;
 e64:	71 e0       	ldi	r23, 0x01	; 1
 e66:	78 a7       	std	Y+40, r23	; 0x28
	adc_setup_48.addr_length	= sizeof(uint8_t);
 e68:	41 e0       	ldi	r20, 0x01	; 1
 e6a:	50 e0       	ldi	r21, 0x00	; 0
 e6c:	4b a7       	std	Y+43, r20	; 0x2b
 e6e:	5c a7       	std	Y+44, r21	; 0x2c
	adc_setup_48.chip			= 0x48;
 e70:	6f a2       	std	Y+39, r6	; 0x27
	adc_setup_48.buffer			= (void *)adc_setup_bytes;
 e72:	9e 01       	movw	r18, r28
 e74:	2b 5d       	subi	r18, 0xDB	; 219
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	2d a7       	std	Y+45, r18	; 0x2d
 e7a:	3e a7       	std	Y+46, r19	; 0x2e
	adc_setup_48.length			= sizeof(adc_setup_bytes);
 e7c:	82 e0       	ldi	r24, 0x02	; 2
 e7e:	90 e0       	ldi	r25, 0x00	; 0
 e80:	8f a7       	std	Y+47, r24	; 0x2f
 e82:	98 ab       	std	Y+48, r25	; 0x30
	
	twi_package_t adc_setup_49;
	memset(&adc_setup_49,0,sizeof(twi_package_t));
 e84:	de 01       	movw	r26, r28
 e86:	d2 96       	adiw	r26, 0x32	; 50
 e88:	fd 01       	movw	r30, r26
 e8a:	6f 2d       	mov	r22, r15
 e8c:	11 92       	st	Z+, r1
 e8e:	6a 95       	dec	r22
 e90:	e9 f7       	brne	.-6      	; 0xe8c <init_i2c+0x172>
	adc_setup_49.addr[0]		= 0x01;
 e92:	7b ab       	std	Y+51, r23	; 0x33
	adc_setup_49.addr_length	= sizeof(uint8_t);
 e94:	4e ab       	std	Y+54, r20	; 0x36
 e96:	5f ab       	std	Y+55, r21	; 0x37
	adc_setup_49.chip			= 0x49;
 e98:	5a aa       	std	Y+50, r5	; 0x32
	adc_setup_49.buffer			= (void *)adc_setup_bytes;
 e9a:	28 af       	std	Y+56, r18	; 0x38
 e9c:	39 af       	std	Y+57, r19	; 0x39
	adc_setup_49.length			= sizeof(adc_setup_bytes);
 e9e:	8a af       	std	Y+58, r24	; 0x3a
 ea0:	9b af       	std	Y+59, r25	; 0x3b
	
	twi_package_t adc_setup_4A;
	memset(&adc_setup_4A,0,sizeof(twi_package_t));
 ea2:	1b 96       	adiw	r26, 0x0b	; 11
 ea4:	fd 01       	movw	r30, r26
 ea6:	6f 2d       	mov	r22, r15
 ea8:	11 92       	st	Z+, r1
 eaa:	6a 95       	dec	r22
 eac:	e9 f7       	brne	.-6      	; 0xea8 <init_i2c+0x18e>
	adc_setup_4A.addr[0]		= 0x01;
 eae:	7e af       	std	Y+62, r23	; 0x3e
	adc_setup_4A.addr_length	= sizeof(uint8_t);
 eb0:	23 96       	adiw	r28, 0x03	; 3
 eb2:	4e af       	std	Y+62, r20	; 0x3e
 eb4:	5f af       	std	Y+63, r21	; 0x3f
 eb6:	23 97       	sbiw	r28, 0x03	; 3
	adc_setup_4A.chip			= 0x4A;
 eb8:	4d ae       	std	Y+61, r4	; 0x3d
	adc_setup_4A.buffer			= (void *)adc_setup_bytes;
 eba:	25 96       	adiw	r28, 0x05	; 5
 ebc:	2e af       	std	Y+62, r18	; 0x3e
 ebe:	3f af       	std	Y+63, r19	; 0x3f
 ec0:	25 97       	sbiw	r28, 0x05	; 5
	adc_setup_4A.length			= sizeof(adc_setup_bytes);
 ec2:	27 96       	adiw	r28, 0x07	; 7
 ec4:	8e af       	std	Y+62, r24	; 0x3e
 ec6:	9f af       	std	Y+63, r25	; 0x3f
 ec8:	27 97       	sbiw	r28, 0x07	; 7
	
	twi_package_t adc_setup_4B;
	memset(&adc_setup_4B,0,sizeof(twi_package_t));
 eca:	fe 01       	movw	r30, r28
 ecc:	e8 5b       	subi	r30, 0xB8	; 184
 ece:	ff 4f       	sbci	r31, 0xFF	; 255
 ed0:	df 01       	movw	r26, r30
 ed2:	1d 92       	st	X+, r1
 ed4:	fa 94       	dec	r15
 ed6:	e9 f7       	brne	.-6      	; 0xed2 <init_i2c+0x1b8>
	adc_setup_4B.addr[0]		= 0x01;
 ed8:	71 83       	std	Z+1, r23	; 0x01
	adc_setup_4B.addr_length	= sizeof(uint8_t);
 eda:	44 83       	std	Z+4, r20	; 0x04
 edc:	55 83       	std	Z+5, r21	; 0x05
	adc_setup_4B.chip			= 0x4B;
 ede:	b0 82       	st	Z, r11
	adc_setup_4B.buffer			= (void *)adc_setup_bytes;
 ee0:	26 83       	std	Z+6, r18	; 0x06
 ee2:	37 83       	std	Z+7, r19	; 0x07
	adc_setup_4B.length			= sizeof(adc_setup_bytes);
 ee4:	80 87       	std	Z+8, r24	; 0x08
 ee6:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
 ee8:	40 e0       	ldi	r20, 0x00	; 0
 eea:	b8 01       	movw	r22, r16
 eec:	80 eb       	ldi	r24, 0xB0	; 176
 eee:	94 e0       	ldi	r25, 0x04	; 4
 ef0:	b7 de       	rcall	.-658    	; 0xc60 <twi_master_transfer>
	
	uint8_t error = 0;
	if(twi_master_write(&TWIF, &adc_setup_48) != TWI_SUCCESS)
 ef2:	11 e0       	ldi	r17, 0x01	; 1
 ef4:	81 11       	cpse	r24, r1
 ef6:	01 c0       	rjmp	.+2      	; 0xefa <init_i2c+0x1e0>
 ef8:	10 e0       	ldi	r17, 0x00	; 0
 efa:	40 e0       	ldi	r20, 0x00	; 0
 efc:	be 01       	movw	r22, r28
 efe:	6e 5c       	subi	r22, 0xCE	; 206
 f00:	7f 4f       	sbci	r23, 0xFF	; 255
 f02:	80 eb       	ldi	r24, 0xB0	; 176
 f04:	94 e0       	ldi	r25, 0x04	; 4
 f06:	ac de       	rcall	.-680    	; 0xc60 <twi_master_transfer>
		error |= 1;
	if(twi_master_write(&TWIF, &adc_setup_49) != TWI_SUCCESS)
 f08:	81 11       	cpse	r24, r1
		error |= 2;
 f0a:	12 60       	ori	r17, 0x02	; 2
 f0c:	40 e0       	ldi	r20, 0x00	; 0
 f0e:	be 01       	movw	r22, r28
 f10:	63 5c       	subi	r22, 0xC3	; 195
 f12:	7f 4f       	sbci	r23, 0xFF	; 255
 f14:	80 eb       	ldi	r24, 0xB0	; 176
 f16:	94 e0       	ldi	r25, 0x04	; 4
 f18:	a3 de       	rcall	.-698    	; 0xc60 <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4A) != TWI_SUCCESS)
 f1a:	81 11       	cpse	r24, r1
		error |= 4;
 f1c:	14 60       	ori	r17, 0x04	; 4
 f1e:	40 e0       	ldi	r20, 0x00	; 0
 f20:	be 01       	movw	r22, r28
 f22:	68 5b       	subi	r22, 0xB8	; 184
 f24:	7f 4f       	sbci	r23, 0xFF	; 255
 f26:	80 eb       	ldi	r24, 0xB0	; 176
 f28:	94 e0       	ldi	r25, 0x04	; 4
 f2a:	9a de       	rcall	.-716    	; 0xc60 <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4B) != TWI_SUCCESS)
 f2c:	81 11       	cpse	r24, r1
		error |= 8;
 f2e:	18 60       	ori	r17, 0x08	; 8
	
	return error;
}
 f30:	81 2f       	mov	r24, r17
 f32:	ce 5a       	subi	r28, 0xAE	; 174
 f34:	df 4f       	sbci	r29, 0xFF	; 255
 f36:	cd bf       	out	0x3d, r28	; 61
 f38:	de bf       	out	0x3e, r29	; 62
 f3a:	df 91       	pop	r29
 f3c:	cf 91       	pop	r28
 f3e:	1f 91       	pop	r17
 f40:	0f 91       	pop	r16
 f42:	ff 90       	pop	r15
 f44:	ef 90       	pop	r14
 f46:	df 90       	pop	r13
 f48:	cf 90       	pop	r12
 f4a:	bf 90       	pop	r11
 f4c:	af 90       	pop	r10
 f4e:	9f 90       	pop	r9
 f50:	8f 90       	pop	r8
 f52:	7f 90       	pop	r7
 f54:	6f 90       	pop	r6
 f56:	5f 90       	pop	r5
 f58:	4f 90       	pop	r4
 f5a:	08 95       	ret

00000f5c <main>:


int main (void)
{
	board_init();	//Init board
 f5c:	00 dd       	rcall	.-1536   	; 0x95e <board_init>
	sysclk_init();
 f5e:	d3 db       	rcall	.-2138   	; 0x706 <sysclk_init>
	
	rtc_init();
 f60:	72 d9       	rcall	.-3356   	; 0x246 <rtc_init>
	
	
	
	//rtc_set_time(1038);
	
	init_spi_to_bbb();	//Setup SPI on Port C
 f62:	b9 da       	rcall	.-2702   	; 0x4d6 <init_spi_to_bbb>
	
	sei();            // enable global interrupts
 f64:	78 94       	sei
	int sensor_error = init_i2c();
 f66:	d9 de       	rcall	.-590    	; 0xd1a <init_i2c>
	state = 1;
 f68:	81 e0       	ldi	r24, 0x01	; 1
 f6a:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <state>
	sensor_status = 52;
 f6e:	84 e3       	ldi	r24, 0x34	; 52
 f70:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <sensor_status>
		//SPIC handler
		//When this is true, it means we have just received a byte
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		//_delay_ms(200);
		handle_spi_to_bbb();
 f74:	cd da       	rcall	.-2662   	; 0x510 <handle_spi_to_bbb>
			sensor_data[11] = time3 >> 24;
			
			
			lock = 1;
		}*/
	}
 f76:	fe cf       	rjmp	.-4      	; 0xf74 <main+0x18>

00000f78 <_exit>:
 f78:	f8 94       	cli

00000f7a <__stop_program>:
 f7a:	ff cf       	rjmp	.-2      	; 0xf7a <__stop_program>
