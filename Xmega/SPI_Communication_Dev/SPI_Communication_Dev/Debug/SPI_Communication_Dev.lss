
SPI_Communication_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00802014  00802014  000006ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054fd  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000414a  00000000  00000000  00005d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cfe  00000000  00000000  00009e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  0000bb80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00031390  00000000  00000000  0000bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a55  00000000  00000000  0003d12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0003db81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000de7  00000000  00000000  0003dc31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	ca c1       	rjmp	.+916    	; 0x3f6 <__vector_24>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 e4       	ldi	r30, 0x46	; 70
 21c:	f6 e0       	ldi	r31, 0x06	; 6
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 31       	cpi	r26, 0x14	; 20
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a4 e1       	ldi	r26, 0x14	; 20
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a2 34       	cpi	r26, 0x42	; 66
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	fb d0       	rcall	.+502    	; 0x438 <main>
 242:	ff c1       	rjmp	.+1022   	; 0x642 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <crc_io_checksum_byte_start>:
 * the module and get the calculated checksum.
 *
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 */
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 *
 */
static inline void crc_reset(void)
{
	// Reset module
	CRC_CTRL |= CRC_RESET_RESET0_gc;
 24a:	e0 ed       	ldi	r30, 0xD0	; 208
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	90 81       	ld	r25, Z
 250:	90 68       	ori	r25, 0x80	; 128
 252:	90 83       	st	Z, r25

	// Set initial checksum value
	CRC.CHECKSUM0 = crc_initial_value & 0xFF;
 254:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <__data_end>
 258:	50 91 15 20 	lds	r21, 0x2015	; 0x802015 <__data_end+0x1>
 25c:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <__data_end+0x2>
 260:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <__data_end+0x3>
 264:	44 83       	std	Z+4, r20	; 0x04
	CRC.CHECKSUM1 = (crc_initial_value >> 8) & 0xFF;
 266:	05 2f       	mov	r16, r21
 268:	16 2f       	mov	r17, r22
 26a:	27 2f       	mov	r18, r23
 26c:	33 27       	eor	r19, r19
 26e:	05 83       	std	Z+5, r16	; 0x05
	CRC.CHECKSUM2 = (crc_initial_value >> 16) & 0xFF;
 270:	8b 01       	movw	r16, r22
 272:	22 27       	eor	r18, r18
 274:	33 27       	eor	r19, r19
 276:	06 83       	std	Z+6, r16	; 0x06
	CRC.CHECKSUM3 = (crc_initial_value >> 24) & 0xFF;
 278:	47 2f       	mov	r20, r23
 27a:	55 27       	eor	r21, r21
 27c:	66 27       	eor	r22, r22
 27e:	77 27       	eor	r23, r23
 280:	47 83       	std	Z+7, r20	; 0x07

	crc_initial_value = 0;
 282:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <__data_end>
 286:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <__data_end+0x1>
 28a:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <__data_end+0x2>
 28e:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <__data_end+0x3>
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
	// Initialize CRC calculations on I/O interface
	crc_reset();
	// Enable CRC-32 if chosen
	if (crc_16_32 == CRC_32BIT) {
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	19 f4       	brne	.+6      	; 0x29c <crc_io_checksum_byte_start+0x56>
 * \note This cannot be changed while the busy flag is set.
 *
 */
static inline void crc_32_enable(void)
{
	CRC_CTRL |= CRC_CRC32_bm;
 296:	80 81       	ld	r24, Z
 298:	80 62       	ori	r24, 0x20	; 32
 29a:	80 83       	st	Z, r24
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
 29c:	e0 ed       	ldi	r30, 0xD0	; 208
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 7f       	andi	r24, 0xF0	; 240
 2a4:	80 83       	st	Z, r24
	CRC_CTRL |= source;
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
	if (crc_16_32 == CRC_32BIT) {
		crc_32_enable();
	}
	// Enable CRC module using the I/O interface
	crc_set_source(CRC_SOURCE_IO_gc);
}
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <crc_io_checksum_byte_stop>:
 *
 * \retval checksum checksum
 *
 */
uint32_t crc_io_checksum_byte_stop(void)
{
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;
 2ba:	e1 ed       	ldi	r30, 0xD1	; 209
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	80 83       	st	Z, r24
 * \retval false if module is not busy
 *
 */
static inline bool crc_is_busy(void)
{
	return ((CRC_STATUS & CRC_BUSY_bm) == CRC_BUSY_bm);
 2c4:	80 81       	ld	r24, Z
 * \return checksum checksum value
 */
static inline uint32_t crc_checksum_read(void)
{
	// Wait until the CRC conversion is finished
	while (crc_is_busy()) {
 2c6:	80 fd       	sbrc	r24, 0
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <crc_io_checksum_byte_stop+0x12>
		// Do nothing
	}

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
 2ca:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 2ce:	85 ff       	sbrs	r24, 5
 2d0:	2e c0       	rjmp	.+92     	; 0x32e <crc_io_checksum_byte_stop+0x7c>
 */
static inline uint32_t crc32_checksum_read(void)
{
	uint32_t checksum;

	checksum = ((uint32_t)CRC_CHECKSUM0 & 0x000000FF);
 2d2:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint32_t)CRC_CHECKSUM1 << 8) & 0x0000FF00);
 2d6:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	checksum |= (((uint32_t)CRC_CHECKSUM2 << 16) & 0x00FF0000);
 2da:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	checksum |= (((uint32_t)CRC_CHECKSUM3 << 24) & 0xFF000000);
 2de:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7000d7>
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	72 2b       	or	r23, r18
 2ea:	59 2b       	or	r21, r25
 2ec:	68 2b       	or	r22, r24
 2ee:	20 e2       	ldi	r18, 0x20	; 32
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	dc 01       	movw	r26, r24
		result = (result << 1) + (value & 1);
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	6a 01       	movw	r12, r20
 300:	7b 01       	movw	r14, r22
 302:	31 e0       	ldi	r19, 0x01	; 1
 304:	c3 22       	and	r12, r19
 306:	dd 24       	eor	r13, r13
 308:	ee 24       	eor	r14, r14
 30a:	ff 24       	eor	r15, r15
 30c:	8c 0d       	add	r24, r12
 30e:	9d 1d       	adc	r25, r13
 310:	ae 1d       	adc	r26, r14
 312:	bf 1d       	adc	r27, r15
		value >>= 1;
 314:	76 95       	lsr	r23
 316:	67 95       	ror	r22
 318:	57 95       	ror	r21
 31a:	47 95       	ror	r20
 31c:	21 50       	subi	r18, 0x01	; 1
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
 31e:	59 f7       	brne	.-42     	; 0x2f6 <crc_io_checksum_byte_stop+0x44>

	// Bit reverse the result (to comply with IEEE 802.3 CRC-32)
	checksum = crc_bit_revert(checksum);

	// Complement the result (to comply with IEEE 802.3 CRC-32)
	checksum = ~checksum;
 320:	bc 01       	movw	r22, r24
 322:	cd 01       	movw	r24, r26
 324:	60 95       	com	r22
 326:	70 95       	com	r23
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	08 c0       	rjmp	.+16     	; 0x33e <crc_io_checksum_byte_stop+0x8c>
 */
static inline uint16_t crc16_checksum_read(void)
{
	uint16_t checksum;
	checksum = 0;
	checksum = ((uint16_t)CRC_CHECKSUM0 & 0x00FF);
 32e:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint16_t)CRC_CHECKSUM1 << 8) & 0xFF00);
 332:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	78 2b       	or	r23, r24

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
		return crc32_checksum_read();
	} else {
		return crc16_checksum_read();
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
 33e:	e0 ed       	ldi	r30, 0xD0	; 208
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	20 81       	ld	r18, Z
 344:	20 7f       	andi	r18, 0xF0	; 240
 346:	20 83       	st	Z, r18
	CRC_CTRL |= source;
 348:	20 81       	ld	r18, Z
 34a:	20 83       	st	Z, r18
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;

	// Stop CRC and return checksum
	return crc_checksum_complete();
}
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	08 95       	ret

00000356 <crc_io_checksum>:
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 *
 * \return checksum checksum
 */
uint32_t crc_io_checksum(void *data, uint16_t len, enum crc_16_32_t crc_16_32)
{
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	ec 01       	movw	r28, r24
 360:	8b 01       	movw	r16, r22
 362:	84 2f       	mov	r24, r20
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);
 364:	70 df       	rcall	.-288    	; 0x246 <crc_io_checksum_byte_start>

	// Write data to DATAIN register
	while (len--) {
 366:	01 15       	cp	r16, r1
 368:	11 05       	cpc	r17, r1
 36a:	51 f0       	breq	.+20     	; 0x380 <crc_io_checksum+0x2a>
 36c:	be 01       	movw	r22, r28
 36e:	60 0f       	add	r22, r16
 370:	71 1f       	adc	r23, r17
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
 372:	e3 ed       	ldi	r30, 0xD3	; 211
 374:	f0 e0       	ldi	r31, 0x00	; 0
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
		crc_io_checksum_byte_add(*(uint8_t*)data);
 376:	89 91       	ld	r24, Y+
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
 378:	80 83       	st	Z, r24
{
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
 37a:	c6 17       	cp	r28, r22
 37c:	d7 07       	cpc	r29, r23
 37e:	d9 f7       	brne	.-10     	; 0x376 <crc_io_checksum+0x20>
		crc_io_checksum_byte_add(*(uint8_t*)data);
		data = (uint8_t*)data + 1;
	}

	// Return checksum
	return crc_io_checksum_byte_stop();
 380:	98 df       	rcall	.-208    	; 0x2b2 <crc_io_checksum_byte_stop>
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	fc 01       	movw	r30, r24
 392:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 398:	c6 2f       	mov	r28, r22
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	de 01       	movw	r26, r28
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <ioport_configure_port_pin+0x1a>
 3a2:	b5 95       	asr	r27
 3a4:	a7 95       	ror	r26
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <ioport_configure_port_pin+0x16>
 3aa:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 3ac:	50 83       	st	Z, r21
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 3b4:	28 30       	cpi	r18, 0x08	; 8
 3b6:	31 05       	cpc	r19, r1
 3b8:	89 f7       	brne	.-30     	; 0x39c <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 3ba:	40 ff       	sbrs	r20, 0
 3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 3be:	41 ff       	sbrs	r20, 1
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 3c2:	fc 01       	movw	r30, r24
 3c4:	65 83       	std	Z+5, r22	; 0x05
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 3c8:	fc 01       	movw	r30, r24
 3ca:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 3cc:	fc 01       	movw	r30, r24
 3ce:	61 83       	std	Z+1, r22	; 0x01
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 3d2:	fc 01       	movw	r30, r24
 3d4:	62 83       	std	Z+2, r22	; 0x02
	}
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 3dc:	43 e0       	ldi	r20, 0x03	; 3
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	68 e0       	ldi	r22, 0x08	; 8
 3e2:	80 ec       	ldi	r24, 0xC0	; 192
 3e4:	97 e0       	ldi	r25, 0x07	; 7
 3e6:	d2 df       	rcall	.-92     	; 0x38c <ioport_configure_port_pin>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	58 e1       	ldi	r21, 0x18	; 24
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	80 ec       	ldi	r24, 0xC0	; 192
 3f0:	97 e0       	ldi	r25, 0x07	; 7
 3f2:	cc cf       	rjmp	.-104    	; 0x38c <ioport_configure_port_pin>
 3f4:	08 95       	ret

000003f6 <__vector_24>:
uint16_t send_crc = 0;
uint8_t send_crc_idx = 0;



ISR(SPIC_INT_vect) {
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	08 b6       	in	r0, 0x38	; 56
 402:	0f 92       	push	r0
 404:	18 be       	out	0x38, r1	; 56
 406:	8f 93       	push	r24
	rx_byte = SPIC.DATA;
 408:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 40c:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <rx_byte>
	spic_flag = 1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <spic_flag>
}
 416:	8f 91       	pop	r24
 418:	0f 90       	pop	r0
 41a:	08 be       	out	0x38, r0	; 56
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <setUpSPIC>:

void setUpSPIC()
{
	PORTC.DIR = 0x40;		// MISO output; MOSI, SCK, SS inputs
 426:	80 e4       	ldi	r24, 0x40	; 64
 428:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0x40;		// slave mode, mode 0
 42c:	e0 ec       	ldi	r30, 0xC0	; 192
 42e:	f8 e0       	ldi	r31, 0x08	; 8
 430:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0x03;	// enable interrupts
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	81 83       	std	Z+1, r24	; 0x01
 436:	08 95       	ret

00000438 <main>:
}


int main (void)
{
	board_init();	//Init board
 438:	d1 df       	rcall	.-94     	; 0x3dc <board_init>
	//sysclk_init();	//Needed for CRC
	setUpSPIC();	//Setup SPI on Port C
 43a:	f5 df       	rcall	.-22     	; 0x426 <setUpSPIC>
	
	PMIC.CTRL = 0x04; // enable high priority interrupts
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();            // enable global interrupts
 442:	78 94       	sei
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		if(spic_flag){
			//Indicate start of incoming command
			if(rx_byte == SPI_TX_START){
				cmd_idx = CMD_DATA_SIZE;
 444:	0f 2e       	mov	r0, r31
 446:	f5 e0       	ldi	r31, 0x05	; 5
 448:	6f 2e       	mov	r6, r31
 44a:	f0 2d       	mov	r31, r0
					}
				}				
			}
			else if(cmd_finished){
				//On next pass we will be start pipelining data
				if(cmd_data[2] == 0){
 44c:	c7 e2       	ldi	r28, 0x27	; 39
 44e:	d0 e2       	ldi	r29, 0x20	; 32
				else if(cmd_data[2] == 1 || cmd_data[2] == 2){
					send_idx = 1;
					send_crc_length = send_idx;
				}
				else{
					memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
 450:	0f 2e       	mov	r0, r31
 452:	f4 e1       	ldi	r31, 0x14	; 20
 454:	7f 2e       	mov	r7, r31
 456:	f0 2d       	mov	r31, r0
					send_data[SENSOR_DATA_SIZE] = state;
					send_data[SENSOR_DATA_SIZE+1] = sensor_status;
					send_idx = SENSOR_DATA_SIZE+2;
 458:	0f 2e       	mov	r0, r31
 45a:	f6 e1       	ldi	r31, 0x16	; 22
 45c:	5f 2e       	mov	r5, r31
 45e:	f0 2d       	mov	r31, r0
					memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);//TODO: determine if this takes too long
					send_idx = SENSOR_DATA_SIZE;
					send_crc_length = send_idx;
				}
				else if(cmd_data[2] == 1 || cmd_data[2] == 2){
					send_idx = 1;
 460:	33 24       	eor	r3, r3
 462:	33 94       	inc	r3

			}
			
			//If we are receiving command, store it appropriately
			if(cmd_idx > 0){
				cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
 464:	0f 2e       	mov	r0, r31
 466:	f5 e0       	ldi	r31, 0x05	; 5
 468:	ef 2e       	mov	r14, r31
 46a:	f1 2c       	mov	r15, r1
 46c:	f0 2d       	mov	r31, r0
					if(calculated_crc == received_crc){
						SPIC.DATA = SPI_CRC_PASS;
						cmd_finished = 1;
					}
					else{
						SPIC.DATA = SPI_CRC_FAIL;
 46e:	00 ec       	ldi	r16, 0xC0	; 192
 470:	18 e0       	ldi	r17, 0x08	; 8
 472:	22 24       	eor	r2, r2
 474:	2a 94       	dec	r2
					send_crc_idx = 2;
				}
				
			}
			else if(send_crc_idx > 0){
				SPIC.DATA = send_crc >> ((2-send_crc_idx)*8);
 476:	68 94       	set
 478:	aa 24       	eor	r10, r10
 47a:	a1 f8       	bld	r10, 1
 47c:	b1 2c       	mov	r11, r1
				send_idx--;
				
				//Calculate CRC
				if(send_idx == 0){
					send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
					send_crc_idx = 2;
 47e:	68 94       	set
 480:	44 24       	eor	r4, r4
 482:	41 f8       	bld	r4, 1
				}
				else if(cmd_data[2] == 2){//send only sensor_status data
					SPIC.DATA = sensor_status;
				}
				else{//send all
					SPIC.DATA = send_data[SENSOR_DATA_SIZE+2-send_idx];
 484:	0f 2e       	mov	r0, r31
 486:	f6 e1       	ldi	r31, 0x16	; 22
 488:	8f 2e       	mov	r8, r31
 48a:	91 2c       	mov	r9, r1
 48c:	f0 2d       	mov	r31, r0
			
			
			if(send_idx > 0){
				
				if(cmd_data[2] == 0){//Send only sensor data
					SPIC.DATA = send_data[SENSOR_DATA_SIZE-send_idx];
 48e:	0f 2e       	mov	r0, r31
 490:	f4 e1       	ldi	r31, 0x14	; 20
 492:	cf 2e       	mov	r12, r31
 494:	d1 2c       	mov	r13, r1
 496:	f0 2d       	mov	r31, r0
		
		//SPIC handler
		//When this is true, it means we have just received a byte
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		if(spic_flag){
 498:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <spic_flag>
 49c:	88 23       	and	r24, r24
 49e:	e1 f3       	breq	.-8      	; 0x498 <main+0x60>
			//Indicate start of incoming command
			if(rx_byte == SPI_TX_START){
 4a0:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <rx_byte>
 4a4:	8a 3a       	cpi	r24, 0xAA	; 170
 4a6:	71 f4       	brne	.+28     	; 0x4c4 <main+0x8c>
				cmd_idx = CMD_DATA_SIZE;
 4a8:	60 92 24 20 	sts	0x2024, r6	; 0x802024 <cmd_idx>
				//Reset all the send variables/tmp storage
				cmd_finished = 0;
 4ac:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <cmd_finished>
				send_idx = 0;
 4b0:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <send_idx>
				send_crc_length = 0;
 4b4:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <send_crc_length>
				send_crc = 0;
 4b8:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <send_crc>
 4bc:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <send_crc+0x1>
				send_crc_idx = 0;
 4c0:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <send_crc_idx>

			}
			
			//If we are receiving command, store it appropriately
			if(cmd_idx > 0){
 4c4:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <cmd_idx>
 4c8:	88 23       	and	r24, r24
 4ca:	81 f1       	breq	.+96     	; 0x52c <main+0xf4>
				cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
 4cc:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <rx_byte>
 4d0:	f7 01       	movw	r30, r14
 4d2:	e8 1b       	sub	r30, r24
 4d4:	f1 09       	sbc	r31, r1
 4d6:	e9 5d       	subi	r30, 0xD9	; 217
 4d8:	ff 4d       	sbci	r31, 0xDF	; 223
 4da:	90 83       	st	Z, r25
				cmd_idx--;
 4dc:	81 50       	subi	r24, 0x01	; 1
 4de:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <cmd_idx>
				
				//Finished last storage of incoming data
				if(cmd_idx == 0){
 4e2:	81 11       	cpse	r24, r1
 4e4:	57 c0       	rjmp	.+174    	; 0x594 <main+0x15c>
					//Check recieved_crc against calculated CRC
					received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	98 2f       	mov	r25, r24
 4ec:	88 27       	eor	r24, r24
 4ee:	2b 81       	ldd	r18, Y+3	; 0x03
 4f0:	82 2b       	or	r24, r18
 4f2:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <received_crc>
 4f6:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <received_crc+0x1>
					calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	63 e0       	ldi	r22, 0x03	; 3
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	ce 01       	movw	r24, r28
 502:	29 df       	rcall	.-430    	; 0x356 <crc_io_checksum>
 504:	60 93 20 20 	sts	0x2020, r22	; 0x802020 <calculated_crc>
 508:	70 93 21 20 	sts	0x2021, r23	; 0x802021 <calculated_crc+0x1>
					//Send appropriate signal if passed/failed
					if(calculated_crc == received_crc){
 50c:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <received_crc>
 510:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <received_crc+0x1>
 514:	26 17       	cp	r18, r22
 516:	37 07       	cpc	r19, r23
 518:	31 f4       	brne	.+12     	; 0x526 <main+0xee>
						SPIC.DATA = SPI_CRC_PASS;
 51a:	8a ea       	ldi	r24, 0xAA	; 170
 51c:	f8 01       	movw	r30, r16
 51e:	83 83       	std	Z+3, r24	; 0x03
						cmd_finished = 1;
 520:	30 92 1d 20 	sts	0x201D, r3	; 0x80201d <cmd_finished>
 524:	37 c0       	rjmp	.+110    	; 0x594 <main+0x15c>
					}
					else{
						SPIC.DATA = SPI_CRC_FAIL;
 526:	f8 01       	movw	r30, r16
 528:	23 82       	std	Z+3, r2	; 0x03
 52a:	34 c0       	rjmp	.+104    	; 0x594 <main+0x15c>
					}
				}				
			}
			else if(cmd_finished){
 52c:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <cmd_finished>
 530:	88 23       	and	r24, r24
 532:	81 f1       	breq	.+96     	; 0x594 <main+0x15c>
				//On next pass we will be start pipelining data
				if(cmd_data[2] == 0){
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	81 11       	cpse	r24, r1
 538:	0e c0       	rjmp	.+28     	; 0x556 <main+0x11e>
					memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);//TODO: determine if this takes too long
 53a:	e0 e0       	ldi	r30, 0x00	; 0
 53c:	f0 e2       	ldi	r31, 0x20	; 32
 53e:	ac e2       	ldi	r26, 0x2C	; 44
 540:	b0 e2       	ldi	r27, 0x20	; 32
 542:	87 2d       	mov	r24, r7
 544:	01 90       	ld	r0, Z+
 546:	0d 92       	st	X+, r0
 548:	8a 95       	dec	r24
 54a:	e1 f7       	brne	.-8      	; 0x544 <main+0x10c>
					send_idx = SENSOR_DATA_SIZE;
 54c:	70 92 1c 20 	sts	0x201C, r7	; 0x80201c <send_idx>
					send_crc_length = send_idx;
 550:	70 92 1b 20 	sts	0x201B, r7	; 0x80201b <send_crc_length>
 554:	1d c0       	rjmp	.+58     	; 0x590 <main+0x158>
				}
				else if(cmd_data[2] == 1 || cmd_data[2] == 2){
 556:	81 50       	subi	r24, 0x01	; 1
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	28 f4       	brcc	.+10     	; 0x566 <main+0x12e>
					send_idx = 1;
 55c:	30 92 1c 20 	sts	0x201C, r3	; 0x80201c <send_idx>
					send_crc_length = send_idx;
 560:	30 92 1b 20 	sts	0x201B, r3	; 0x80201b <send_crc_length>
 564:	15 c0       	rjmp	.+42     	; 0x590 <main+0x158>
				}
				else{
					memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
 566:	e0 e0       	ldi	r30, 0x00	; 0
 568:	f0 e2       	ldi	r31, 0x20	; 32
 56a:	ac e2       	ldi	r26, 0x2C	; 44
 56c:	b0 e2       	ldi	r27, 0x20	; 32
 56e:	87 2d       	mov	r24, r7
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	8a 95       	dec	r24
 576:	e1 f7       	brne	.-8      	; 0x570 <main+0x138>
					send_data[SENSOR_DATA_SIZE] = state;
 578:	ec e2       	ldi	r30, 0x2C	; 44
 57a:	f0 e2       	ldi	r31, 0x20	; 32
 57c:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <state>
 580:	84 8b       	std	Z+20, r24	; 0x14
					send_data[SENSOR_DATA_SIZE+1] = sensor_status;
 582:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <sensor_status>
 586:	85 8b       	std	Z+21, r24	; 0x15
					send_idx = SENSOR_DATA_SIZE+2;
 588:	50 92 1c 20 	sts	0x201C, r5	; 0x80201c <send_idx>
					send_crc_length = send_idx;
 58c:	50 92 1b 20 	sts	0x201B, r5	; 0x80201b <send_crc_length>
				}
				cmd_finished = 0;
 590:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <cmd_finished>
			}
			
			
			if(send_idx > 0){
 594:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <send_idx>
 598:	88 23       	and	r24, r24
 59a:	a9 f1       	breq	.+106    	; 0x606 <main+0x1ce>
				
				if(cmd_data[2] == 0){//Send only sensor data
 59c:	9a 81       	ldd	r25, Y+2	; 0x02
 59e:	91 11       	cpse	r25, r1
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <main+0x17c>
					SPIC.DATA = send_data[SENSOR_DATA_SIZE-send_idx];
 5a2:	f6 01       	movw	r30, r12
 5a4:	e8 1b       	sub	r30, r24
 5a6:	f1 09       	sbc	r31, r1
 5a8:	e4 5d       	subi	r30, 0xD4	; 212
 5aa:	ff 4d       	sbci	r31, 0xDF	; 223
 5ac:	90 81       	ld	r25, Z
 5ae:	f8 01       	movw	r30, r16
 5b0:	93 83       	std	Z+3, r25	; 0x03
 5b2:	16 c0       	rjmp	.+44     	; 0x5e0 <main+0x1a8>
				}
				else if(cmd_data[2] == 1){//send only state data
 5b4:	91 30       	cpi	r25, 0x01	; 1
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <main+0x18a>
					SPIC.DATA = state;
 5b8:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <state>
 5bc:	f8 01       	movw	r30, r16
 5be:	93 83       	std	Z+3, r25	; 0x03
 5c0:	0f c0       	rjmp	.+30     	; 0x5e0 <main+0x1a8>
				}
				else if(cmd_data[2] == 2){//send only sensor_status data
 5c2:	92 30       	cpi	r25, 0x02	; 2
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <main+0x198>
					SPIC.DATA = sensor_status;
 5c6:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <sensor_status>
 5ca:	f8 01       	movw	r30, r16
 5cc:	93 83       	std	Z+3, r25	; 0x03
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <main+0x1a8>
				}
				else{//send all
					SPIC.DATA = send_data[SENSOR_DATA_SIZE+2-send_idx];
 5d0:	f4 01       	movw	r30, r8
 5d2:	e8 1b       	sub	r30, r24
 5d4:	f1 09       	sbc	r31, r1
 5d6:	e4 5d       	subi	r30, 0xD4	; 212
 5d8:	ff 4d       	sbci	r31, 0xDF	; 223
 5da:	90 81       	ld	r25, Z
 5dc:	f8 01       	movw	r30, r16
 5de:	93 83       	std	Z+3, r25	; 0x03
				}				
				send_idx--;
 5e0:	81 50       	subi	r24, 0x01	; 1
 5e2:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <send_idx>
				
				//Calculate CRC
				if(send_idx == 0){
 5e6:	81 11       	cpse	r24, r1
 5e8:	29 c0       	rjmp	.+82     	; 0x63c <main+0x204>
					send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
 5ea:	60 91 1b 20 	lds	r22, 0x201B	; 0x80201b <send_crc_length>
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	8c e2       	ldi	r24, 0x2C	; 44
 5f4:	90 e2       	ldi	r25, 0x20	; 32
 5f6:	af de       	rcall	.-674    	; 0x356 <crc_io_checksum>
 5f8:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <send_crc>
 5fc:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <send_crc+0x1>
					send_crc_idx = 2;
 600:	40 92 18 20 	sts	0x2018, r4	; 0x802018 <send_crc_idx>
 604:	1b c0       	rjmp	.+54     	; 0x63c <main+0x204>
				}
				
			}
			else if(send_crc_idx > 0){
 606:	40 91 18 20 	lds	r20, 0x2018	; 0x802018 <send_crc_idx>
 60a:	44 23       	and	r20, r20
 60c:	b9 f0       	breq	.+46     	; 0x63c <main+0x204>
				SPIC.DATA = send_crc >> ((2-send_crc_idx)*8);
 60e:	95 01       	movw	r18, r10
 610:	24 1b       	sub	r18, r20
 612:	31 09       	sbc	r19, r1
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	22 0f       	add	r18, r18
 61a:	33 1f       	adc	r19, r19
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <send_crc>
 624:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <send_crc+0x1>
 628:	02 c0       	rjmp	.+4      	; 0x62e <main+0x1f6>
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <main+0x1f2>
 632:	f8 01       	movw	r30, r16
 634:	83 83       	std	Z+3, r24	; 0x03
				send_crc_idx--;
 636:	41 50       	subi	r20, 0x01	; 1
 638:	40 93 18 20 	sts	0x2018, r20	; 0x802018 <send_crc_idx>
			}
			
			spic_flag = 0;
 63c:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <spic_flag>
 640:	2b cf       	rjmp	.-426    	; 0x498 <main+0x60>

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
