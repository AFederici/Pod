
SPI_Communication_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00001110  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000138  00802014  00802014  000011b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001228  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b6f8  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004edd  00000000  00000000  0000cb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c7c  00000000  00000000  00011a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  000166cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033099  00000000  00000000  00016de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001970  00000000  00000000  00049e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0004b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bf68  00000000  00000000  0004b9d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__vector_10>
      2a:	00 00       	nop
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__vector_11>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	58 c5       	rjmp	.+2736   	; 0xae6 <__vector_13>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3c c2       	rjmp	.+1144   	; 0x4da <__vector_24>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7a c5       	rjmp	.+2804   	; 0xbae <__vector_46>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c c5       	rjmp	.+2584   	; 0xb4a <__vector_76>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	32 c5       	rjmp	.+2660   	; 0xc12 <__vector_107>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e0 e1       	ldi	r30, 0x10	; 16
     21c:	f1 e1       	ldi	r31, 0x11	; 17
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a4 31       	cpi	r26, 0x14	; 20
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a4 e1       	ldi	r26, 0x14	; 20
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ac 34       	cpi	r26, 0x4C	; 76
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	ad d6       	rcall	.+3418   	; 0xf9c <main>
     242:	64 c7       	rjmp	.+3784   	; 0x110c <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	e0 e0       	ldi	r30, 0x00	; 0
     256:	f4 e0       	ldi	r31, 0x04	; 4
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	80 fd       	sbrc	r24, 0
     25c:	fd cf       	rjmp	.-6      	; 0x258 <rtc_get_time+0x12>
     25e:	8f b7       	in	r24, 0x3f	; 63
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	f8 94       	cli
     264:	29 81       	ldd	r18, Y+1	; 0x01
     266:	40 91 3d 20 	lds	r20, 0x203D	; 0x80203d <rtc_data>
     26a:	50 91 3e 20 	lds	r21, 0x203E	; 0x80203e <rtc_data+0x1>
     26e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     272:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	31 f4       	brne	.+12     	; 0x286 <rtc_get_time+0x40>
     27a:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
     27e:	30 ff       	sbrs	r19, 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <rtc_get_time+0x40>
     282:	4f 5f       	subi	r20, 0xFF	; 255
     284:	5f 4f       	sbci	r21, 0xFF	; 255
     286:	2f bf       	out	0x3f, r18	; 63
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	ba 01       	movw	r22, r20
     28e:	55 27       	eor	r21, r21
     290:	44 27       	eor	r20, r20
     292:	a0 e0       	ldi	r26, 0x00	; 0
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	8a 01       	movw	r16, r20
     298:	9b 01       	movw	r18, r22
     29a:	08 2b       	or	r16, r24
     29c:	19 2b       	or	r17, r25
     29e:	2a 2b       	or	r18, r26
     2a0:	3b 2b       	or	r19, r27
     2a2:	c9 01       	movw	r24, r18
     2a4:	b8 01       	movw	r22, r16
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2bc:	64 e0       	ldi	r22, 0x04	; 4
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	87 d2       	rcall	.+1294   	; 0x7d0 <sysclk_enable_module>
	RTC.PER = 0xffff;
     2c2:	e0 e0       	ldi	r30, 0x00	; 0
     2c4:	f4 e0       	ldi	r31, 0x04	; 4
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	9f ef       	ldi	r25, 0xFF	; 255
     2ca:	82 87       	std	Z+10, r24	; 0x0a
     2cc:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     2ce:	10 86       	std	Z+8, r1	; 0x08
     2d0:	11 86       	std	Z+9, r1	; 0x09
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     2d2:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <sleepmgr_locks+0x3>
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	09 f4       	brne	.+2      	; 0x2dc <rtc_init+0x2a>
     2da:	ff cf       	rjmp	.-2      	; 0x2da <rtc_init+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2dc:	8f b7       	in	r24, 0x3f	; 63
     2de:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2e0:	f8 94       	cli
	return flags;
     2e2:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     2e4:	e7 e3       	ldi	r30, 0x37	; 55
     2e6:	f0 e2       	ldi	r31, 0x20	; 32
     2e8:	83 81       	ldd	r24, Z+3	; 0x03
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ee:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     2f0:	e0 e0       	ldi	r30, 0x00	; 0
     2f2:	f4 e0       	ldi	r31, 0x04	; 4
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     2f8:	80 83       	st	Z, r24
}
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	08 b6       	in	r0, 0x38	; 56
     30e:	0f 92       	push	r0
     310:	18 be       	out	0x38, r1	; 56
     312:	0b b6       	in	r0, 0x3b	; 59
     314:	0f 92       	push	r0
     316:	1b be       	out	0x3b, r1	; 59
     318:	8f 93       	push	r24
     31a:	9f 93       	push	r25
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
	rtc_data.counter_high++;
     320:	ed e3       	ldi	r30, 0x3D	; 61
     322:	f0 e2       	ldi	r31, 0x20	; 32
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	80 83       	st	Z, r24
     32c:	91 83       	std	Z+1, r25	; 0x01
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	0f 90       	pop	r0
     338:	0b be       	out	0x3b, r0	; 59
     33a:	0f 90       	pop	r0
     33c:	08 be       	out	0x38, r0	; 56
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	08 b6       	in	r0, 0x38	; 56
     354:	0f 92       	push	r0
     356:	18 be       	out	0x38, r1	; 56
     358:	09 b6       	in	r0, 0x39	; 57
     35a:	0f 92       	push	r0
     35c:	19 be       	out	0x39, r1	; 57
     35e:	0b b6       	in	r0, 0x3b	; 59
     360:	0f 92       	push	r0
     362:	1b be       	out	0x3b, r1	; 59
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     388:	ed e3       	ldi	r30, 0x3D	; 61
     38a:	f0 e2       	ldi	r31, 0x20	; 32
     38c:	80 81       	ld	r24, Z
     38e:	91 81       	ldd	r25, Z+1	; 0x01
     390:	22 81       	ldd	r18, Z+2	; 0x02
     392:	33 81       	ldd	r19, Z+3	; 0x03
     394:	82 17       	cp	r24, r18
     396:	93 07       	cpc	r25, r19
     398:	f0 f1       	brcs	.+124    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     3a0:	e0 91 43 20 	lds	r30, 0x2043	; 0x802043 <rtc_data+0x6>
     3a4:	f0 91 44 20 	lds	r31, 0x2044	; 0x802044 <rtc_data+0x7>
     3a8:	30 97       	sbiw	r30, 0x00	; 0
     3aa:	a9 f1       	breq	.+106    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     3ac:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     3b0:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	dc 01       	movw	r26, r24
     3ba:	99 27       	eor	r25, r25
     3bc:	88 27       	eor	r24, r24
					| RTC.CNT;
     3be:	ab 01       	movw	r20, r22
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3c4:	8c 01       	movw	r16, r24
     3c6:	9d 01       	movw	r18, r26
     3c8:	04 2b       	or	r16, r20
     3ca:	15 2b       	or	r17, r21
     3cc:	26 2b       	or	r18, r22
     3ce:	37 2b       	or	r19, r23
     3d0:	c9 01       	movw	r24, r18
     3d2:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3d4:	ad e3       	ldi	r26, 0x3D	; 61
     3d6:	b0 e2       	ldi	r27, 0x20	; 32
     3d8:	12 96       	adiw	r26, 0x02	; 2
     3da:	0d 91       	ld	r16, X+
     3dc:	1c 91       	ld	r17, X
     3de:	13 97       	sbiw	r26, 0x03	; 3
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	98 01       	movw	r18, r16
     3e6:	11 27       	eor	r17, r17
     3e8:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     3ea:	14 96       	adiw	r26, 0x04	; 4
     3ec:	cd 90       	ld	r12, X+
     3ee:	dc 90       	ld	r13, X
     3f0:	15 97       	sbiw	r26, 0x05	; 5
     3f2:	e1 2c       	mov	r14, r1
     3f4:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3f6:	0c 29       	or	r16, r12
     3f8:	1d 29       	or	r17, r13
     3fa:	2e 29       	or	r18, r14
     3fc:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     3fe:	06 17       	cp	r16, r22
     400:	17 07       	cpc	r17, r23
     402:	28 07       	cpc	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	30 f0       	brcs	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				count = alarm + 1;
     408:	c9 01       	movw	r24, r18
     40a:	b8 01       	movw	r22, r16
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	8f 4f       	sbci	r24, 0xFF	; 255
     412:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     414:	19 95       	eicall
		}
	}
}
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	0f 90       	pop	r0
     43c:	0b be       	out	0x3b, r0	; 59
     43e:	0f 90       	pop	r0
     440:	09 be       	out	0x39, r0	; 57
     442:	0f 90       	pop	r0
     444:	08 be       	out	0x38, r0	; 56
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <circular_buffer_push>:
 */ 

#include "circular_buffer.h"

inline void circular_buffer_push(circular_buffer_t * cb, uint8_t data){
	cb->buffer[cb->front] = data;
     450:	fc 01       	movw	r30, r24
     452:	e8 58       	subi	r30, 0x88	; 136
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	20 81       	ld	r18, Z
     458:	dc 01       	movw	r26, r24
     45a:	a2 0f       	add	r26, r18
     45c:	b1 1d       	adc	r27, r1
     45e:	6c 93       	st	X, r22
	cb->front++;
     460:	80 81       	ld	r24, Z
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	80 83       	st	Z, r24
	cb->front =  cb->front % MAX_BUFFER_SIZE;
     466:	90 81       	ld	r25, Z
     468:	89 e8       	ldi	r24, 0x89	; 137
     46a:	98 9f       	mul	r25, r24
     46c:	81 2d       	mov	r24, r1
     46e:	11 24       	eor	r1, r1
     470:	82 95       	swap	r24
     472:	86 95       	lsr	r24
     474:	86 95       	lsr	r24
     476:	83 70       	andi	r24, 0x03	; 3
     478:	28 e7       	ldi	r18, 0x78	; 120
     47a:	82 9f       	mul	r24, r18
     47c:	90 19       	sub	r25, r0
     47e:	11 24       	eor	r1, r1
     480:	90 83       	st	Z, r25
     482:	08 95       	ret

00000484 <circular_buffer_pop>:
}
inline uint8_t circular_buffer_pop(circular_buffer_t * cb){
	uint8_t ret = cb->buffer[cb->back];
     484:	fc 01       	movw	r30, r24
     486:	e7 58       	subi	r30, 0x87	; 135
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	20 81       	ld	r18, Z
     48c:	dc 01       	movw	r26, r24
     48e:	a2 0f       	add	r26, r18
     490:	b1 1d       	adc	r27, r1
     492:	8c 91       	ld	r24, X
	cb->back++;
     494:	90 81       	ld	r25, Z
     496:	9f 5f       	subi	r25, 0xFF	; 255
     498:	90 83       	st	Z, r25
	cb->back = cb->back % MAX_BUFFER_SIZE;
     49a:	20 81       	ld	r18, Z
     49c:	99 e8       	ldi	r25, 0x89	; 137
     49e:	29 9f       	mul	r18, r25
     4a0:	91 2d       	mov	r25, r1
     4a2:	11 24       	eor	r1, r1
     4a4:	92 95       	swap	r25
     4a6:	96 95       	lsr	r25
     4a8:	96 95       	lsr	r25
     4aa:	93 70       	andi	r25, 0x03	; 3
     4ac:	38 e7       	ldi	r19, 0x78	; 120
     4ae:	93 9f       	mul	r25, r19
     4b0:	20 19       	sub	r18, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	20 83       	st	Z, r18
	return ret;
}
     4b6:	08 95       	ret

000004b8 <circular_buffer_size>:

inline uint8_t circular_buffer_size(circular_buffer_t * cb){
	return abs(cb->front - cb->back);
     4b8:	fc 01       	movw	r30, r24
     4ba:	e8 58       	subi	r30, 0x88	; 136
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	20 81       	ld	r18, Z
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	80 81       	ld	r24, Z
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	28 1b       	sub	r18, r24
     4c8:	31 09       	sbc	r19, r1
     4ca:	c9 01       	movw	r24, r18
     4cc:	99 23       	and	r25, r25
     4ce:	24 f4       	brge	.+8      	; 0x4d8 <circular_buffer_size+0x20>
     4d0:	88 27       	eor	r24, r24
     4d2:	99 27       	eor	r25, r25
     4d4:	82 1b       	sub	r24, r18
     4d6:	93 0b       	sbc	r25, r19
}
     4d8:	08 95       	ret

000004da <__vector_24>:
uint8_t send_idx = 0;
uint8_t send_crc_length = 0;//set equal to maximum value of send_idx
uint16_t send_crc = 0;
uint8_t send_crc_idx = 0;

ISR(SPIC_INT_vect) {
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	08 b6       	in	r0, 0x38	; 56
     4e6:	0f 92       	push	r0
     4e8:	18 be       	out	0x38, r1	; 56
     4ea:	09 b6       	in	r0, 0x39	; 57
     4ec:	0f 92       	push	r0
     4ee:	19 be       	out	0x39, r1	; 57
     4f0:	0b b6       	in	r0, 0x3b	; 59
     4f2:	0f 92       	push	r0
     4f4:	1b be       	out	0x3b, r1	; 59
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
	//Add received byte to rx buffer
	circular_buffer_push(&rx_buff, SPIC.DATA);
     50e:	60 91 c3 08 	lds	r22, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     512:	85 e4       	ldi	r24, 0x45	; 69
     514:	90 e2       	ldi	r25, 0x20	; 32
     516:	9c df       	rcall	.-200    	; 0x450 <circular_buffer_push>
	
	//Send tx byte if there is one to send
	if(circular_buffer_size(&tx_buff)){
     518:	84 ec       	ldi	r24, 0xC4	; 196
     51a:	90 e2       	ldi	r25, 0x20	; 32
     51c:	cd df       	rcall	.-102    	; 0x4b8 <circular_buffer_size>
     51e:	88 23       	and	r24, r24
     520:	29 f0       	breq	.+10     	; 0x52c <__vector_24+0x52>
		SPIC.DATA = circular_buffer_pop(&tx_buff);
     522:	84 ec       	ldi	r24, 0xC4	; 196
     524:	90 e2       	ldi	r25, 0x20	; 32
     526:	ae df       	rcall	.-164    	; 0x484 <circular_buffer_pop>
     528:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	}
	spi_isr = 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <spi_isr>
}
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	7f 91       	pop	r23
     540:	6f 91       	pop	r22
     542:	5f 91       	pop	r21
     544:	4f 91       	pop	r20
     546:	3f 91       	pop	r19
     548:	2f 91       	pop	r18
     54a:	0f 90       	pop	r0
     54c:	0b be       	out	0x3b, r0	; 59
     54e:	0f 90       	pop	r0
     550:	09 be       	out	0x39, r0	; 57
     552:	0f 90       	pop	r0
     554:	08 be       	out	0x38, r0	; 56
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <init_spi_to_bbb>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     560:	68 e0       	ldi	r22, 0x08	; 8
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	35 d1       	rcall	.+618    	; 0x7d0 <sysclk_enable_module>

void init_spi_to_bbb(){
	sysclk_enable_peripheral_clock( &SPIC ); 
	PORTC.DIR = 0x40;		// MISO output; MOSI, SCK, SS inputs
     566:	80 e4       	ldi	r24, 0x40	; 64
     568:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0x40;		// slave mode, mode 0
     56c:	e0 ec       	ldi	r30, 0xC0	; 192
     56e:	f8 e0       	ldi	r31, 0x08	; 8
     570:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0x03;	// enable interrupts
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	81 83       	std	Z+1, r24	; 0x01
	PMIC.CTRL = 0x04;       // enable high priority interrupts
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	memset(&rx_buff, 0, sizeof(circular_buffer_t));
     57c:	8a e7       	ldi	r24, 0x7A	; 122
     57e:	e5 e4       	ldi	r30, 0x45	; 69
     580:	f0 e2       	ldi	r31, 0x20	; 32
     582:	df 01       	movw	r26, r30
     584:	98 2f       	mov	r25, r24
     586:	1d 92       	st	X+, r1
     588:	9a 95       	dec	r25
     58a:	e9 f7       	brne	.-6      	; 0x586 <init_spi_to_bbb+0x26>
	memset(&tx_buff, 0, sizeof(circular_buffer_t));
     58c:	e4 ec       	ldi	r30, 0xC4	; 196
     58e:	f0 e2       	ldi	r31, 0x20	; 32
     590:	df 01       	movw	r26, r30
     592:	1d 92       	st	X+, r1
     594:	8a 95       	dec	r24
     596:	e9 f7       	brne	.-6      	; 0x592 <init_spi_to_bbb+0x32>
     598:	08 95       	ret

0000059a <handle_spi_to_bbb>:
	
	
}
void handle_spi_to_bbb(){
     59a:	9f 92       	push	r9
     59c:	af 92       	push	r10
     59e:	bf 92       	push	r11
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
		rx_byte = circular_buffer_pop(&rx_buff);
		
		if(rx_byte == SPI_TX_START){
			cmd_idx = CMD_DATA_SIZE;
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f5 e0       	ldi	r31, 0x05	; 5
     5b4:	bf 2e       	mov	r11, r31
     5b6:	f0 2d       	mov	r31, r0
			cmd_finished = 0;
			send_idx = 0;
			send_crc_length = 0;
			send_crc = 0;
			send_crc_idx = 0;
			spi_transfer = 1;
     5b8:	cc 24       	eor	r12, r12
     5ba:	c3 94       	inc	r12
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
     5bc:	0f 2e       	mov	r0, r31
     5be:	fc e0       	ldi	r31, 0x0C	; 12
     5c0:	af 2e       	mov	r10, r31
     5c2:	f0 2d       	mov	r31, r0
				send_data[SENSOR_DATA_SIZE] = sensor_status;
				send_data[SENSOR_DATA_SIZE+1] = state;
				send_idx = SENSOR_DATA_SIZE+2;
     5c4:	0f 2e       	mov	r0, r31
     5c6:	fe e0       	ldi	r31, 0x0E	; 14
     5c8:	df 2e       	mov	r13, r31
     5ca:	f0 2d       	mov	r31, r0
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
     5cc:	c5 e0       	ldi	r28, 0x05	; 5
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
			cmd_idx--;
			//Finished last storage of incoming data
			if(cmd_idx == 0){
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
     5d0:	0f eb       	ldi	r16, 0xBF	; 191
     5d2:	10 e2       	ldi	r17, 0x20	; 32
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
					SPIC.DATA = SPI_CRC_PASS;
     5d4:	0f 2e       	mov	r0, r31
     5d6:	f0 ec       	ldi	r31, 0xC0	; 192
     5d8:	ef 2e       	mov	r14, r31
     5da:	f8 e0       	ldi	r31, 0x08	; 8
     5dc:	ff 2e       	mov	r15, r31
     5de:	f0 2d       	mov	r31, r0
     5e0:	0f 2e       	mov	r0, r31
     5e2:	fa ea       	ldi	r31, 0xAA	; 170
     5e4:	9f 2e       	mov	r9, r31
     5e6:	f0 2d       	mov	r31, r0
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
     5e8:	9d c0       	rjmp	.+314    	; 0x724 <handle_spi_to_bbb+0x18a>
		rx_byte = circular_buffer_pop(&rx_buff);
     5ea:	85 e4       	ldi	r24, 0x45	; 69
     5ec:	90 e2       	ldi	r25, 0x20	; 32
     5ee:	4a df       	rcall	.-364    	; 0x484 <circular_buffer_pop>
     5f0:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <rx_byte>
		
		if(rx_byte == SPI_TX_START){
     5f4:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <rx_byte>
     5f8:	8a 3a       	cpi	r24, 0xAA	; 170
     5fa:	81 f4       	brne	.+32     	; 0x61c <handle_spi_to_bbb+0x82>
			cmd_idx = CMD_DATA_SIZE;
     5fc:	b0 92 1e 20 	sts	0x201E, r11	; 0x80201e <cmd_idx>
			//Reset all the send variables/tmp storage
			cmd_finished = 0;
     600:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <cmd_finished>
			send_idx = 0;
     604:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <send_idx>
			send_crc_length = 0;
     608:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <send_crc_length>
			send_crc = 0;
     60c:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <send_crc>
     610:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <send_crc+0x1>
			send_crc_idx = 0;
     614:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <__data_end>
			spi_transfer = 1;
     618:	c0 92 33 20 	sts	0x2033, r12	; 0x802033 <spi_transfer>
		}
	
		//If we are receiving command, store it appropriately
		if(cmd_idx > 0){
     61c:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <cmd_idx>
     620:	88 23       	and	r24, r24
     622:	b1 f1       	breq	.+108    	; 0x690 <handle_spi_to_bbb+0xf6>
		
			cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
     624:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <rx_byte>
     628:	fe 01       	movw	r30, r28
     62a:	e8 1b       	sub	r30, r24
     62c:	f1 09       	sbc	r31, r1
     62e:	e1 54       	subi	r30, 0x41	; 65
     630:	ff 4d       	sbci	r31, 0xDF	; 223
     632:	90 83       	st	Z, r25
			cmd_idx--;
     634:	81 50       	subi	r24, 0x01	; 1
     636:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <cmd_idx>
			//Finished last storage of incoming data
			if(cmd_idx == 0){
     63a:	81 11       	cpse	r24, r1
     63c:	71 c0       	rjmp	.+226    	; 0x720 <handle_spi_to_bbb+0x186>
				
				//Check recieved_crc against calculated CRC
				received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
     63e:	f8 01       	movw	r30, r16
     640:	84 81       	ldd	r24, Z+4	; 0x04
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	98 2f       	mov	r25, r24
     646:	88 27       	eor	r24, r24
     648:	23 81       	ldd	r18, Z+3	; 0x03
     64a:	82 2b       	or	r24, r18
     64c:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <received_crc>
     650:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <received_crc+0x1>
				calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	63 e0       	ldi	r22, 0x03	; 3
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	c8 01       	movw	r24, r16
     65c:	57 d1       	rcall	.+686    	; 0x90c <crc_io_checksum>
     65e:	60 93 1a 20 	sts	0x201A, r22	; 0x80201a <calculated_crc>
     662:	70 93 1b 20 	sts	0x201B, r23	; 0x80201b <calculated_crc+0x1>
				//Send appropriate signal if passed/failed
				if(calculated_crc == received_crc){
     666:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <received_crc>
     66a:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <received_crc+0x1>
     66e:	26 17       	cp	r18, r22
     670:	37 07       	cpc	r19, r23
     672:	49 f4       	brne	.+18     	; 0x686 <handle_spi_to_bbb+0xec>
					SPIC.DATA = SPI_CRC_PASS;
     674:	f7 01       	movw	r30, r14
     676:	93 82       	std	Z+3, r9	; 0x03
					
					circular_buffer_push(&tx_buff,SPI_CRC_PASS);
     678:	69 2d       	mov	r22, r9
     67a:	84 ec       	ldi	r24, 0xC4	; 196
     67c:	90 e2       	ldi	r25, 0x20	; 32
     67e:	e8 de       	rcall	.-560    	; 0x450 <circular_buffer_push>
					cmd_finished = 1;
     680:	c0 92 19 20 	sts	0x2019, r12	; 0x802019 <cmd_finished>
     684:	4d c0       	rjmp	.+154    	; 0x720 <handle_spi_to_bbb+0x186>
				}
				else{
					
					//SPIC.DATA = SPI_CRC_FAIL;
					circular_buffer_push(&tx_buff,SPI_CRC_FAIL);
     686:	60 ef       	ldi	r22, 0xF0	; 240
     688:	84 ec       	ldi	r24, 0xC4	; 196
     68a:	90 e2       	ldi	r25, 0x20	; 32
     68c:	e1 de       	rcall	.-574    	; 0x450 <circular_buffer_push>
     68e:	48 c0       	rjmp	.+144    	; 0x720 <handle_spi_to_bbb+0x186>
				}
			}
		}
		else if(cmd_finished){
     690:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <cmd_finished>
     694:	88 23       	and	r24, r24
     696:	09 f4       	brne	.+2      	; 0x69a <handle_spi_to_bbb+0x100>
     698:	43 c0       	rjmp	.+134    	; 0x720 <handle_spi_to_bbb+0x186>
			else if(cmd_data[2] == 2){
				send_data[0] = state;
				send_idx = 1;
			}
			else{*/
				memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
     69a:	e8 e0       	ldi	r30, 0x08	; 8
     69c:	f0 e2       	ldi	r31, 0x20	; 32
     69e:	ae e3       	ldi	r26, 0x3E	; 62
     6a0:	b1 e2       	ldi	r27, 0x21	; 33
     6a2:	8a 2d       	mov	r24, r10
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <handle_spi_to_bbb+0x10a>
				send_data[SENSOR_DATA_SIZE] = sensor_status;
     6ac:	ee e3       	ldi	r30, 0x3E	; 62
     6ae:	f1 e2       	ldi	r31, 0x21	; 33
     6b0:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <sensor_status>
     6b4:	84 87       	std	Z+12, r24	; 0x0c
				send_data[SENSOR_DATA_SIZE+1] = state;
     6b6:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <state>
     6ba:	85 87       	std	Z+13, r24	; 0x0d
				send_idx = SENSOR_DATA_SIZE+2;
     6bc:	d0 92 18 20 	sts	0x2018, r13	; 0x802018 <send_idx>
			//}
			send_crc_length = send_idx;
     6c0:	d0 92 17 20 	sts	0x2017, r13	; 0x802017 <send_crc_length>
			cmd_finished = 0;
     6c4:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <cmd_finished>
			
			while(send_idx){
     6c8:	25 c0       	rjmp	.+74     	; 0x714 <handle_spi_to_bbb+0x17a>
				//SPIC.DATA = send_data[send_crc_length-send_idx];
				circular_buffer_push(&tx_buff, send_data[send_crc_length-send_idx]);
     6ca:	e0 91 17 20 	lds	r30, 0x2017	; 0x802017 <send_crc_length>
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	e8 1b       	sub	r30, r24
     6d2:	f1 09       	sbc	r31, r1
     6d4:	e2 5c       	subi	r30, 0xC2	; 194
     6d6:	fe 4d       	sbci	r31, 0xDE	; 222
     6d8:	60 81       	ld	r22, Z
     6da:	84 ec       	ldi	r24, 0xC4	; 196
     6dc:	90 e2       	ldi	r25, 0x20	; 32
     6de:	b8 de       	rcall	.-656    	; 0x450 <circular_buffer_push>
				send_idx--;
     6e0:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <send_idx>
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <send_idx>
				
				//Calculate CRC
				if(send_idx == 0){
     6ea:	81 11       	cpse	r24, r1
     6ec:	13 c0       	rjmp	.+38     	; 0x714 <handle_spi_to_bbb+0x17a>
					send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
     6ee:	60 91 17 20 	lds	r22, 0x2017	; 0x802017 <send_crc_length>
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	8e e3       	ldi	r24, 0x3E	; 62
     6f8:	91 e2       	ldi	r25, 0x21	; 33
     6fa:	08 d1       	rcall	.+528    	; 0x90c <crc_io_checksum>
     6fc:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <send_crc>
     700:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <send_crc+0x1>
					circular_buffer_push(&tx_buff, send_crc);
     704:	84 ec       	ldi	r24, 0xC4	; 196
     706:	90 e2       	ldi	r25, 0x20	; 32
     708:	a3 de       	rcall	.-698    	; 0x450 <circular_buffer_push>
					circular_buffer_push(&tx_buff, send_crc>> 8);
     70a:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <send_crc+0x1>
     70e:	84 ec       	ldi	r24, 0xC4	; 196
     710:	90 e2       	ldi	r25, 0x20	; 32
     712:	9e de       	rcall	.-708    	; 0x450 <circular_buffer_push>
				send_idx = SENSOR_DATA_SIZE+2;
			//}
			send_crc_length = send_idx;
			cmd_finished = 0;
			
			while(send_idx){
     714:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <send_idx>
     718:	81 11       	cpse	r24, r1
     71a:	d7 cf       	rjmp	.-82     	; 0x6ca <handle_spi_to_bbb+0x130>
					circular_buffer_push(&tx_buff, send_crc);
					circular_buffer_push(&tx_buff, send_crc>> 8);
				}
			}
			
			spi_transfer = 0;
     71c:	10 92 33 20 	sts	0x2033, r1	; 0x802033 <spi_transfer>
		}
		spi_isr = 0;
     720:	10 92 34 20 	sts	0x2034, r1	; 0x802034 <spi_isr>
	
	
}
void handle_spi_to_bbb(){
	//Loop while we have data in the RX buffer to process
	while(circular_buffer_size(&rx_buff)){
     724:	85 e4       	ldi	r24, 0x45	; 69
     726:	90 e2       	ldi	r25, 0x20	; 32
     728:	c7 de       	rcall	.-626    	; 0x4b8 <circular_buffer_size>
     72a:	81 11       	cpse	r24, r1
     72c:	5e cf       	rjmp	.-324    	; 0x5ea <handle_spi_to_bbb+0x50>
			
			spi_transfer = 0;
		}
		spi_isr = 0;
	}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	08 95       	ret

00000746 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	00 d0       	rcall	.+0      	; 0x74c <sysclk_init+0x6>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     756:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     75a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     75e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     762:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     766:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     76a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     76e:	8f b7       	in	r24, 0x3f	; 63
     770:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     772:	f8 94       	cli
	return flags;
     774:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     776:	e0 e5       	ldi	r30, 0x50	; 80
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     780:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     782:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     784:	81 ff       	sbrs	r24, 1
     786:	fd cf       	rjmp	.-6      	; 0x782 <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	80 e4       	ldi	r24, 0x40	; 64
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	d9 d0       	rcall	.+434    	; 0x942 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     790:	8f b7       	in	r24, 0x3f	; 63
     792:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     794:	f8 94       	cli
	return flags;
     796:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     798:	e0 e5       	ldi	r30, 0x50	; 80
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8e 7f       	andi	r24, 0xFE	; 254
     7a0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7a2:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7a8:	8f b7       	in	r24, 0x3f	; 63
     7aa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7ac:	f8 94       	cli
	return flags;
     7ae:	99 81       	ldd	r25, Y+1	; 0x01
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7b0:	80 81       	ld	r24, Z
     7b2:	88 60       	ori	r24, 0x08	; 8
     7b4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7b6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7b8:	81 81       	ldd	r24, Z+1	; 0x01
     7ba:	83 ff       	sbrs	r24, 3
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <sysclk_init+0x72>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     7be:	8b e0       	ldi	r24, 0x0B	; 11
     7c0:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     7c4:	23 96       	adiw	r28, 0x03	; 3
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7da:	9f b7       	in	r25, 0x3f	; 63
     7dc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7de:	f8 94       	cli
	return flags;
     7e0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7e2:	e8 2f       	mov	r30, r24
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	e0 59       	subi	r30, 0x90	; 144
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	60 95       	com	r22
     7ec:	80 81       	ld	r24, Z
     7ee:	68 23       	and	r22, r24
     7f0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7f2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <crc_io_checksum_byte_start>:
 * the module and get the calculated checksum.
 *
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 */
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
 *
 */
static inline void crc_reset(void)
{
	// Reset module
	CRC_CTRL |= CRC_RESET_RESET0_gc;
     800:	e0 ed       	ldi	r30, 0xD0	; 208
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	90 81       	ld	r25, Z
     806:	90 68       	ori	r25, 0x80	; 128
     808:	90 83       	st	Z, r25

	// Set initial checksum value
	CRC.CHECKSUM0 = crc_initial_value & 0xFF;
     80a:	40 91 20 20 	lds	r20, 0x2020	; 0x802020 <crc_initial_value>
     80e:	50 91 21 20 	lds	r21, 0x2021	; 0x802021 <crc_initial_value+0x1>
     812:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <crc_initial_value+0x2>
     816:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <crc_initial_value+0x3>
     81a:	44 83       	std	Z+4, r20	; 0x04
	CRC.CHECKSUM1 = (crc_initial_value >> 8) & 0xFF;
     81c:	05 2f       	mov	r16, r21
     81e:	16 2f       	mov	r17, r22
     820:	27 2f       	mov	r18, r23
     822:	33 27       	eor	r19, r19
     824:	05 83       	std	Z+5, r16	; 0x05
	CRC.CHECKSUM2 = (crc_initial_value >> 16) & 0xFF;
     826:	8b 01       	movw	r16, r22
     828:	22 27       	eor	r18, r18
     82a:	33 27       	eor	r19, r19
     82c:	06 83       	std	Z+6, r16	; 0x06
	CRC.CHECKSUM3 = (crc_initial_value >> 24) & 0xFF;
     82e:	47 2f       	mov	r20, r23
     830:	55 27       	eor	r21, r21
     832:	66 27       	eor	r22, r22
     834:	77 27       	eor	r23, r23
     836:	47 83       	std	Z+7, r20	; 0x07

	crc_initial_value = 0;
     838:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <crc_initial_value>
     83c:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <crc_initial_value+0x1>
     840:	10 92 22 20 	sts	0x2022, r1	; 0x802022 <crc_initial_value+0x2>
     844:	10 92 23 20 	sts	0x2023, r1	; 0x802023 <crc_initial_value+0x3>
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
	// Initialize CRC calculations on I/O interface
	crc_reset();
	// Enable CRC-32 if chosen
	if (crc_16_32 == CRC_32BIT) {
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	19 f4       	brne	.+6      	; 0x852 <crc_io_checksum_byte_start+0x56>
 * \note This cannot be changed while the busy flag is set.
 *
 */
static inline void crc_32_enable(void)
{
	CRC_CTRL |= CRC_CRC32_bm;
     84c:	80 81       	ld	r24, Z
     84e:	80 62       	ori	r24, 0x20	; 32
     850:	80 83       	st	Z, r24
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
     852:	e0 ed       	ldi	r30, 0xD0	; 208
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	80 7f       	andi	r24, 0xF0	; 240
     85a:	80 83       	st	Z, r24
	CRC_CTRL |= source;
     85c:	80 81       	ld	r24, Z
     85e:	81 60       	ori	r24, 0x01	; 1
     860:	80 83       	st	Z, r24
	if (crc_16_32 == CRC_32BIT) {
		crc_32_enable();
	}
	// Enable CRC module using the I/O interface
	crc_set_source(CRC_SOURCE_IO_gc);
}
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <crc_io_checksum_byte_stop>:
 *
 * \retval checksum checksum
 *
 */
uint32_t crc_io_checksum_byte_stop(void)
{
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;
     870:	e1 ed       	ldi	r30, 0xD1	; 209
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	81 60       	ori	r24, 0x01	; 1
     878:	80 83       	st	Z, r24
 * \retval false if module is not busy
 *
 */
static inline bool crc_is_busy(void)
{
	return ((CRC_STATUS & CRC_BUSY_bm) == CRC_BUSY_bm);
     87a:	80 81       	ld	r24, Z
 * \return checksum checksum value
 */
static inline uint32_t crc_checksum_read(void)
{
	// Wait until the CRC conversion is finished
	while (crc_is_busy()) {
     87c:	80 fd       	sbrc	r24, 0
     87e:	fd cf       	rjmp	.-6      	; 0x87a <crc_io_checksum_byte_stop+0x12>
		// Do nothing
	}

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
     880:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     884:	85 ff       	sbrs	r24, 5
     886:	2e c0       	rjmp	.+92     	; 0x8e4 <crc_io_checksum_byte_stop+0x7c>
 */
static inline uint32_t crc32_checksum_read(void)
{
	uint32_t checksum;

	checksum = ((uint32_t)CRC_CHECKSUM0 & 0x000000FF);
     888:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint32_t)CRC_CHECKSUM1 << 8) & 0x0000FF00);
     88c:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	checksum |= (((uint32_t)CRC_CHECKSUM2 << 16) & 0x00FF0000);
     890:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	checksum |= (((uint32_t)CRC_CHECKSUM3 << 24) & 0xFF000000);
     894:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7000d7>
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	72 2b       	or	r23, r18
     8a0:	59 2b       	or	r21, r25
     8a2:	68 2b       	or	r22, r24
     8a4:	20 e2       	ldi	r18, 0x20	; 32
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	dc 01       	movw	r26, r24
		result = (result << 1) + (value & 1);
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	aa 1f       	adc	r26, r26
     8b2:	bb 1f       	adc	r27, r27
     8b4:	6a 01       	movw	r12, r20
     8b6:	7b 01       	movw	r14, r22
     8b8:	31 e0       	ldi	r19, 0x01	; 1
     8ba:	c3 22       	and	r12, r19
     8bc:	dd 24       	eor	r13, r13
     8be:	ee 24       	eor	r14, r14
     8c0:	ff 24       	eor	r15, r15
     8c2:	8c 0d       	add	r24, r12
     8c4:	9d 1d       	adc	r25, r13
     8c6:	ae 1d       	adc	r26, r14
     8c8:	bf 1d       	adc	r27, r15
		value >>= 1;
     8ca:	76 95       	lsr	r23
     8cc:	67 95       	ror	r22
     8ce:	57 95       	ror	r21
     8d0:	47 95       	ror	r20
     8d2:	21 50       	subi	r18, 0x01	; 1
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
     8d4:	59 f7       	brne	.-42     	; 0x8ac <crc_io_checksum_byte_stop+0x44>

	// Bit reverse the result (to comply with IEEE 802.3 CRC-32)
	checksum = crc_bit_revert(checksum);

	// Complement the result (to comply with IEEE 802.3 CRC-32)
	checksum = ~checksum;
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	60 95       	com	r22
     8dc:	70 95       	com	r23
     8de:	80 95       	com	r24
     8e0:	90 95       	com	r25
     8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <crc_io_checksum_byte_stop+0x8c>
 */
static inline uint16_t crc16_checksum_read(void)
{
	uint16_t checksum;
	checksum = 0;
	checksum = ((uint16_t)CRC_CHECKSUM0 & 0x00FF);
     8e4:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint16_t)CRC_CHECKSUM1 << 8) & 0xFF00);
     8e8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	78 2b       	or	r23, r24

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
		return crc32_checksum_read();
	} else {
		return crc16_checksum_read();
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
     8f4:	e0 ed       	ldi	r30, 0xD0	; 208
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	20 81       	ld	r18, Z
     8fa:	20 7f       	andi	r18, 0xF0	; 240
     8fc:	20 83       	st	Z, r18
	CRC_CTRL |= source;
     8fe:	20 81       	ld	r18, Z
     900:	20 83       	st	Z, r18
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;

	// Stop CRC and return checksum
	return crc_checksum_complete();
}
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <crc_io_checksum>:
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 *
 * \return checksum checksum
 */
uint32_t crc_io_checksum(void *data, uint16_t len, enum crc_16_32_t crc_16_32)
{
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
     916:	8b 01       	movw	r16, r22
     918:	84 2f       	mov	r24, r20
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);
     91a:	70 df       	rcall	.-288    	; 0x7fc <crc_io_checksum_byte_start>

	// Write data to DATAIN register
	while (len--) {
     91c:	01 15       	cp	r16, r1
     91e:	11 05       	cpc	r17, r1
     920:	51 f0       	breq	.+20     	; 0x936 <crc_io_checksum+0x2a>
     922:	be 01       	movw	r22, r28
     924:	60 0f       	add	r22, r16
     926:	71 1f       	adc	r23, r17
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
     928:	e3 ed       	ldi	r30, 0xD3	; 211
     92a:	f0 e0       	ldi	r31, 0x00	; 0
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
		crc_io_checksum_byte_add(*(uint8_t*)data);
     92c:	89 91       	ld	r24, Y+
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
     92e:	80 83       	st	Z, r24
{
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
     930:	c6 17       	cp	r28, r22
     932:	d7 07       	cpc	r29, r23
     934:	d9 f7       	brne	.-10     	; 0x92c <crc_io_checksum+0x20>
		crc_io_checksum_byte_add(*(uint8_t*)data);
		data = (uint8_t*)data + 1;
	}

	// Return checksum
	return crc_io_checksum_byte_stop();
     936:	98 df       	rcall	.-208    	; 0x868 <crc_io_checksum_byte_stop>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     942:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     944:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     946:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     948:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     94a:	60 83       	st	Z, r22
	ret                             // Return to caller
     94c:	08 95       	ret

0000094e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	fc 01       	movw	r30, r24
     954:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     95a:	c6 2f       	mov	r28, r22
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	de 01       	movw	r26, r28
     960:	02 2e       	mov	r0, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <ioport_configure_port_pin+0x1a>
     964:	b5 95       	asr	r27
     966:	a7 95       	ror	r26
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <ioport_configure_port_pin+0x16>
     96c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     96e:	50 83       	st	Z, r21
     970:	2f 5f       	subi	r18, 0xFF	; 255
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     976:	28 30       	cpi	r18, 0x08	; 8
     978:	31 05       	cpc	r19, r1
     97a:	89 f7       	brne	.-30     	; 0x95e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     97c:	40 ff       	sbrs	r20, 0
     97e:	0a c0       	rjmp	.+20     	; 0x994 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     980:	41 ff       	sbrs	r20, 1
     982:	03 c0       	rjmp	.+6      	; 0x98a <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     984:	fc 01       	movw	r30, r24
     986:	65 83       	std	Z+5, r22	; 0x05
     988:	02 c0       	rjmp	.+4      	; 0x98e <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     98a:	fc 01       	movw	r30, r24
     98c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     98e:	fc 01       	movw	r30, r24
     990:	61 83       	std	Z+1, r22	; 0x01
     992:	02 c0       	rjmp	.+4      	; 0x998 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     994:	fc 01       	movw	r30, r24
     996:	62 83       	std	Z+2, r22	; 0x02
	}
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     99e:	43 e0       	ldi	r20, 0x03	; 3
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	68 e0       	ldi	r22, 0x08	; 8
     9a4:	80 ec       	ldi	r24, 0xC0	; 192
     9a6:	97 e0       	ldi	r25, 0x07	; 7
     9a8:	d2 df       	rcall	.-92     	; 0x94e <ioport_configure_port_pin>
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	58 e1       	ldi	r21, 0x18	; 24
     9ae:	64 e0       	ldi	r22, 0x04	; 4
     9b0:	80 ec       	ldi	r24, 0xC0	; 192
     9b2:	97 e0       	ldi	r25, 0x07	; 7
     9b4:	cc cf       	rjmp	.-104    	; 0x94e <ioport_configure_port_pin>
     9b6:	08 95       	ret

000009b8 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     9bc:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <transfer>
     9c0:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <transfer+0x1>
     9c4:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     9c6:	83 ff       	sbrs	r24, 3
     9c8:	08 c0       	rjmp	.+16     	; 0x9da <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     9ca:	88 60       	ori	r24, 0x08	; 8
     9cc:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     9d2:	86 ef       	ldi	r24, 0xF6	; 246
     9d4:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
     9d8:	83 c0       	rjmp	.+262    	; 0xae0 <twim_interrupt_handler+0x128>
     9da:	98 2f       	mov	r25, r24
     9dc:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     9de:	31 f0       	breq	.+12     	; 0x9ec <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
     9ea:	7a c0       	rjmp	.+244    	; 0xae0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     9ec:	86 ff       	sbrs	r24, 6
     9ee:	43 c0       	rjmp	.+134    	; 0xa76 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     9f0:	c4 e2       	ldi	r28, 0x24	; 36
     9f2:	d0 e2       	ldi	r29, 0x20	; 32
     9f4:	aa 81       	ldd	r26, Y+2	; 0x02
     9f6:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     9f8:	8c 81       	ldd	r24, Y+4	; 0x04
     9fa:	9d 81       	ldd	r25, Y+5	; 0x05
     9fc:	14 96       	adiw	r26, 0x04	; 4
     9fe:	2d 91       	ld	r18, X+
     a00:	3c 91       	ld	r19, X
     a02:	15 97       	sbiw	r26, 0x05	; 5
     a04:	82 17       	cp	r24, r18
     a06:	93 07       	cpc	r25, r19
     a08:	6c f4       	brge	.+26     	; 0xa24 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     a0a:	9c 01       	movw	r18, r24
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	20 93 28 20 	sts	0x2028, r18	; 0x802028 <transfer+0x4>
     a14:	30 93 29 20 	sts	0x2029, r19	; 0x802029 <transfer+0x5>
     a18:	a8 0f       	add	r26, r24
     a1a:	b9 1f       	adc	r27, r25
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	8c 91       	ld	r24, X
     a20:	87 83       	std	Z+7, r24	; 0x07
     a22:	5e c0       	rjmp	.+188    	; 0xae0 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     a24:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <transfer+0x6>
     a28:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <transfer+0x7>
     a2c:	18 96       	adiw	r26, 0x08	; 8
     a2e:	2d 91       	ld	r18, X+
     a30:	3c 91       	ld	r19, X
     a32:	19 97       	sbiw	r26, 0x09	; 9
     a34:	82 17       	cp	r24, r18
     a36:	93 07       	cpc	r25, r19
     a38:	c8 f4       	brcc	.+50     	; 0xa6c <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     a3a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <transfer+0x8>
     a3e:	22 23       	and	r18, r18
     a40:	21 f0       	breq	.+8      	; 0xa4a <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     a42:	86 81       	ldd	r24, Z+6	; 0x06
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	86 83       	std	Z+6, r24	; 0x06
     a48:	4b c0       	rjmp	.+150    	; 0xae0 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     a4a:	16 96       	adiw	r26, 0x06	; 6
     a4c:	2d 91       	ld	r18, X+
     a4e:	3c 91       	ld	r19, X
     a50:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     a52:	ac 01       	movw	r20, r24
     a54:	4f 5f       	subi	r20, 0xFF	; 255
     a56:	5f 4f       	sbci	r21, 0xFF	; 255
     a58:	40 93 2a 20 	sts	0x202A, r20	; 0x80202a <transfer+0x6>
     a5c:	50 93 2b 20 	sts	0x202B, r21	; 0x80202b <transfer+0x7>
     a60:	d9 01       	movw	r26, r18
     a62:	a8 0f       	add	r26, r24
     a64:	b9 1f       	adc	r27, r25
     a66:	8c 91       	ld	r24, X
     a68:	87 83       	std	Z+7, r24	; 0x07
     a6a:	3a c0       	rjmp	.+116    	; 0xae0 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     a70:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <transfer+0xa>
     a74:	35 c0       	rjmp	.+106    	; 0xae0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     a76:	88 23       	and	r24, r24
     a78:	84 f5       	brge	.+96     	; 0xada <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     a7a:	a4 e2       	ldi	r26, 0x24	; 36
     a7c:	b0 e2       	ldi	r27, 0x20	; 32
     a7e:	12 96       	adiw	r26, 0x02	; 2
     a80:	cd 91       	ld	r28, X+
     a82:	dc 91       	ld	r29, X
     a84:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     a86:	16 96       	adiw	r26, 0x06	; 6
     a88:	8d 91       	ld	r24, X+
     a8a:	9c 91       	ld	r25, X
     a8c:	17 97       	sbiw	r26, 0x07	; 7
     a8e:	28 85       	ldd	r18, Y+8	; 0x08
     a90:	39 85       	ldd	r19, Y+9	; 0x09
     a92:	82 17       	cp	r24, r18
     a94:	93 07       	cpc	r25, r19
     a96:	d8 f4       	brcc	.+54     	; 0xace <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     a98:	6e 81       	ldd	r22, Y+6	; 0x06
     a9a:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     a9c:	9c 01       	movw	r18, r24
     a9e:	2f 5f       	subi	r18, 0xFF	; 255
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	20 93 2a 20 	sts	0x202A, r18	; 0x80202a <transfer+0x6>
     aa6:	30 93 2b 20 	sts	0x202B, r19	; 0x80202b <transfer+0x7>
     aaa:	47 81       	ldd	r20, Z+7	; 0x07
     aac:	db 01       	movw	r26, r22
     aae:	a8 0f       	add	r26, r24
     ab0:	b9 1f       	adc	r27, r25
     ab2:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     ab4:	88 85       	ldd	r24, Y+8	; 0x08
     ab6:	99 85       	ldd	r25, Y+9	; 0x09
     ab8:	28 17       	cp	r18, r24
     aba:	39 07       	cpc	r19, r25
     abc:	18 f4       	brcc	.+6      	; 0xac4 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	83 83       	std	Z+3, r24	; 0x03
     ac2:	0e c0       	rjmp	.+28     	; 0xae0 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     ac4:	87 e0       	ldi	r24, 0x07	; 7
     ac6:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     ac8:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <transfer+0xa>
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     ad2:	89 ef       	ldi	r24, 0xF9	; 249
     ad4:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     ada:	8b ef       	ldi	r24, 0xFB	; 251
     adc:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <transfer+0xa>
	}
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	08 b6       	in	r0, 0x38	; 56
     af2:	0f 92       	push	r0
     af4:	18 be       	out	0x38, r1	; 56
     af6:	09 b6       	in	r0, 0x39	; 57
     af8:	0f 92       	push	r0
     afa:	19 be       	out	0x39, r1	; 57
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	1b be       	out	0x3b, r1	; 59
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	4e df       	rcall	.-356    	; 0x9b8 <twim_interrupt_handler>
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	09 be       	out	0x39, r0	; 57
     b3c:	0f 90       	pop	r0
     b3e:	08 be       	out	0x38, r0	; 56
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	08 b6       	in	r0, 0x38	; 56
     b56:	0f 92       	push	r0
     b58:	18 be       	out	0x38, r1	; 56
     b5a:	09 b6       	in	r0, 0x39	; 57
     b5c:	0f 92       	push	r0
     b5e:	19 be       	out	0x39, r1	; 57
     b60:	0b b6       	in	r0, 0x3b	; 59
     b62:	0f 92       	push	r0
     b64:	1b be       	out	0x3b, r1	; 59
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
     b7e:	1c df       	rcall	.-456    	; 0x9b8 <twim_interrupt_handler>
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0b be       	out	0x3b, r0	; 59
     b9c:	0f 90       	pop	r0
     b9e:	09 be       	out	0x39, r0	; 57
     ba0:	0f 90       	pop	r0
     ba2:	08 be       	out	0x38, r0	; 56
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	08 b6       	in	r0, 0x38	; 56
     bba:	0f 92       	push	r0
     bbc:	18 be       	out	0x38, r1	; 56
     bbe:	09 b6       	in	r0, 0x39	; 57
     bc0:	0f 92       	push	r0
     bc2:	19 be       	out	0x39, r1	; 57
     bc4:	0b b6       	in	r0, 0x3b	; 59
     bc6:	0f 92       	push	r0
     bc8:	1b be       	out	0x3b, r1	; 59
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
     be2:	ea de       	rcall	.-556    	; 0x9b8 <twim_interrupt_handler>
     be4:	ff 91       	pop	r31
     be6:	ef 91       	pop	r30
     be8:	bf 91       	pop	r27
     bea:	af 91       	pop	r26
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	7f 91       	pop	r23
     bf2:	6f 91       	pop	r22
     bf4:	5f 91       	pop	r21
     bf6:	4f 91       	pop	r20
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0b be       	out	0x3b, r0	; 59
     c00:	0f 90       	pop	r0
     c02:	09 be       	out	0x39, r0	; 57
     c04:	0f 90       	pop	r0
     c06:	08 be       	out	0x38, r0	; 56
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	08 b6       	in	r0, 0x38	; 56
     c1e:	0f 92       	push	r0
     c20:	18 be       	out	0x38, r1	; 56
     c22:	09 b6       	in	r0, 0x39	; 57
     c24:	0f 92       	push	r0
     c26:	19 be       	out	0x39, r1	; 57
     c28:	0b b6       	in	r0, 0x3b	; 59
     c2a:	0f 92       	push	r0
     c2c:	1b be       	out	0x3b, r1	; 59
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
     c46:	b8 de       	rcall	.-656    	; 0x9b8 <twim_interrupt_handler>
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0b be       	out	0x3b, r0	; 59
     c64:	0f 90       	pop	r0
     c66:	09 be       	out	0x39, r0	; 57
     c68:	0f 90       	pop	r0
     c6a:	08 be       	out	0x38, r0	; 56
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     c76:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     c78:	db 01       	movw	r26, r22
     c7a:	14 96       	adiw	r26, 0x04	; 4
     c7c:	8c 91       	ld	r24, X
     c7e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     c80:	88 eb       	ldi	r24, 0xB8	; 184
     c82:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     c88:	e4 e2       	ldi	r30, 0x24	; 36
     c8a:	f0 e2       	ldi	r31, 0x20	; 32
     c8c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     c8e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     c90:	e0 ea       	ldi	r30, 0xA0	; 160
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     c9a:	78 94       	sei

	return STATUS_OK;
}
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	08 95       	ret

00000ca0 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	1f 92       	push	r1
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     cac:	89 2b       	or	r24, r25
     cae:	09 f4       	brne	.+2      	; 0xcb2 <twi_master_transfer+0x12>
     cb0:	4b c0       	rjmp	.+150    	; 0xd48 <twi_master_transfer+0xa8>
     cb2:	61 15       	cp	r22, r1
     cb4:	71 05       	cpc	r23, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <twi_master_transfer+0x1a>
     cb8:	49 c0       	rjmp	.+146    	; 0xd4c <twi_master_transfer+0xac>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     cba:	fb 01       	movw	r30, r22
     cbc:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     cbe:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <transfer+0x9>
     cc2:	88 23       	and	r24, r24
     cc4:	19 f0       	breq	.+6      	; 0xccc <twi_master_transfer+0x2c>

		if (no_wait) { return ERR_BUSY; }
     cc6:	99 23       	and	r25, r25
     cc8:	f1 f3       	breq	.-4      	; 0xcc6 <twi_master_transfer+0x26>
     cca:	42 c0       	rjmp	.+132    	; 0xd50 <twi_master_transfer+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ccc:	8f b7       	in	r24, 0x3f	; 63
     cce:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cd0:	f8 94       	cli
	return flags;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     cd4:	e4 e2       	ldi	r30, 0x24	; 36
     cd6:	f0 e2       	ldi	r31, 0x20	; 32
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
     cdc:	90 e8       	ldi	r25, 0x80	; 128
     cde:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ce0:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     ce2:	a0 83       	st	Z, r26
     ce4:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
     ce6:	62 83       	std	Z+2, r22	; 0x02
     ce8:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
     cea:	14 82       	std	Z+4, r1	; 0x04
     cec:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
     cee:	16 82       	std	Z+6, r1	; 0x06
     cf0:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
     cf2:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
     cf4:	fb 01       	movw	r30, r22
     cf6:	80 81       	ld	r24, Z
     cf8:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	23 2b       	or	r18, r19
     d00:	11 f4       	brne	.+4      	; 0xd06 <twi_master_transfer+0x66>
     d02:	41 11       	cpse	r20, r1
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <twi_master_transfer+0x6c>
			transfer.bus->MASTER.ADDR = chip;
     d06:	16 96       	adiw	r26, 0x06	; 6
     d08:	8c 93       	st	X, r24
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <twi_master_transfer+0x72>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     d0c:	81 60       	ori	r24, 0x01	; 1
     d0e:	16 96       	adiw	r26, 0x06	; 6
     d10:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     d12:	e4 e2       	ldi	r30, 0x24	; 36
     d14:	f0 e2       	ldi	r31, 0x20	; 32
     d16:	82 85       	ldd	r24, Z+10	; 0x0a
     d18:	80 38       	cpi	r24, 0x80	; 128
     d1a:	e9 f3       	breq	.-6      	; 0xd16 <twi_master_transfer+0x76>

	while (! twim_idle(transfer.bus)) { barrier(); }
     d1c:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <transfer>
     d20:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <transfer+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     d24:	84 81       	ldd	r24, Z+4	; 0x04
     d26:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	49 f0       	breq	.+18     	; 0xd3e <twi_master_transfer+0x9e>
     d2c:	a4 e2       	ldi	r26, 0x24	; 36
     d2e:	b0 e2       	ldi	r27, 0x20	; 32
     d30:	ed 91       	ld	r30, X+
     d32:	fc 91       	ld	r31, X
     d34:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     d36:	84 81       	ldd	r24, Z+4	; 0x04
     d38:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	c9 f7       	brne	.-14     	; 0xd30 <twi_master_transfer+0x90>

	status_code_t const status = transfer.status;
     d3e:	e4 e2       	ldi	r30, 0x24	; 36
     d40:	f0 e2       	ldi	r31, 0x20	; 32
     d42:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     d44:	11 86       	std	Z+9, r1	; 0x09
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <twi_master_transfer+0xb2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     d48:	88 ef       	ldi	r24, 0xF8	; 248
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <twi_master_transfer+0xb2>
     d4c:	88 ef       	ldi	r24, 0xF8	; 248
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <twi_master_transfer+0xb2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     d50:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <init_i2c>:



uint8_t init_i2c(void);
uint8_t init_i2c(void)
{
     d5a:	4f 92       	push	r4
     d5c:	5f 92       	push	r5
     d5e:	6f 92       	push	r6
     d60:	7f 92       	push	r7
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	c2 55       	subi	r28, 0x52	; 82
     d80:	d1 09       	sbc	r29, r1
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	de bf       	out	0x3e, r29	; 62
	twi_master_options_t opt48 = {
     d86:	0f 2e       	mov	r0, r31
     d88:	f9 e0       	ldi	r31, 0x09	; 9
     d8a:	7f 2e       	mov	r7, r31
     d8c:	f0 2d       	mov	r31, r0
     d8e:	8e 01       	movw	r16, r28
     d90:	0f 5f       	subi	r16, 0xFF	; 255
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	d8 01       	movw	r26, r16
     d96:	e7 2d       	mov	r30, r7
     d98:	1d 92       	st	X+, r1
     d9a:	ea 95       	dec	r30
     d9c:	e9 f7       	brne	.-6      	; 0xd98 <init_i2c+0x3e>
     d9e:	0f 2e       	mov	r0, r31
     da0:	f0 ea       	ldi	r31, 0xA0	; 160
     da2:	8f 2e       	mov	r8, r31
     da4:	f6 e8       	ldi	r31, 0x86	; 134
     da6:	9f 2e       	mov	r9, r31
     da8:	aa 24       	eor	r10, r10
     daa:	a3 94       	inc	r10
     dac:	b1 2c       	mov	r11, r1
     dae:	f0 2d       	mov	r31, r0
     db0:	89 82       	std	Y+1, r8	; 0x01
     db2:	9a 82       	std	Y+2, r9	; 0x02
     db4:	ab 82       	std	Y+3, r10	; 0x03
     db6:	bc 82       	std	Y+4, r11	; 0x04
     db8:	0f 2e       	mov	r0, r31
     dba:	f8 e4       	ldi	r31, 0x48	; 72
     dbc:	6f 2e       	mov	r6, r31
     dbe:	f0 2d       	mov	r31, r0
     dc0:	69 86       	std	Y+9, r6	; 0x09
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	fb e9       	ldi	r31, 0x9B	; 155
     dc6:	cf 2e       	mov	r12, r31
     dc8:	d1 2c       	mov	r13, r1
     dca:	e1 2c       	mov	r14, r1
     dcc:	f1 2c       	mov	r15, r1
     dce:	f0 2d       	mov	r31, r0
     dd0:	cd 82       	std	Y+5, r12	; 0x05
     dd2:	de 82       	std	Y+6, r13	; 0x06
     dd4:	ef 82       	std	Y+7, r14	; 0x07
     dd6:	f8 86       	std	Y+8, r15	; 0x08
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     dd8:	60 e4       	ldi	r22, 0x40	; 64
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	f9 dc       	rcall	.-1550   	; 0x7d0 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     dde:	b8 01       	movw	r22, r16
     de0:	80 eb       	ldi	r24, 0xB0	; 176
     de2:	94 e0       	ldi	r25, 0x04	; 4
     de4:	48 df       	rcall	.-368    	; 0xc76 <twi_master_init>
		.speed = 100000,
		.chip = 0x48
	};
	twi_master_setup(&TWIF, &opt48);
	
	twi_master_options_t opt49 = {
     de6:	07 5f       	subi	r16, 0xF7	; 247
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	d8 01       	movw	r26, r16
     dec:	e7 2d       	mov	r30, r7
     dee:	1d 92       	st	X+, r1
     df0:	ea 95       	dec	r30
     df2:	e9 f7       	brne	.-6      	; 0xdee <init_i2c+0x94>
     df4:	8a 86       	std	Y+10, r8	; 0x0a
     df6:	9b 86       	std	Y+11, r9	; 0x0b
     df8:	ac 86       	std	Y+12, r10	; 0x0c
     dfa:	bd 86       	std	Y+13, r11	; 0x0d
     dfc:	0f 2e       	mov	r0, r31
     dfe:	f9 e4       	ldi	r31, 0x49	; 73
     e00:	5f 2e       	mov	r5, r31
     e02:	f0 2d       	mov	r31, r0
     e04:	5a 8a       	std	Y+18, r5	; 0x12
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e06:	ce 86       	std	Y+14, r12	; 0x0e
     e08:	df 86       	std	Y+15, r13	; 0x0f
     e0a:	e8 8a       	std	Y+16, r14	; 0x10
     e0c:	f9 8a       	std	Y+17, r15	; 0x11
     e0e:	60 e4       	ldi	r22, 0x40	; 64
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	de dc       	rcall	.-1604   	; 0x7d0 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e14:	b8 01       	movw	r22, r16
     e16:	80 eb       	ldi	r24, 0xB0	; 176
     e18:	94 e0       	ldi	r25, 0x04	; 4
     e1a:	2d df       	rcall	.-422    	; 0xc76 <twi_master_init>
		.speed = 100000,
		.chip = 0x49
	};
	twi_master_setup(&TWIF, &opt49);
	
	twi_master_options_t opt4A = {
     e1c:	07 5f       	subi	r16, 0xF7	; 247
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	d8 01       	movw	r26, r16
     e22:	e7 2d       	mov	r30, r7
     e24:	1d 92       	st	X+, r1
     e26:	ea 95       	dec	r30
     e28:	e9 f7       	brne	.-6      	; 0xe24 <init_i2c+0xca>
     e2a:	8b 8a       	std	Y+19, r8	; 0x13
     e2c:	9c 8a       	std	Y+20, r9	; 0x14
     e2e:	ad 8a       	std	Y+21, r10	; 0x15
     e30:	be 8a       	std	Y+22, r11	; 0x16
     e32:	0f 2e       	mov	r0, r31
     e34:	fa e4       	ldi	r31, 0x4A	; 74
     e36:	4f 2e       	mov	r4, r31
     e38:	f0 2d       	mov	r31, r0
     e3a:	4b 8e       	std	Y+27, r4	; 0x1b
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e3c:	cf 8a       	std	Y+23, r12	; 0x17
     e3e:	d8 8e       	std	Y+24, r13	; 0x18
     e40:	e9 8e       	std	Y+25, r14	; 0x19
     e42:	fa 8e       	std	Y+26, r15	; 0x1a
     e44:	60 e4       	ldi	r22, 0x40	; 64
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	c3 dc       	rcall	.-1658   	; 0x7d0 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e4a:	b8 01       	movw	r22, r16
     e4c:	80 eb       	ldi	r24, 0xB0	; 176
     e4e:	94 e0       	ldi	r25, 0x04	; 4
     e50:	12 df       	rcall	.-476    	; 0xc76 <twi_master_init>
		.speed = 100000,
		.chip = 0x4A
	};
	twi_master_setup(&TWIF, &opt4A);
	
	twi_master_options_t opt4B = {
     e52:	07 5f       	subi	r16, 0xF7	; 247
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	d8 01       	movw	r26, r16
     e58:	1d 92       	st	X+, r1
     e5a:	7a 94       	dec	r7
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <init_i2c+0xfe>
     e5e:	8c 8e       	std	Y+28, r8	; 0x1c
     e60:	9d 8e       	std	Y+29, r9	; 0x1d
     e62:	ae 8e       	std	Y+30, r10	; 0x1e
     e64:	bf 8e       	std	Y+31, r11	; 0x1f
     e66:	0f 2e       	mov	r0, r31
     e68:	fb e4       	ldi	r31, 0x4B	; 75
     e6a:	bf 2e       	mov	r11, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	bc a2       	std	Y+36, r11	; 0x24
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
     e70:	c8 a2       	std	Y+32, r12	; 0x20
     e72:	d9 a2       	std	Y+33, r13	; 0x21
     e74:	ea a2       	std	Y+34, r14	; 0x22
     e76:	fb a2       	std	Y+35, r15	; 0x23
     e78:	60 e4       	ldi	r22, 0x40	; 64
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	a9 dc       	rcall	.-1710   	; 0x7d0 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
     e7e:	b8 01       	movw	r22, r16
     e80:	80 eb       	ldi	r24, 0xB0	; 176
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	f8 de       	rcall	.-528    	; 0xc76 <twi_master_init>
	 * 4: Comparater mode. 0=default
	 * 3: Comparater polarity. 0=default
	 * 2: Comparater Latch. 0=Nonlatching comparater
	 * 1: Comparater queue and disable. 00=Assert after one conversion
	 **/
	const uint8_t adc_setup_bytes[] = {0x42, 0xe3};
     e86:	82 e4       	ldi	r24, 0x42	; 66
     e88:	8d a3       	std	Y+37, r24	; 0x25
     e8a:	83 ee       	ldi	r24, 0xE3	; 227
     e8c:	8e a3       	std	Y+38, r24	; 0x26
	twi_package_t adc_setup_48;
	memset(&adc_setup_48,0,sizeof(twi_package_t));
     e8e:	05 5f       	subi	r16, 0xF5	; 245
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	0f 2e       	mov	r0, r31
     e94:	fb e0       	ldi	r31, 0x0B	; 11
     e96:	ff 2e       	mov	r15, r31
     e98:	f0 2d       	mov	r31, r0
     e9a:	f8 01       	movw	r30, r16
     e9c:	6f 2d       	mov	r22, r15
     e9e:	11 92       	st	Z+, r1
     ea0:	6a 95       	dec	r22
     ea2:	e9 f7       	brne	.-6      	; 0xe9e <init_i2c+0x144>
	adc_setup_48.addr[0]		= 0x01;
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	78 a7       	std	Y+40, r23	; 0x28
	adc_setup_48.addr_length	= sizeof(uint8_t);
     ea8:	41 e0       	ldi	r20, 0x01	; 1
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	4b a7       	std	Y+43, r20	; 0x2b
     eae:	5c a7       	std	Y+44, r21	; 0x2c
	adc_setup_48.chip			= 0x48;
     eb0:	6f a2       	std	Y+39, r6	; 0x27
	adc_setup_48.buffer			= (void *)adc_setup_bytes;
     eb2:	9e 01       	movw	r18, r28
     eb4:	2b 5d       	subi	r18, 0xDB	; 219
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	2d a7       	std	Y+45, r18	; 0x2d
     eba:	3e a7       	std	Y+46, r19	; 0x2e
	adc_setup_48.length			= sizeof(adc_setup_bytes);
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	8f a7       	std	Y+47, r24	; 0x2f
     ec2:	98 ab       	std	Y+48, r25	; 0x30
	
	twi_package_t adc_setup_49;
	memset(&adc_setup_49,0,sizeof(twi_package_t));
     ec4:	de 01       	movw	r26, r28
     ec6:	d2 96       	adiw	r26, 0x32	; 50
     ec8:	fd 01       	movw	r30, r26
     eca:	6f 2d       	mov	r22, r15
     ecc:	11 92       	st	Z+, r1
     ece:	6a 95       	dec	r22
     ed0:	e9 f7       	brne	.-6      	; 0xecc <init_i2c+0x172>
	adc_setup_49.addr[0]		= 0x01;
     ed2:	7b ab       	std	Y+51, r23	; 0x33
	adc_setup_49.addr_length	= sizeof(uint8_t);
     ed4:	4e ab       	std	Y+54, r20	; 0x36
     ed6:	5f ab       	std	Y+55, r21	; 0x37
	adc_setup_49.chip			= 0x49;
     ed8:	5a aa       	std	Y+50, r5	; 0x32
	adc_setup_49.buffer			= (void *)adc_setup_bytes;
     eda:	28 af       	std	Y+56, r18	; 0x38
     edc:	39 af       	std	Y+57, r19	; 0x39
	adc_setup_49.length			= sizeof(adc_setup_bytes);
     ede:	8a af       	std	Y+58, r24	; 0x3a
     ee0:	9b af       	std	Y+59, r25	; 0x3b
	
	twi_package_t adc_setup_4A;
	memset(&adc_setup_4A,0,sizeof(twi_package_t));
     ee2:	1b 96       	adiw	r26, 0x0b	; 11
     ee4:	fd 01       	movw	r30, r26
     ee6:	6f 2d       	mov	r22, r15
     ee8:	11 92       	st	Z+, r1
     eea:	6a 95       	dec	r22
     eec:	e9 f7       	brne	.-6      	; 0xee8 <init_i2c+0x18e>
	adc_setup_4A.addr[0]		= 0x01;
     eee:	7e af       	std	Y+62, r23	; 0x3e
	adc_setup_4A.addr_length	= sizeof(uint8_t);
     ef0:	23 96       	adiw	r28, 0x03	; 3
     ef2:	4e af       	std	Y+62, r20	; 0x3e
     ef4:	5f af       	std	Y+63, r21	; 0x3f
     ef6:	23 97       	sbiw	r28, 0x03	; 3
	adc_setup_4A.chip			= 0x4A;
     ef8:	4d ae       	std	Y+61, r4	; 0x3d
	adc_setup_4A.buffer			= (void *)adc_setup_bytes;
     efa:	25 96       	adiw	r28, 0x05	; 5
     efc:	2e af       	std	Y+62, r18	; 0x3e
     efe:	3f af       	std	Y+63, r19	; 0x3f
     f00:	25 97       	sbiw	r28, 0x05	; 5
	adc_setup_4A.length			= sizeof(adc_setup_bytes);
     f02:	27 96       	adiw	r28, 0x07	; 7
     f04:	8e af       	std	Y+62, r24	; 0x3e
     f06:	9f af       	std	Y+63, r25	; 0x3f
     f08:	27 97       	sbiw	r28, 0x07	; 7
	
	twi_package_t adc_setup_4B;
	memset(&adc_setup_4B,0,sizeof(twi_package_t));
     f0a:	fe 01       	movw	r30, r28
     f0c:	e8 5b       	subi	r30, 0xB8	; 184
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	df 01       	movw	r26, r30
     f12:	1d 92       	st	X+, r1
     f14:	fa 94       	dec	r15
     f16:	e9 f7       	brne	.-6      	; 0xf12 <init_i2c+0x1b8>
	adc_setup_4B.addr[0]		= 0x01;
     f18:	71 83       	std	Z+1, r23	; 0x01
	adc_setup_4B.addr_length	= sizeof(uint8_t);
     f1a:	44 83       	std	Z+4, r20	; 0x04
     f1c:	55 83       	std	Z+5, r21	; 0x05
	adc_setup_4B.chip			= 0x4B;
     f1e:	b0 82       	st	Z, r11
	adc_setup_4B.buffer			= (void *)adc_setup_bytes;
     f20:	26 83       	std	Z+6, r18	; 0x06
     f22:	37 83       	std	Z+7, r19	; 0x07
	adc_setup_4B.length			= sizeof(adc_setup_bytes);
     f24:	80 87       	std	Z+8, r24	; 0x08
     f26:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	b8 01       	movw	r22, r16
     f2c:	80 eb       	ldi	r24, 0xB0	; 176
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	b7 de       	rcall	.-658    	; 0xca0 <twi_master_transfer>
	
	uint8_t error = 0;
	if(twi_master_write(&TWIF, &adc_setup_48) != TWI_SUCCESS)
     f32:	11 e0       	ldi	r17, 0x01	; 1
     f34:	81 11       	cpse	r24, r1
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <init_i2c+0x1e0>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	be 01       	movw	r22, r28
     f3e:	6e 5c       	subi	r22, 0xCE	; 206
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	80 eb       	ldi	r24, 0xB0	; 176
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	ac de       	rcall	.-680    	; 0xca0 <twi_master_transfer>
		error |= 1;
	if(twi_master_write(&TWIF, &adc_setup_49) != TWI_SUCCESS)
     f48:	81 11       	cpse	r24, r1
		error |= 2;
     f4a:	12 60       	ori	r17, 0x02	; 2
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	be 01       	movw	r22, r28
     f50:	63 5c       	subi	r22, 0xC3	; 195
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	80 eb       	ldi	r24, 0xB0	; 176
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	a3 de       	rcall	.-698    	; 0xca0 <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4A) != TWI_SUCCESS)
     f5a:	81 11       	cpse	r24, r1
		error |= 4;
     f5c:	14 60       	ori	r17, 0x04	; 4
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	be 01       	movw	r22, r28
     f62:	68 5b       	subi	r22, 0xB8	; 184
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	80 eb       	ldi	r24, 0xB0	; 176
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	9a de       	rcall	.-716    	; 0xca0 <twi_master_transfer>
	if(twi_master_write(&TWIF, &adc_setup_4B) != TWI_SUCCESS)
     f6c:	81 11       	cpse	r24, r1
		error |= 8;
     f6e:	18 60       	ori	r17, 0x08	; 8
	
	return error;
}
     f70:	81 2f       	mov	r24, r17
     f72:	ce 5a       	subi	r28, 0xAE	; 174
     f74:	df 4f       	sbci	r29, 0xFF	; 255
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	7f 90       	pop	r7
     f94:	6f 90       	pop	r6
     f96:	5f 90       	pop	r5
     f98:	4f 90       	pop	r4
     f9a:	08 95       	ret

00000f9c <main>:


int main (void)
{
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	2d 97       	sbiw	r28, 0x0d	; 13
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	de bf       	out	0x3e, r29	; 62
	board_init();	//Init board
     faa:	f9 dc       	rcall	.-1550   	; 0x99e <board_init>
	sysclk_init();
     fac:	cc db       	rcall	.-2152   	; 0x746 <sysclk_init>
	rtc_init();	
     fae:	81 d9       	rcall	.-3326   	; 0x2b2 <rtc_init>
	init_spi_to_bbb();	//Setup SPI on Port C
     fb0:	d7 da       	rcall	.-2642   	; 0x560 <init_spi_to_bbb>
	sensor_status = init_i2c();
     fb2:	d3 de       	rcall	.-602    	; 0xd5a <init_i2c>
     fb4:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <sensor_status>
	sei();            // enable global interrupts
     fb8:	78 94       	sei
	
	state = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <state>
		
		if(spi_transfer == 0){//Do anything that is not SPI related
			
			uint8_t recieved_data[2];
			twi_package_t packet_read;
			memset(&packet_read, 0, sizeof(twi_package_t));
     fc0:	0f 2e       	mov	r0, r31
     fc2:	fb e0       	ldi	r31, 0x0B	; 11
     fc4:	5f 2e       	mov	r5, r31
     fc6:	f0 2d       	mov	r31, r0
     fc8:	8e 01       	movw	r16, r28
     fca:	0f 5f       	subi	r16, 0xFF	; 255
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
			packet_read.addr[0]			= 0x00;
			packet_read.addr_length		= sizeof(uint8_t);
     fce:	88 24       	eor	r8, r8
     fd0:	83 94       	inc	r8
     fd2:	91 2c       	mov	r9, r1
			packet_read.chip			= 0x48;
     fd4:	0f 2e       	mov	r0, r31
     fd6:	f8 e4       	ldi	r31, 0x48	; 72
     fd8:	6f 2e       	mov	r6, r31
     fda:	f0 2d       	mov	r31, r0
			packet_read.buffer			= recieved_data;
     fdc:	5e 01       	movw	r10, r28
     fde:	8c e0       	ldi	r24, 0x0C	; 12
     fe0:	a8 0e       	add	r10, r24
     fe2:	b1 1c       	adc	r11, r1
			packet_read.length			= 2;
     fe4:	68 94       	set
     fe6:	cc 24       	eor	r12, r12
     fe8:	c1 f8       	bld	r12, 1
     fea:	d1 2c       	mov	r13, r1
			
			time1= rtc_get_time();
			
			//_delay_ms(1);
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
				sensor_data[0] = recieved_data[1];
     fec:	0f 2e       	mov	r0, r31
     fee:	f8 e0       	ldi	r31, 0x08	; 8
     ff0:	ef 2e       	mov	r14, r31
     ff2:	f0 e2       	ldi	r31, 0x20	; 32
     ff4:	ff 2e       	mov	r15, r31
     ff6:	f0 2d       	mov	r31, r0
				sensor_data[1] = recieved_data[0];
				
			}
			
			
			packet_read.chip = 0x49;
     ff8:	0f 2e       	mov	r0, r31
     ffa:	f9 e4       	ldi	r31, 0x49	; 73
     ffc:	7f 2e       	mov	r7, r31
     ffe:	f0 2d       	mov	r31, r0
				sensor_data[2] = recieved_data[1];
				sensor_data[3] = recieved_data[0];
			}
			if(spi_isr) continue;
			
			packet_read.chip = 0x4A;
    1000:	0f 2e       	mov	r0, r31
    1002:	fa e4       	ldi	r31, 0x4A	; 74
    1004:	4f 2e       	mov	r4, r31
    1006:	f0 2d       	mov	r31, r0
				sensor_data[4] = recieved_data[1];
				sensor_data[5] = recieved_data[0];
			}
			if(spi_isr) continue;
			
			packet_read.chip = 0x4B;
    1008:	0f 2e       	mov	r0, r31
    100a:	fb e4       	ldi	r31, 0x4B	; 75
    100c:	3f 2e       	mov	r3, r31
    100e:	f0 2d       	mov	r31, r0
		//SPIC handler
		//When this is true, it means we have just received a byte
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		//_delay_ms(200);
		handle_spi_to_bbb();
    1010:	c4 da       	rcall	.-2680   	; 0x59a <handle_spi_to_bbb>
		
		if(spi_transfer == 0){//Do anything that is not SPI related
    1012:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <spi_transfer>
    1016:	81 11       	cpse	r24, r1
    1018:	fb cf       	rjmp	.-10     	; 0x1010 <main+0x74>
			
			uint8_t recieved_data[2];
			twi_package_t packet_read;
			memset(&packet_read, 0, sizeof(twi_package_t));
    101a:	f8 01       	movw	r30, r16
    101c:	85 2d       	mov	r24, r5
    101e:	11 92       	st	Z+, r1
    1020:	8a 95       	dec	r24
    1022:	e9 f7       	brne	.-6      	; 0x101e <main+0x82>
			packet_read.addr[0]			= 0x00;
			packet_read.addr_length		= sizeof(uint8_t);
    1024:	8d 82       	std	Y+5, r8	; 0x05
    1026:	9e 82       	std	Y+6, r9	; 0x06
			packet_read.chip			= 0x48;
    1028:	69 82       	std	Y+1, r6	; 0x01
			packet_read.buffer			= recieved_data;
    102a:	af 82       	std	Y+7, r10	; 0x07
    102c:	b8 86       	std	Y+8, r11	; 0x08
			packet_read.length			= 2;
    102e:	c9 86       	std	Y+9, r12	; 0x09
    1030:	da 86       	std	Y+10, r13	; 0x0a
			
			time1= rtc_get_time();
    1032:	09 d9       	rcall	.-3566   	; 0x246 <rtc_get_time>
    1034:	60 93 2f 20 	sts	0x202F, r22	; 0x80202f <time1>
    1038:	70 93 30 20 	sts	0x2030, r23	; 0x802030 <time1+0x1>
    103c:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <time1+0x2>
    1040:	90 93 32 20 	sts	0x2032, r25	; 0x802032 <time1+0x3>
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	b8 01       	movw	r22, r16
    1048:	80 eb       	ldi	r24, 0xB0	; 176
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	29 de       	rcall	.-942    	; 0xca0 <twi_master_transfer>
			
			//_delay_ms(1);
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
    104e:	81 11       	cpse	r24, r1
    1050:	05 c0       	rjmp	.+10     	; 0x105c <main+0xc0>
				sensor_data[0] = recieved_data[1];
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	f7 01       	movw	r30, r14
    1056:	80 83       	st	Z, r24
				sensor_data[1] = recieved_data[0];
    1058:	8c 85       	ldd	r24, Y+12	; 0x0c
    105a:	81 83       	std	Z+1, r24	; 0x01
				
			}
			
			
			packet_read.chip = 0x49;
    105c:	79 82       	std	Y+1, r7	; 0x01
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	b8 01       	movw	r22, r16
    1062:	80 eb       	ldi	r24, 0xB0	; 176
    1064:	94 e0       	ldi	r25, 0x04	; 4
    1066:	1c de       	rcall	.-968    	; 0xca0 <twi_master_transfer>
			
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    1068:	81 11       	cpse	r24, r1
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <main+0xda>
				sensor_data[2] = recieved_data[1];
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	f7 01       	movw	r30, r14
    1070:	82 83       	std	Z+2, r24	; 0x02
				sensor_data[3] = recieved_data[0];
    1072:	8c 85       	ldd	r24, Y+12	; 0x0c
    1074:	83 83       	std	Z+3, r24	; 0x03
			}
			if(spi_isr) continue;
    1076:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    107a:	81 11       	cpse	r24, r1
    107c:	c9 cf       	rjmp	.-110    	; 0x1010 <main+0x74>
			
			packet_read.chip = 0x4A;
    107e:	49 82       	std	Y+1, r4	; 0x01
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	b8 01       	movw	r22, r16
    1084:	80 eb       	ldi	r24, 0xB0	; 176
    1086:	94 e0       	ldi	r25, 0x04	; 4
    1088:	0b de       	rcall	.-1002   	; 0xca0 <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    108a:	81 11       	cpse	r24, r1
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <main+0xfc>
				sensor_data[4] = recieved_data[1];
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	f7 01       	movw	r30, r14
    1092:	84 83       	std	Z+4, r24	; 0x04
				sensor_data[5] = recieved_data[0];
    1094:	8c 85       	ldd	r24, Y+12	; 0x0c
    1096:	85 83       	std	Z+5, r24	; 0x05
			}
			if(spi_isr) continue;
    1098:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    109c:	81 11       	cpse	r24, r1
    109e:	b8 cf       	rjmp	.-144    	; 0x1010 <main+0x74>
			
			packet_read.chip = 0x4B;
    10a0:	39 82       	std	Y+1, r3	; 0x01
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	b8 01       	movw	r22, r16
    10a6:	80 eb       	ldi	r24, 0xB0	; 176
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	fa dd       	rcall	.-1036   	; 0xca0 <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
    10ac:	81 11       	cpse	r24, r1
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <main+0x11e>
				sensor_data[6] = recieved_data[1];
    10b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b2:	f7 01       	movw	r30, r14
    10b4:	86 83       	std	Z+6, r24	; 0x06
				sensor_data[7] = recieved_data[0];
    10b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b8:	87 83       	std	Z+7, r24	; 0x07
			}
			if(spi_isr) continue;
    10ba:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <spi_isr>
    10be:	81 11       	cpse	r24, r1
    10c0:	a7 cf       	rjmp	.-178    	; 0x1010 <main+0x74>
			
			
			time2 = rtc_get_time();
    10c2:	c1 d8       	rcall	.-3710   	; 0x246 <rtc_get_time>
    10c4:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <time2>
    10c8:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <time2+0x1>
    10cc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <time2+0x2>
    10d0:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <time2+0x3>
			time3 = time2-time1;
    10d4:	20 91 2f 20 	lds	r18, 0x202F	; 0x80202f <time1>
    10d8:	30 91 30 20 	lds	r19, 0x2030	; 0x802030 <time1+0x1>
    10dc:	40 91 31 20 	lds	r20, 0x2031	; 0x802031 <time1+0x2>
    10e0:	50 91 32 20 	lds	r21, 0x2032	; 0x802032 <time1+0x3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	82 1b       	sub	r24, r18
    10ea:	93 0b       	sbc	r25, r19
    10ec:	a4 0b       	sbc	r26, r20
    10ee:	b5 0b       	sbc	r27, r21
    10f0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    10f4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    10f8:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    10fc:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
			sensor_data[8] = time3 >> 0;
    1100:	f7 01       	movw	r30, r14
    1102:	80 87       	std	Z+8, r24	; 0x08
			sensor_data[9] = time3 >> 8;
    1104:	91 87       	std	Z+9, r25	; 0x09
			sensor_data[10] = time3 >> 16;
    1106:	a2 87       	std	Z+10, r26	; 0x0a
			sensor_data[11] = time3 >> 24;
    1108:	b3 87       	std	Z+11, r27	; 0x0b
    110a:	82 cf       	rjmp	.-252    	; 0x1010 <main+0x74>

0000110c <_exit>:
    110c:	f8 94       	cli

0000110e <__stop_program>:
    110e:	ff cf       	rjmp	.-2      	; 0x110e <__stop_program>
