
SPI_Communication_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000f26  00000fba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00802006  00802006  00000fc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008cf4  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004838  00000000  00000000  00009e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d94  00000000  00000000  0000e6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  00011460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003243a  00000000  00000000  00011904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014cd  00000000  00000000  00043d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0004520b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b2ea  00000000  00000000  0004537b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	8d c2       	rjmp	.+1306   	; 0x550 <__vector_13>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	15 c5       	rjmp	.+2602   	; 0xa8c <__vector_24>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	af c2       	rjmp	.+1374   	; 0x618 <__vector_46>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	41 c2       	rjmp	.+1154   	; 0x5b4 <__vector_76>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	67 c2       	rjmp	.+1230   	; 0x67c <__vector_107>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 e2       	ldi	r30, 0x26	; 38
 21c:	ff e0       	ldi	r31, 0x0F	; 15
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a6 e0       	ldi	r26, 0x06	; 6
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a2 33       	cpi	r26, 0x32	; 50
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	46 d4       	rcall	.+2188   	; 0xace <main>
 242:	6f c6       	rjmp	.+3294   	; 0xf22 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	1f 92       	push	r1
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 250:	9f b7       	in	r25, 0x3f	; 63
 252:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 254:	f8 94       	cli
	return flags;
 256:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 258:	e8 2f       	mov	r30, r24
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	e0 59       	subi	r30, 0x90	; 144
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	60 95       	com	r22
 262:	80 81       	ld	r24, Z
 264:	68 23       	and	r22, r24
 266:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 268:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <crc_io_checksum_byte_start>:
 * the module and get the calculated checksum.
 *
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 */
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 *
 */
static inline void crc_reset(void)
{
	// Reset module
	CRC_CTRL |= CRC_RESET_RESET0_gc;
 276:	e0 ed       	ldi	r30, 0xD0	; 208
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	90 68       	ori	r25, 0x80	; 128
 27e:	90 83       	st	Z, r25

	// Set initial checksum value
	CRC.CHECKSUM0 = crc_initial_value & 0xFF;
 280:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <__data_end>
 284:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <__data_end+0x1>
 288:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <__data_end+0x2>
 28c:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <__data_end+0x3>
 290:	44 83       	std	Z+4, r20	; 0x04
	CRC.CHECKSUM1 = (crc_initial_value >> 8) & 0xFF;
 292:	05 2f       	mov	r16, r21
 294:	16 2f       	mov	r17, r22
 296:	27 2f       	mov	r18, r23
 298:	33 27       	eor	r19, r19
 29a:	05 83       	std	Z+5, r16	; 0x05
	CRC.CHECKSUM2 = (crc_initial_value >> 16) & 0xFF;
 29c:	8b 01       	movw	r16, r22
 29e:	22 27       	eor	r18, r18
 2a0:	33 27       	eor	r19, r19
 2a2:	06 83       	std	Z+6, r16	; 0x06
	CRC.CHECKSUM3 = (crc_initial_value >> 24) & 0xFF;
 2a4:	47 2f       	mov	r20, r23
 2a6:	55 27       	eor	r21, r21
 2a8:	66 27       	eor	r22, r22
 2aa:	77 27       	eor	r23, r23
 2ac:	47 83       	std	Z+7, r20	; 0x07

	crc_initial_value = 0;
 2ae:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
 2b2:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
 2b6:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <__data_end+0x2>
 2ba:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <__data_end+0x3>
void crc_io_checksum_byte_start(enum crc_16_32_t crc_16_32)
{
	// Initialize CRC calculations on I/O interface
	crc_reset();
	// Enable CRC-32 if chosen
	if (crc_16_32 == CRC_32BIT) {
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <crc_io_checksum_byte_start+0x56>
 * \note This cannot be changed while the busy flag is set.
 *
 */
static inline void crc_32_enable(void)
{
	CRC_CTRL |= CRC_CRC32_bm;
 2c2:	80 81       	ld	r24, Z
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	80 83       	st	Z, r24
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
 2c8:	e0 ed       	ldi	r30, 0xD0	; 208
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	80 7f       	andi	r24, 0xF0	; 240
 2d0:	80 83       	st	Z, r24
	CRC_CTRL |= source;
 2d2:	80 81       	ld	r24, Z
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	80 83       	st	Z, r24
	if (crc_16_32 == CRC_32BIT) {
		crc_32_enable();
	}
	// Enable CRC module using the I/O interface
	crc_set_source(CRC_SOURCE_IO_gc);
}
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <crc_io_checksum_byte_stop>:
 *
 * \retval checksum checksum
 *
 */
uint32_t crc_io_checksum_byte_stop(void)
{
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;
 2e6:	e1 ed       	ldi	r30, 0xD1	; 209
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	80 83       	st	Z, r24
 * \retval false if module is not busy
 *
 */
static inline bool crc_is_busy(void)
{
	return ((CRC_STATUS & CRC_BUSY_bm) == CRC_BUSY_bm);
 2f0:	80 81       	ld	r24, Z
 * \return checksum checksum value
 */
static inline uint32_t crc_checksum_read(void)
{
	// Wait until the CRC conversion is finished
	while (crc_is_busy()) {
 2f2:	80 fd       	sbrc	r24, 0
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <crc_io_checksum_byte_stop+0x12>
		// Do nothing
	}

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
 2f6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 2fa:	85 ff       	sbrs	r24, 5
 2fc:	2e c0       	rjmp	.+92     	; 0x35a <crc_io_checksum_byte_stop+0x7c>
 */
static inline uint32_t crc32_checksum_read(void)
{
	uint32_t checksum;

	checksum = ((uint32_t)CRC_CHECKSUM0 & 0x000000FF);
 2fe:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint32_t)CRC_CHECKSUM1 << 8) & 0x0000FF00);
 302:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	checksum |= (((uint32_t)CRC_CHECKSUM2 << 16) & 0x00FF0000);
 306:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	checksum |= (((uint32_t)CRC_CHECKSUM3 << 24) & 0xFF000000);
 30a:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7000d7>
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	72 2b       	or	r23, r18
 316:	59 2b       	or	r21, r25
 318:	68 2b       	or	r22, r24
 31a:	20 e2       	ldi	r18, 0x20	; 32
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	dc 01       	movw	r26, r24
		result = (result << 1) + (value & 1);
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	6a 01       	movw	r12, r20
 32c:	7b 01       	movw	r14, r22
 32e:	31 e0       	ldi	r19, 0x01	; 1
 330:	c3 22       	and	r12, r19
 332:	dd 24       	eor	r13, r13
 334:	ee 24       	eor	r14, r14
 336:	ff 24       	eor	r15, r15
 338:	8c 0d       	add	r24, r12
 33a:	9d 1d       	adc	r25, r13
 33c:	ae 1d       	adc	r26, r14
 33e:	bf 1d       	adc	r27, r15
		value >>= 1;
 340:	76 95       	lsr	r23
 342:	67 95       	ror	r22
 344:	57 95       	ror	r21
 346:	47 95       	ror	r20
 348:	21 50       	subi	r18, 0x01	; 1
static inline uint32_t crc_bit_revert(uint32_t value)
{
	uint32_t result;
	uint8_t i;

	for (result = i = 0; i < 32; i++) {
 34a:	59 f7       	brne	.-42     	; 0x322 <crc_io_checksum_byte_stop+0x44>

	// Bit reverse the result (to comply with IEEE 802.3 CRC-32)
	checksum = crc_bit_revert(checksum);

	// Complement the result (to comply with IEEE 802.3 CRC-32)
	checksum = ~checksum;
 34c:	bc 01       	movw	r22, r24
 34e:	cd 01       	movw	r24, r26
 350:	60 95       	com	r22
 352:	70 95       	com	r23
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	08 c0       	rjmp	.+16     	; 0x36a <crc_io_checksum_byte_stop+0x8c>
 */
static inline uint16_t crc16_checksum_read(void)
{
	uint16_t checksum;
	checksum = 0;
	checksum = ((uint16_t)CRC_CHECKSUM0 & 0x00FF);
 35a:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	checksum |= (((uint16_t)CRC_CHECKSUM1 << 8) & 0xFF00);
 35e:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	78 2b       	or	r23, r24

	// Check if we have a 32 or 16 bit checksum and return the correct one
	if ((CRC_CTRL & CRC_CRC32_bm) == CRC_CRC32_bm) {
		return crc32_checksum_read();
	} else {
		return crc16_checksum_read();
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param source the data source for the CRC module
 */
static inline void crc_set_source(CRC_SOURCE_t source)
{
	CRC_CTRL &= ~CRC_SOURCE_gm;
 36a:	e0 ed       	ldi	r30, 0xD0	; 208
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	20 81       	ld	r18, Z
 370:	20 7f       	andi	r18, 0xF0	; 240
 372:	20 83       	st	Z, r18
	CRC_CTRL |= source;
 374:	20 81       	ld	r18, Z
 376:	20 83       	st	Z, r18
	// Signal CRC complete
	CRC_STATUS |= CRC_BUSY_bm;

	// Stop CRC and return checksum
	return crc_checksum_complete();
}
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	df 90       	pop	r13
 37e:	cf 90       	pop	r12
 380:	08 95       	ret

00000382 <crc_io_checksum>:
 * \param crc_16_32     enum to indicate whether CRC-32 or CRC-16 shall be used
 *
 * \return checksum checksum
 */
uint32_t crc_io_checksum(void *data, uint16_t len, enum crc_16_32_t crc_16_32)
{
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	ec 01       	movw	r28, r24
 38c:	8b 01       	movw	r16, r22
 38e:	84 2f       	mov	r24, r20
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);
 390:	70 df       	rcall	.-288    	; 0x272 <crc_io_checksum_byte_start>

	// Write data to DATAIN register
	while (len--) {
 392:	01 15       	cp	r16, r1
 394:	11 05       	cpc	r17, r1
 396:	51 f0       	breq	.+20     	; 0x3ac <crc_io_checksum+0x2a>
 398:	be 01       	movw	r22, r28
 39a:	60 0f       	add	r22, r16
 39c:	71 1f       	adc	r23, r17
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
 39e:	e3 ed       	ldi	r30, 0xD3	; 211
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
		crc_io_checksum_byte_add(*(uint8_t*)data);
 3a2:	89 91       	ld	r24, Y+
 * \param data  data to perform CRC on
 *
 */
void crc_io_checksum_byte_add(uint8_t data)
{
	CRC_DATAIN = data;
 3a4:	80 83       	st	Z, r24
{
	// Initialize CRC calculations on I/O interface
	crc_io_checksum_byte_start(crc_16_32);

	// Write data to DATAIN register
	while (len--) {
 3a6:	c6 17       	cp	r28, r22
 3a8:	d7 07       	cpc	r29, r23
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <crc_io_checksum+0x20>
		crc_io_checksum_byte_add(*(uint8_t*)data);
		data = (uint8_t*)data + 1;
	}

	// Return checksum
	return crc_io_checksum_byte_stop();
 3ac:	98 df       	rcall	.-208    	; 0x2de <crc_io_checksum_byte_stop>
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	fc 01       	movw	r30, r24
 3be:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 3c4:	c6 2f       	mov	r28, r22
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	de 01       	movw	r26, r28
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <ioport_configure_port_pin+0x1a>
 3ce:	b5 95       	asr	r27
 3d0:	a7 95       	ror	r26
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <ioport_configure_port_pin+0x16>
 3d6:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 3d8:	50 83       	st	Z, r21
 3da:	2f 5f       	subi	r18, 0xFF	; 255
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 3e0:	28 30       	cpi	r18, 0x08	; 8
 3e2:	31 05       	cpc	r19, r1
 3e4:	89 f7       	brne	.-30     	; 0x3c8 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 3e6:	40 ff       	sbrs	r20, 0
 3e8:	0a c0       	rjmp	.+20     	; 0x3fe <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 3ea:	41 ff       	sbrs	r20, 1
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 3ee:	fc 01       	movw	r30, r24
 3f0:	65 83       	std	Z+5, r22	; 0x05
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 3f4:	fc 01       	movw	r30, r24
 3f6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 3f8:	fc 01       	movw	r30, r24
 3fa:	61 83       	std	Z+1, r22	; 0x01
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 3fe:	fc 01       	movw	r30, r24
 400:	62 83       	std	Z+2, r22	; 0x02
	}
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 408:	43 e0       	ldi	r20, 0x03	; 3
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	68 e0       	ldi	r22, 0x08	; 8
 40e:	80 ec       	ldi	r24, 0xC0	; 192
 410:	97 e0       	ldi	r25, 0x07	; 7
 412:	d2 df       	rcall	.-92     	; 0x3b8 <ioport_configure_port_pin>
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	58 e1       	ldi	r21, 0x18	; 24
 418:	64 e0       	ldi	r22, 0x04	; 4
 41a:	80 ec       	ldi	r24, 0xC0	; 192
 41c:	97 e0       	ldi	r25, 0x07	; 7
 41e:	cc cf       	rjmp	.-104    	; 0x3b8 <ioport_configure_port_pin>
 420:	08 95       	ret

00000422 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 426:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <transfer>
 42a:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <transfer+0x1>
 42e:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 430:	83 ff       	sbrs	r24, 3
 432:	08 c0       	rjmp	.+16     	; 0x444 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 434:	88 60       	ori	r24, 0x08	; 8
 436:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 43c:	86 ef       	ldi	r24, 0xF6	; 246
 43e:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <transfer+0xa>
 442:	83 c0       	rjmp	.+262    	; 0x54a <twim_interrupt_handler+0x128>
 444:	98 2f       	mov	r25, r24
 446:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 448:	31 f0       	breq	.+12     	; 0x456 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <transfer+0xa>
 454:	7a c0       	rjmp	.+244    	; 0x54a <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 456:	86 ff       	sbrs	r24, 6
 458:	43 c0       	rjmp	.+134    	; 0x4e0 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 45a:	ca e0       	ldi	r28, 0x0A	; 10
 45c:	d0 e2       	ldi	r29, 0x20	; 32
 45e:	aa 81       	ldd	r26, Y+2	; 0x02
 460:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 462:	8c 81       	ldd	r24, Y+4	; 0x04
 464:	9d 81       	ldd	r25, Y+5	; 0x05
 466:	14 96       	adiw	r26, 0x04	; 4
 468:	2d 91       	ld	r18, X+
 46a:	3c 91       	ld	r19, X
 46c:	15 97       	sbiw	r26, 0x05	; 5
 46e:	82 17       	cp	r24, r18
 470:	93 07       	cpc	r25, r19
 472:	6c f4       	brge	.+26     	; 0x48e <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 474:	9c 01       	movw	r18, r24
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	20 93 0e 20 	sts	0x200E, r18	; 0x80200e <transfer+0x4>
 47e:	30 93 0f 20 	sts	0x200F, r19	; 0x80200f <transfer+0x5>
 482:	a8 0f       	add	r26, r24
 484:	b9 1f       	adc	r27, r25
 486:	11 96       	adiw	r26, 0x01	; 1
 488:	8c 91       	ld	r24, X
 48a:	87 83       	std	Z+7, r24	; 0x07
 48c:	5e c0       	rjmp	.+188    	; 0x54a <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
 48e:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <transfer+0x6>
 492:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <transfer+0x7>
 496:	18 96       	adiw	r26, 0x08	; 8
 498:	2d 91       	ld	r18, X+
 49a:	3c 91       	ld	r19, X
 49c:	19 97       	sbiw	r26, 0x09	; 9
 49e:	82 17       	cp	r24, r18
 4a0:	93 07       	cpc	r25, r19
 4a2:	c8 f4       	brcc	.+50     	; 0x4d6 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
 4a4:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <transfer+0x8>
 4a8:	22 23       	and	r18, r18
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 4ac:	86 81       	ldd	r24, Z+6	; 0x06
 4ae:	81 60       	ori	r24, 0x01	; 1
 4b0:	86 83       	std	Z+6, r24	; 0x06
 4b2:	4b c0       	rjmp	.+150    	; 0x54a <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
 4b4:	16 96       	adiw	r26, 0x06	; 6
 4b6:	2d 91       	ld	r18, X+
 4b8:	3c 91       	ld	r19, X
 4ba:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 4bc:	ac 01       	movw	r20, r24
 4be:	4f 5f       	subi	r20, 0xFF	; 255
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255
 4c2:	40 93 10 20 	sts	0x2010, r20	; 0x802010 <transfer+0x6>
 4c6:	50 93 11 20 	sts	0x2011, r21	; 0x802011 <transfer+0x7>
 4ca:	d9 01       	movw	r26, r18
 4cc:	a8 0f       	add	r26, r24
 4ce:	b9 1f       	adc	r27, r25
 4d0:	8c 91       	ld	r24, X
 4d2:	87 83       	std	Z+7, r24	; 0x07
 4d4:	3a c0       	rjmp	.+116    	; 0x54a <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 4da:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <transfer+0xa>
 4de:	35 c0       	rjmp	.+106    	; 0x54a <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 4e0:	88 23       	and	r24, r24
 4e2:	84 f5       	brge	.+96     	; 0x544 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 4e4:	aa e0       	ldi	r26, 0x0A	; 10
 4e6:	b0 e2       	ldi	r27, 0x20	; 32
 4e8:	12 96       	adiw	r26, 0x02	; 2
 4ea:	cd 91       	ld	r28, X+
 4ec:	dc 91       	ld	r29, X
 4ee:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 4f0:	16 96       	adiw	r26, 0x06	; 6
 4f2:	8d 91       	ld	r24, X+
 4f4:	9c 91       	ld	r25, X
 4f6:	17 97       	sbiw	r26, 0x07	; 7
 4f8:	28 85       	ldd	r18, Y+8	; 0x08
 4fa:	39 85       	ldd	r19, Y+9	; 0x09
 4fc:	82 17       	cp	r24, r18
 4fe:	93 07       	cpc	r25, r19
 500:	d8 f4       	brcc	.+54     	; 0x538 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
 502:	6e 81       	ldd	r22, Y+6	; 0x06
 504:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 506:	9c 01       	movw	r18, r24
 508:	2f 5f       	subi	r18, 0xFF	; 255
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <transfer+0x6>
 510:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <transfer+0x7>
 514:	47 81       	ldd	r20, Z+7	; 0x07
 516:	db 01       	movw	r26, r22
 518:	a8 0f       	add	r26, r24
 51a:	b9 1f       	adc	r27, r25
 51c:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 51e:	88 85       	ldd	r24, Y+8	; 0x08
 520:	99 85       	ldd	r25, Y+9	; 0x09
 522:	28 17       	cp	r18, r24
 524:	39 07       	cpc	r19, r25
 526:	18 f4       	brcc	.+6      	; 0x52e <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	83 83       	std	Z+3, r24	; 0x03
 52c:	0e c0       	rjmp	.+28     	; 0x54a <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 52e:	87 e0       	ldi	r24, 0x07	; 7
 530:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 532:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <transfer+0xa>
 536:	09 c0       	rjmp	.+18     	; 0x54a <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 53c:	89 ef       	ldi	r24, 0xF9	; 249
 53e:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <transfer+0xa>
 542:	03 c0       	rjmp	.+6      	; 0x54a <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 544:	8b ef       	ldi	r24, 0xFB	; 251
 546:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <transfer+0xa>
	}
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	08 b6       	in	r0, 0x38	; 56
 55c:	0f 92       	push	r0
 55e:	18 be       	out	0x38, r1	; 56
 560:	09 b6       	in	r0, 0x39	; 57
 562:	0f 92       	push	r0
 564:	19 be       	out	0x39, r1	; 57
 566:	0b b6       	in	r0, 0x3b	; 59
 568:	0f 92       	push	r0
 56a:	1b be       	out	0x3b, r1	; 59
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
 584:	4e df       	rcall	.-356    	; 0x422 <twim_interrupt_handler>
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0b be       	out	0x3b, r0	; 59
 5a2:	0f 90       	pop	r0
 5a4:	09 be       	out	0x39, r0	; 57
 5a6:	0f 90       	pop	r0
 5a8:	08 be       	out	0x38, r0	; 56
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	08 b6       	in	r0, 0x38	; 56
 5c0:	0f 92       	push	r0
 5c2:	18 be       	out	0x38, r1	; 56
 5c4:	09 b6       	in	r0, 0x39	; 57
 5c6:	0f 92       	push	r0
 5c8:	19 be       	out	0x39, r1	; 57
 5ca:	0b b6       	in	r0, 0x3b	; 59
 5cc:	0f 92       	push	r0
 5ce:	1b be       	out	0x3b, r1	; 59
 5d0:	2f 93       	push	r18
 5d2:	3f 93       	push	r19
 5d4:	4f 93       	push	r20
 5d6:	5f 93       	push	r21
 5d8:	6f 93       	push	r22
 5da:	7f 93       	push	r23
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
 5e0:	af 93       	push	r26
 5e2:	bf 93       	push	r27
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
 5e8:	1c df       	rcall	.-456    	; 0x422 <twim_interrupt_handler>
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0b be       	out	0x3b, r0	; 59
 606:	0f 90       	pop	r0
 608:	09 be       	out	0x39, r0	; 57
 60a:	0f 90       	pop	r0
 60c:	08 be       	out	0x38, r0	; 56
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 618:	1f 92       	push	r1
 61a:	0f 92       	push	r0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	0f 92       	push	r0
 620:	11 24       	eor	r1, r1
 622:	08 b6       	in	r0, 0x38	; 56
 624:	0f 92       	push	r0
 626:	18 be       	out	0x38, r1	; 56
 628:	09 b6       	in	r0, 0x39	; 57
 62a:	0f 92       	push	r0
 62c:	19 be       	out	0x39, r1	; 57
 62e:	0b b6       	in	r0, 0x3b	; 59
 630:	0f 92       	push	r0
 632:	1b be       	out	0x3b, r1	; 59
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
 64c:	ea de       	rcall	.-556    	; 0x422 <twim_interrupt_handler>
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	0b be       	out	0x3b, r0	; 59
 66a:	0f 90       	pop	r0
 66c:	09 be       	out	0x39, r0	; 57
 66e:	0f 90       	pop	r0
 670:	08 be       	out	0x38, r0	; 56
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
 67c:	1f 92       	push	r1
 67e:	0f 92       	push	r0
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	0f 92       	push	r0
 684:	11 24       	eor	r1, r1
 686:	08 b6       	in	r0, 0x38	; 56
 688:	0f 92       	push	r0
 68a:	18 be       	out	0x38, r1	; 56
 68c:	09 b6       	in	r0, 0x39	; 57
 68e:	0f 92       	push	r0
 690:	19 be       	out	0x39, r1	; 57
 692:	0b b6       	in	r0, 0x3b	; 59
 694:	0f 92       	push	r0
 696:	1b be       	out	0x3b, r1	; 59
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31
 6b0:	b8 de       	rcall	.-656    	; 0x422 <twim_interrupt_handler>
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	0f 90       	pop	r0
 6cc:	0b be       	out	0x3b, r0	; 59
 6ce:	0f 90       	pop	r0
 6d0:	09 be       	out	0x39, r0	; 57
 6d2:	0f 90       	pop	r0
 6d4:	08 be       	out	0x38, r0	; 56
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
 6e0:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
 6e2:	db 01       	movw	r26, r22
 6e4:	14 96       	adiw	r26, 0x04	; 4
 6e6:	8c 91       	ld	r24, X
 6e8:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
 6ea:	88 eb       	ldi	r24, 0xB8	; 184
 6ec:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
 6f2:	ea e0       	ldi	r30, 0x0A	; 10
 6f4:	f0 e2       	ldi	r31, 0x20	; 32
 6f6:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
 6f8:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
 6fa:	e0 ea       	ldi	r30, 0xA0	; 160
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	82 81       	ldd	r24, Z+2	; 0x02
 700:	82 60       	ori	r24, 0x02	; 2
 702:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
 704:	78 94       	sei

	return STATUS_OK;
}
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret

0000070a <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	1f 92       	push	r1
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
 716:	89 2b       	or	r24, r25
 718:	09 f4       	brne	.+2      	; 0x71c <twi_master_transfer+0x12>
 71a:	4b c0       	rjmp	.+150    	; 0x7b2 <twi_master_transfer+0xa8>
 71c:	61 15       	cp	r22, r1
 71e:	71 05       	cpc	r23, r1
 720:	09 f4       	brne	.+2      	; 0x724 <twi_master_transfer+0x1a>
 722:	49 c0       	rjmp	.+146    	; 0x7b6 <twi_master_transfer+0xac>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
 724:	fb 01       	movw	r30, r22
 726:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
 728:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <transfer+0x9>
 72c:	88 23       	and	r24, r24
 72e:	19 f0       	breq	.+6      	; 0x736 <twi_master_transfer+0x2c>

		if (no_wait) { return ERR_BUSY; }
 730:	99 23       	and	r25, r25
 732:	f1 f3       	breq	.-4      	; 0x730 <twi_master_transfer+0x26>
 734:	42 c0       	rjmp	.+132    	; 0x7ba <twi_master_transfer+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 736:	8f b7       	in	r24, 0x3f	; 63
 738:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 73a:	f8 94       	cli
	return flags;
 73c:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
 73e:	ea e0       	ldi	r30, 0x0A	; 10
 740:	f0 e2       	ldi	r31, 0x20	; 32
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
 746:	90 e8       	ldi	r25, 0x80	; 128
 748:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 74a:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
 74c:	a0 83       	st	Z, r26
 74e:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
 750:	62 83       	std	Z+2, r22	; 0x02
 752:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
 754:	14 82       	std	Z+4, r1	; 0x04
 756:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
 758:	16 82       	std	Z+6, r1	; 0x06
 75a:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
 75c:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
 75e:	fb 01       	movw	r30, r22
 760:	80 81       	ld	r24, Z
 762:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
 764:	24 81       	ldd	r18, Z+4	; 0x04
 766:	35 81       	ldd	r19, Z+5	; 0x05
 768:	23 2b       	or	r18, r19
 76a:	11 f4       	brne	.+4      	; 0x770 <twi_master_transfer+0x66>
 76c:	41 11       	cpse	r20, r1
 76e:	03 c0       	rjmp	.+6      	; 0x776 <twi_master_transfer+0x6c>
			transfer.bus->MASTER.ADDR = chip;
 770:	16 96       	adiw	r26, 0x06	; 6
 772:	8c 93       	st	X, r24
 774:	03 c0       	rjmp	.+6      	; 0x77c <twi_master_transfer+0x72>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
 776:	81 60       	ori	r24, 0x01	; 1
 778:	16 96       	adiw	r26, 0x06	; 6
 77a:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
 77c:	ea e0       	ldi	r30, 0x0A	; 10
 77e:	f0 e2       	ldi	r31, 0x20	; 32
 780:	82 85       	ldd	r24, Z+10	; 0x0a
 782:	80 38       	cpi	r24, 0x80	; 128
 784:	e9 f3       	breq	.-6      	; 0x780 <twi_master_transfer+0x76>

	while (! twim_idle(transfer.bus)) { barrier(); }
 786:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <transfer>
 78a:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <transfer+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
 78e:	84 81       	ldd	r24, Z+4	; 0x04
 790:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	49 f0       	breq	.+18     	; 0x7a8 <twi_master_transfer+0x9e>
 796:	aa e0       	ldi	r26, 0x0A	; 10
 798:	b0 e2       	ldi	r27, 0x20	; 32
 79a:	ed 91       	ld	r30, X+
 79c:	fc 91       	ld	r31, X
 79e:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
 7a0:	84 81       	ldd	r24, Z+4	; 0x04
 7a2:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	c9 f7       	brne	.-14     	; 0x79a <twi_master_transfer+0x90>

	status_code_t const status = transfer.status;
 7a8:	ea e0       	ldi	r30, 0x0A	; 10
 7aa:	f0 e2       	ldi	r31, 0x20	; 32
 7ac:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
 7ae:	11 86       	std	Z+9, r1	; 0x09
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <twi_master_transfer+0xb2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
 7b2:	88 ef       	ldi	r24, 0xF8	; 248
 7b4:	03 c0       	rjmp	.+6      	; 0x7bc <twi_master_transfer+0xb2>
 7b6:	88 ef       	ldi	r24, 0xF8	; 248
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <twi_master_transfer+0xb2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
 7ba:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
 7bc:	0f 90       	pop	r0
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <twi_master_setup>:

typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ec 01       	movw	r28, r24
 7ce:	8b 01       	movw	r16, r22
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
 7d0:	fb 01       	movw	r30, r22
 7d2:	80 81       	ld	r24, Z
 7d4:	91 81       	ldd	r25, Z+1	; 0x01
 7d6:	a2 81       	ldd	r26, Z+2	; 0x02
 7d8:	b3 81       	ldd	r27, Z+3	; 0x03
 7da:	9c 01       	movw	r18, r24
 7dc:	ad 01       	movw	r20, r26
 7de:	22 0f       	add	r18, r18
 7e0:	33 1f       	adc	r19, r19
 7e2:	44 1f       	adc	r20, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	60 e8       	ldi	r22, 0x80	; 128
 7e8:	74 e8       	ldi	r23, 0x84	; 132
 7ea:	8e e1       	ldi	r24, 0x1E	; 30
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	77 d3       	rcall	.+1774   	; 0xede <__udivmodsi4>
 7f0:	da 01       	movw	r26, r20
 7f2:	c9 01       	movw	r24, r18
 7f4:	05 97       	sbiw	r24, 0x05	; 5
 7f6:	a1 09       	sbc	r26, r1
 7f8:	b1 09       	sbc	r27, r1
 7fa:	f8 01       	movw	r30, r16
 7fc:	84 83       	std	Z+4, r24	; 0x04
 7fe:	95 83       	std	Z+5, r25	; 0x05
 800:	a6 83       	std	Z+6, r26	; 0x06
 802:	b7 83       	std	Z+7, r27	; 0x07
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 804:	20 97       	sbiw	r28, 0x00	; 0
 806:	09 f4       	brne	.+2      	; 0x80a <twi_master_setup+0x46>
 808:	36 c1       	rjmp	.+620    	; 0xa76 <twi_master_setup+0x2b2>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 80a:	c0 3c       	cpi	r28, 0xC0	; 192
 80c:	d1 05       	cpc	r29, r1
 80e:	21 f4       	brne	.+8      	; 0x818 <twi_master_setup+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 810:	60 e1       	ldi	r22, 0x10	; 16
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	18 dd       	rcall	.-1488   	; 0x246 <sysclk_enable_module>
 816:	2f c1       	rjmp	.+606    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
 818:	c0 34       	cpi	r28, 0x40	; 64
 81a:	f4 e0       	ldi	r31, 0x04	; 4
 81c:	df 07       	cpc	r29, r31
 81e:	21 f4       	brne	.+8      	; 0x828 <twi_master_setup+0x64>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
 820:	68 e0       	ldi	r22, 0x08	; 8
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	10 dd       	rcall	.-1504   	; 0x246 <sysclk_enable_module>
 826:	27 c1       	rjmp	.+590    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 828:	c1 15       	cp	r28, r1
 82a:	84 e0       	ldi	r24, 0x04	; 4
 82c:	d8 07       	cpc	r29, r24
 82e:	21 f4       	brne	.+8      	; 0x838 <twi_master_setup+0x74>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 830:	64 e0       	ldi	r22, 0x04	; 4
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	08 dd       	rcall	.-1520   	; 0x246 <sysclk_enable_module>
 836:	1f c1       	rjmp	.+574    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 838:	c0 38       	cpi	r28, 0x80	; 128
 83a:	e1 e0       	ldi	r30, 0x01	; 1
 83c:	de 07       	cpc	r29, r30
 83e:	21 f4       	brne	.+8      	; 0x848 <twi_master_setup+0x84>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 840:	62 e0       	ldi	r22, 0x02	; 2
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	00 dd       	rcall	.-1536   	; 0x246 <sysclk_enable_module>
 846:	17 c1       	rjmp	.+558    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 848:	c1 15       	cp	r28, r1
 84a:	f1 e0       	ldi	r31, 0x01	; 1
 84c:	df 07       	cpc	r29, r31
 84e:	21 f4       	brne	.+8      	; 0x858 <twi_master_setup+0x94>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 850:	61 e0       	ldi	r22, 0x01	; 1
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	f8 dc       	rcall	.-1552   	; 0x246 <sysclk_enable_module>
 856:	0f c1       	rjmp	.+542    	; 0xa76 <twi_master_setup+0x2b2>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 858:	c0 38       	cpi	r28, 0x80	; 128
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	d8 07       	cpc	r29, r24
 85e:	21 f4       	brne	.+8      	; 0x868 <twi_master_setup+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 860:	61 e0       	ldi	r22, 0x01	; 1
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	f0 dc       	rcall	.-1568   	; 0x246 <sysclk_enable_module>
 866:	07 c1       	rjmp	.+526    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 868:	c0 39       	cpi	r28, 0x90	; 144
 86a:	e3 e0       	ldi	r30, 0x03	; 3
 86c:	de 07       	cpc	r29, r30
 86e:	21 f4       	brne	.+8      	; 0x878 <twi_master_setup+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	e8 dc       	rcall	.-1584   	; 0x246 <sysclk_enable_module>
 876:	ff c0       	rjmp	.+510    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 878:	c1 15       	cp	r28, r1
 87a:	f2 e0       	ldi	r31, 0x02	; 2
 87c:	df 07       	cpc	r29, r31
 87e:	21 f4       	brne	.+8      	; 0x888 <twi_master_setup+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 880:	62 e0       	ldi	r22, 0x02	; 2
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	e0 dc       	rcall	.-1600   	; 0x246 <sysclk_enable_module>
 886:	f7 c0       	rjmp	.+494    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 888:	c0 34       	cpi	r28, 0x40	; 64
 88a:	82 e0       	ldi	r24, 0x02	; 2
 88c:	d8 07       	cpc	r29, r24
 88e:	21 f4       	brne	.+8      	; 0x898 <twi_master_setup+0xd4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 890:	62 e0       	ldi	r22, 0x02	; 2
 892:	82 e0       	ldi	r24, 0x02	; 2
 894:	d8 dc       	rcall	.-1616   	; 0x246 <sysclk_enable_module>
 896:	ef c0       	rjmp	.+478    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
 898:	c1 15       	cp	r28, r1
 89a:	e3 e0       	ldi	r30, 0x03	; 3
 89c:	de 07       	cpc	r29, r30
 89e:	21 f4       	brne	.+8      	; 0x8a8 <twi_master_setup+0xe4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
 8a0:	64 e0       	ldi	r22, 0x04	; 4
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	d0 dc       	rcall	.-1632   	; 0x246 <sysclk_enable_module>
 8a6:	e7 c0       	rjmp	.+462    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 8a8:	c0 32       	cpi	r28, 0x20	; 32
 8aa:	f3 e0       	ldi	r31, 0x03	; 3
 8ac:	df 07       	cpc	r29, r31
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <twi_master_setup+0xf4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 8b0:	64 e0       	ldi	r22, 0x04	; 4
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	c8 dc       	rcall	.-1648   	; 0x246 <sysclk_enable_module>
 8b6:	df c0       	rjmp	.+446    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 8b8:	c1 15       	cp	r28, r1
 8ba:	88 e0       	ldi	r24, 0x08	; 8
 8bc:	d8 07       	cpc	r29, r24
 8be:	21 f4       	brne	.+8      	; 0x8c8 <twi_master_setup+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 8c0:	61 e0       	ldi	r22, 0x01	; 1
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	c0 dc       	rcall	.-1664   	; 0x246 <sysclk_enable_module>
 8c6:	d7 c0       	rjmp	.+430    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 8c8:	c1 15       	cp	r28, r1
 8ca:	e9 e0       	ldi	r30, 0x09	; 9
 8cc:	de 07       	cpc	r29, r30
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <twi_master_setup+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	84 e0       	ldi	r24, 0x04	; 4
 8d4:	b8 dc       	rcall	.-1680   	; 0x246 <sysclk_enable_module>
 8d6:	cf c0       	rjmp	.+414    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 8d8:	c1 15       	cp	r28, r1
 8da:	fa e0       	ldi	r31, 0x0A	; 10
 8dc:	df 07       	cpc	r29, r31
 8de:	21 f4       	brne	.+8      	; 0x8e8 <twi_master_setup+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 8e0:	61 e0       	ldi	r22, 0x01	; 1
 8e2:	85 e0       	ldi	r24, 0x05	; 5
 8e4:	b0 dc       	rcall	.-1696   	; 0x246 <sysclk_enable_module>
 8e6:	c7 c0       	rjmp	.+398    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 8e8:	c1 15       	cp	r28, r1
 8ea:	8b e0       	ldi	r24, 0x0B	; 11
 8ec:	d8 07       	cpc	r29, r24
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <twi_master_setup+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	86 e0       	ldi	r24, 0x06	; 6
 8f4:	a8 dc       	rcall	.-1712   	; 0x246 <sysclk_enable_module>
 8f6:	bf c0       	rjmp	.+382    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 8f8:	c0 34       	cpi	r28, 0x40	; 64
 8fa:	e8 e0       	ldi	r30, 0x08	; 8
 8fc:	de 07       	cpc	r29, r30
 8fe:	21 f4       	brne	.+8      	; 0x908 <twi_master_setup+0x144>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 900:	62 e0       	ldi	r22, 0x02	; 2
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	a0 dc       	rcall	.-1728   	; 0x246 <sysclk_enable_module>
 906:	b7 c0       	rjmp	.+366    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 908:	c0 34       	cpi	r28, 0x40	; 64
 90a:	f9 e0       	ldi	r31, 0x09	; 9
 90c:	df 07       	cpc	r29, r31
 90e:	21 f4       	brne	.+8      	; 0x918 <twi_master_setup+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 910:	62 e0       	ldi	r22, 0x02	; 2
 912:	84 e0       	ldi	r24, 0x04	; 4
 914:	98 dc       	rcall	.-1744   	; 0x246 <sysclk_enable_module>
 916:	af c0       	rjmp	.+350    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 918:	c0 34       	cpi	r28, 0x40	; 64
 91a:	8a e0       	ldi	r24, 0x0A	; 10
 91c:	d8 07       	cpc	r29, r24
 91e:	21 f4       	brne	.+8      	; 0x928 <twi_master_setup+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 920:	62 e0       	ldi	r22, 0x02	; 2
 922:	85 e0       	ldi	r24, 0x05	; 5
 924:	90 dc       	rcall	.-1760   	; 0x246 <sysclk_enable_module>
 926:	a7 c0       	rjmp	.+334    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
 928:	c0 34       	cpi	r28, 0x40	; 64
 92a:	eb e0       	ldi	r30, 0x0B	; 11
 92c:	de 07       	cpc	r29, r30
 92e:	21 f4       	brne	.+8      	; 0x938 <twi_master_setup+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
 930:	62 e0       	ldi	r22, 0x02	; 2
 932:	86 e0       	ldi	r24, 0x06	; 6
 934:	88 dc       	rcall	.-1776   	; 0x246 <sysclk_enable_module>
 936:	9f c0       	rjmp	.+318    	; 0xa76 <twi_master_setup+0x2b2>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 938:	c0 39       	cpi	r28, 0x90	; 144
 93a:	f8 e0       	ldi	r31, 0x08	; 8
 93c:	df 07       	cpc	r29, r31
 93e:	21 f4       	brne	.+8      	; 0x948 <twi_master_setup+0x184>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 940:	64 e0       	ldi	r22, 0x04	; 4
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	80 dc       	rcall	.-1792   	; 0x246 <sysclk_enable_module>
 946:	97 c0       	rjmp	.+302    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 948:	c0 39       	cpi	r28, 0x90	; 144
 94a:	89 e0       	ldi	r24, 0x09	; 9
 94c:	d8 07       	cpc	r29, r24
 94e:	21 f4       	brne	.+8      	; 0x958 <twi_master_setup+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 950:	64 e0       	ldi	r22, 0x04	; 4
 952:	84 e0       	ldi	r24, 0x04	; 4
 954:	78 dc       	rcall	.-1808   	; 0x246 <sysclk_enable_module>
 956:	8f c0       	rjmp	.+286    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 958:	c0 39       	cpi	r28, 0x90	; 144
 95a:	ea e0       	ldi	r30, 0x0A	; 10
 95c:	de 07       	cpc	r29, r30
 95e:	21 f4       	brne	.+8      	; 0x968 <twi_master_setup+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 960:	64 e0       	ldi	r22, 0x04	; 4
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	70 dc       	rcall	.-1824   	; 0x246 <sysclk_enable_module>
 966:	87 c0       	rjmp	.+270    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 968:	c0 39       	cpi	r28, 0x90	; 144
 96a:	fb e0       	ldi	r31, 0x0B	; 11
 96c:	df 07       	cpc	r29, r31
 96e:	21 f4       	brne	.+8      	; 0x978 <twi_master_setup+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 970:	64 e0       	ldi	r22, 0x04	; 4
 972:	86 e0       	ldi	r24, 0x06	; 6
 974:	68 dc       	rcall	.-1840   	; 0x246 <sysclk_enable_module>
 976:	7f c0       	rjmp	.+254    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 978:	c0 3c       	cpi	r28, 0xC0	; 192
 97a:	88 e0       	ldi	r24, 0x08	; 8
 97c:	d8 07       	cpc	r29, r24
 97e:	21 f4       	brne	.+8      	; 0x988 <twi_master_setup+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 980:	68 e0       	ldi	r22, 0x08	; 8
 982:	83 e0       	ldi	r24, 0x03	; 3
 984:	60 dc       	rcall	.-1856   	; 0x246 <sysclk_enable_module>
 986:	77 c0       	rjmp	.+238    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 988:	c0 3c       	cpi	r28, 0xC0	; 192
 98a:	e9 e0       	ldi	r30, 0x09	; 9
 98c:	de 07       	cpc	r29, r30
 98e:	21 f4       	brne	.+8      	; 0x998 <twi_master_setup+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 990:	68 e0       	ldi	r22, 0x08	; 8
 992:	84 e0       	ldi	r24, 0x04	; 4
 994:	58 dc       	rcall	.-1872   	; 0x246 <sysclk_enable_module>
 996:	6f c0       	rjmp	.+222    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
 998:	c0 3c       	cpi	r28, 0xC0	; 192
 99a:	fa e0       	ldi	r31, 0x0A	; 10
 99c:	df 07       	cpc	r29, r31
 99e:	21 f4       	brne	.+8      	; 0x9a8 <twi_master_setup+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
 9a0:	68 e0       	ldi	r22, 0x08	; 8
 9a2:	85 e0       	ldi	r24, 0x05	; 5
 9a4:	50 dc       	rcall	.-1888   	; 0x246 <sysclk_enable_module>
 9a6:	67 c0       	rjmp	.+206    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
 9a8:	c0 3c       	cpi	r28, 0xC0	; 192
 9aa:	8b e0       	ldi	r24, 0x0B	; 11
 9ac:	d8 07       	cpc	r29, r24
 9ae:	21 f4       	brne	.+8      	; 0x9b8 <twi_master_setup+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
 9b0:	68 e0       	ldi	r22, 0x08	; 8
 9b2:	86 e0       	ldi	r24, 0x06	; 6
 9b4:	48 dc       	rcall	.-1904   	; 0x246 <sysclk_enable_module>
 9b6:	5f c0       	rjmp	.+190    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 9b8:	c0 3a       	cpi	r28, 0xA0	; 160
 9ba:	e8 e0       	ldi	r30, 0x08	; 8
 9bc:	de 07       	cpc	r29, r30
 9be:	21 f4       	brne	.+8      	; 0x9c8 <twi_master_setup+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 9c0:	60 e1       	ldi	r22, 0x10	; 16
 9c2:	83 e0       	ldi	r24, 0x03	; 3
 9c4:	40 dc       	rcall	.-1920   	; 0x246 <sysclk_enable_module>
 9c6:	57 c0       	rjmp	.+174    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 9c8:	c0 3a       	cpi	r28, 0xA0	; 160
 9ca:	f9 e0       	ldi	r31, 0x09	; 9
 9cc:	df 07       	cpc	r29, r31
 9ce:	21 f4       	brne	.+8      	; 0x9d8 <twi_master_setup+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 9d0:	60 e1       	ldi	r22, 0x10	; 16
 9d2:	84 e0       	ldi	r24, 0x04	; 4
 9d4:	38 dc       	rcall	.-1936   	; 0x246 <sysclk_enable_module>
 9d6:	4f c0       	rjmp	.+158    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 9d8:	c0 3a       	cpi	r28, 0xA0	; 160
 9da:	8a e0       	ldi	r24, 0x0A	; 10
 9dc:	d8 07       	cpc	r29, r24
 9de:	21 f4       	brne	.+8      	; 0x9e8 <twi_master_setup+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 9e0:	60 e1       	ldi	r22, 0x10	; 16
 9e2:	85 e0       	ldi	r24, 0x05	; 5
 9e4:	30 dc       	rcall	.-1952   	; 0x246 <sysclk_enable_module>
 9e6:	47 c0       	rjmp	.+142    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 9e8:	c0 3a       	cpi	r28, 0xA0	; 160
 9ea:	eb e0       	ldi	r30, 0x0B	; 11
 9ec:	de 07       	cpc	r29, r30
 9ee:	21 f4       	brne	.+8      	; 0x9f8 <twi_master_setup+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 9f0:	60 e1       	ldi	r22, 0x10	; 16
 9f2:	86 e0       	ldi	r24, 0x06	; 6
 9f4:	28 dc       	rcall	.-1968   	; 0x246 <sysclk_enable_module>
 9f6:	3f c0       	rjmp	.+126    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 9f8:	c0 3b       	cpi	r28, 0xB0	; 176
 9fa:	f8 e0       	ldi	r31, 0x08	; 8
 9fc:	df 07       	cpc	r29, r31
 9fe:	21 f4       	brne	.+8      	; 0xa08 <twi_master_setup+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 a00:	60 e2       	ldi	r22, 0x20	; 32
 a02:	83 e0       	ldi	r24, 0x03	; 3
 a04:	20 dc       	rcall	.-1984   	; 0x246 <sysclk_enable_module>
 a06:	37 c0       	rjmp	.+110    	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 a08:	c0 3b       	cpi	r28, 0xB0	; 176
 a0a:	89 e0       	ldi	r24, 0x09	; 9
 a0c:	d8 07       	cpc	r29, r24
 a0e:	21 f4       	brne	.+8      	; 0xa18 <twi_master_setup+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 a10:	60 e2       	ldi	r22, 0x20	; 32
 a12:	84 e0       	ldi	r24, 0x04	; 4
 a14:	18 dc       	rcall	.-2000   	; 0x246 <sysclk_enable_module>
 a16:	2f c0       	rjmp	.+94     	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
 a18:	c0 3b       	cpi	r28, 0xB0	; 176
 a1a:	ea e0       	ldi	r30, 0x0A	; 10
 a1c:	de 07       	cpc	r29, r30
 a1e:	21 f4       	brne	.+8      	; 0xa28 <twi_master_setup+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
 a20:	60 e2       	ldi	r22, 0x20	; 32
 a22:	85 e0       	ldi	r24, 0x05	; 5
 a24:	10 dc       	rcall	.-2016   	; 0x246 <sysclk_enable_module>
 a26:	27 c0       	rjmp	.+78     	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
 a28:	c0 3b       	cpi	r28, 0xB0	; 176
 a2a:	fb e0       	ldi	r31, 0x0B	; 11
 a2c:	df 07       	cpc	r29, r31
 a2e:	21 f4       	brne	.+8      	; 0xa38 <twi_master_setup+0x274>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
 a30:	60 e2       	ldi	r22, 0x20	; 32
 a32:	86 e0       	ldi	r24, 0x06	; 6
 a34:	08 dc       	rcall	.-2032   	; 0x246 <sysclk_enable_module>
 a36:	1f c0       	rjmp	.+62     	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 a38:	c0 38       	cpi	r28, 0x80	; 128
 a3a:	84 e0       	ldi	r24, 0x04	; 4
 a3c:	d8 07       	cpc	r29, r24
 a3e:	21 f4       	brne	.+8      	; 0xa48 <twi_master_setup+0x284>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 a40:	60 e4       	ldi	r22, 0x40	; 64
 a42:	83 e0       	ldi	r24, 0x03	; 3
 a44:	00 dc       	rcall	.-2048   	; 0x246 <sysclk_enable_module>
 a46:	17 c0       	rjmp	.+46     	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
 a48:	c0 39       	cpi	r28, 0x90	; 144
 a4a:	e4 e0       	ldi	r30, 0x04	; 4
 a4c:	de 07       	cpc	r29, r30
 a4e:	21 f4       	brne	.+8      	; 0xa58 <twi_master_setup+0x294>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
 a50:	60 e4       	ldi	r22, 0x40	; 64
 a52:	84 e0       	ldi	r24, 0x04	; 4
 a54:	f8 db       	rcall	.-2064   	; 0x246 <sysclk_enable_module>
 a56:	0f c0       	rjmp	.+30     	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 a58:	c0 3a       	cpi	r28, 0xA0	; 160
 a5a:	f4 e0       	ldi	r31, 0x04	; 4
 a5c:	df 07       	cpc	r29, r31
 a5e:	21 f4       	brne	.+8      	; 0xa68 <twi_master_setup+0x2a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 a60:	60 e4       	ldi	r22, 0x40	; 64
 a62:	85 e0       	ldi	r24, 0x05	; 5
 a64:	f0 db       	rcall	.-2080   	; 0x246 <sysclk_enable_module>
 a66:	07 c0       	rjmp	.+14     	; 0xa76 <twi_master_setup+0x2b2>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
 a68:	c0 3b       	cpi	r28, 0xB0	; 176
 a6a:	84 e0       	ldi	r24, 0x04	; 4
 a6c:	d8 07       	cpc	r29, r24
 a6e:	19 f4       	brne	.+6      	; 0xa76 <twi_master_setup+0x2b2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
 a70:	60 e4       	ldi	r22, 0x40	; 64
 a72:	86 e0       	ldi	r24, 0x06	; 6
 a74:	e8 db       	rcall	.-2096   	; 0x246 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
 a76:	b8 01       	movw	r22, r16
 a78:	ce 01       	movw	r24, r28
 a7a:	32 de       	rcall	.-924    	; 0x6e0 <twi_master_init>
}
 a7c:	08 2e       	mov	r0, r24
 a7e:	00 0c       	add	r0, r0
 a80:	99 0b       	sbc	r25, r25
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	1f 91       	pop	r17
 a88:	0f 91       	pop	r16
 a8a:	08 95       	ret

00000a8c <__vector_24>:

//lock
uint8_t lock = 0;


ISR(SPIC_INT_vect) {
 a8c:	1f 92       	push	r1
 a8e:	0f 92       	push	r0
 a90:	0f b6       	in	r0, 0x3f	; 63
 a92:	0f 92       	push	r0
 a94:	11 24       	eor	r1, r1
 a96:	08 b6       	in	r0, 0x38	; 56
 a98:	0f 92       	push	r0
 a9a:	18 be       	out	0x38, r1	; 56
 a9c:	8f 93       	push	r24
	rx_byte = SPIC.DATA;
 a9e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 aa2:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <rx_byte>
	spic_flag = 1;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	80 93 23 20 	sts	0x2023, r24	; 0x802023 <spic_flag>
}
 aac:	8f 91       	pop	r24
 aae:	0f 90       	pop	r0
 ab0:	08 be       	out	0x38, r0	; 56
 ab2:	0f 90       	pop	r0
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	0f 90       	pop	r0
 ab8:	1f 90       	pop	r1
 aba:	18 95       	reti

00000abc <setUpSPIC>:

void setUpSPIC()
{
	PORTC.DIR = 0x40;		// MISO output; MOSI, SCK, SS inputs
 abc:	80 e4       	ldi	r24, 0x40	; 64
 abe:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0x40;		// slave mode, mode 0
 ac2:	e0 ec       	ldi	r30, 0xC0	; 192
 ac4:	f8 e0       	ldi	r31, 0x08	; 8
 ac6:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0x03;	// enable interrupts
 ac8:	83 e0       	ldi	r24, 0x03	; 3
 aca:	81 83       	std	Z+1, r24	; 0x01
 acc:	08 95       	ret

00000ace <main>:
}


int main (void)
{
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
 ad6:	cb 54       	subi	r28, 0x4B	; 75
 ad8:	d1 09       	sbc	r29, r1
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	de bf       	out	0x3e, r29	; 62
	board_init();	//Init board
 ade:	94 dc       	rcall	.-1752   	; 0x408 <board_init>
	//sysclk_init();	//Needed for CRC
	setUpSPIC();	//Setup SPI on Port C
 ae0:	ed df       	rcall	.-38     	; 0xabc <setUpSPIC>
	
	PMIC.CTRL = 0x04; // enable high priority interrupts
 ae2:	84 e0       	ldi	r24, 0x04	; 4
 ae4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();            // enable global interrupts
 ae8:	78 94       	sei
	
	twi_master_options_t opt48 = {
 aea:	19 e0       	ldi	r17, 0x09	; 9
 aec:	be 01       	movw	r22, r28
 aee:	6f 5f       	subi	r22, 0xFF	; 255
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	db 01       	movw	r26, r22
 af4:	e1 2f       	mov	r30, r17
 af6:	1d 92       	st	X+, r1
 af8:	ea 95       	dec	r30
 afa:	e9 f7       	brne	.-6      	; 0xaf6 <main+0x28>
 afc:	0f 2e       	mov	r0, r31
 afe:	f0 ea       	ldi	r31, 0xA0	; 160
 b00:	cf 2e       	mov	r12, r31
 b02:	f6 e8       	ldi	r31, 0x86	; 134
 b04:	df 2e       	mov	r13, r31
 b06:	ee 24       	eor	r14, r14
 b08:	e3 94       	inc	r14
 b0a:	f1 2c       	mov	r15, r1
 b0c:	f0 2d       	mov	r31, r0
 b0e:	c9 82       	std	Y+1, r12	; 0x01
 b10:	da 82       	std	Y+2, r13	; 0x02
 b12:	eb 82       	std	Y+3, r14	; 0x03
 b14:	fc 82       	std	Y+4, r15	; 0x04
 b16:	0f 2e       	mov	r0, r31
 b18:	f8 e4       	ldi	r31, 0x48	; 72
 b1a:	bf 2e       	mov	r11, r31
 b1c:	f0 2d       	mov	r31, r0
 b1e:	b9 86       	std	Y+9, r11	; 0x09
		.speed = 100000,
		.chip = 0x48
	};
	twi_master_setup(&TWIF, &opt48);
 b20:	80 eb       	ldi	r24, 0xB0	; 176
 b22:	94 e0       	ldi	r25, 0x04	; 4
 b24:	4f de       	rcall	.-866    	; 0x7c4 <twi_master_setup>
	
	twi_master_options_t opt49 = {
 b26:	be 01       	movw	r22, r28
 b28:	66 5f       	subi	r22, 0xF6	; 246
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	db 01       	movw	r26, r22
 b2e:	e1 2f       	mov	r30, r17
 b30:	1d 92       	st	X+, r1
 b32:	ea 95       	dec	r30
 b34:	e9 f7       	brne	.-6      	; 0xb30 <main+0x62>
 b36:	ca 86       	std	Y+10, r12	; 0x0a
 b38:	db 86       	std	Y+11, r13	; 0x0b
 b3a:	ec 86       	std	Y+12, r14	; 0x0c
 b3c:	fd 86       	std	Y+13, r15	; 0x0d
 b3e:	09 e4       	ldi	r16, 0x49	; 73
 b40:	0a 8b       	std	Y+18, r16	; 0x12
		.speed = 100000,
		.chip = 0x49
	};
	twi_master_setup(&TWIF, &opt49);
 b42:	80 eb       	ldi	r24, 0xB0	; 176
 b44:	94 e0       	ldi	r25, 0x04	; 4
 b46:	3e de       	rcall	.-900    	; 0x7c4 <twi_master_setup>
	
	twi_master_options_t opt4A = {
 b48:	be 01       	movw	r22, r28
 b4a:	6d 5e       	subi	r22, 0xED	; 237
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255
 b4e:	db 01       	movw	r26, r22
 b50:	1d 92       	st	X+, r1
 b52:	1a 95       	dec	r17
 b54:	e9 f7       	brne	.-6      	; 0xb50 <main+0x82>
 b56:	cb 8a       	std	Y+19, r12	; 0x13
 b58:	dc 8a       	std	Y+20, r13	; 0x14
 b5a:	ed 8a       	std	Y+21, r14	; 0x15
 b5c:	fe 8a       	std	Y+22, r15	; 0x16
 b5e:	1a e4       	ldi	r17, 0x4A	; 74
 b60:	1b 8f       	std	Y+27, r17	; 0x1b
		.speed = 100000,
		.chip = 0x4A
	};
	twi_master_setup(&TWIF, &opt4A);
 b62:	80 eb       	ldi	r24, 0xB0	; 176
 b64:	94 e0       	ldi	r25, 0x04	; 4
 b66:	2e de       	rcall	.-932    	; 0x7c4 <twi_master_setup>
	
	const uint8_t adc_setup_bytes[] = {0x42, 0x83};
 b68:	82 e4       	ldi	r24, 0x42	; 66
 b6a:	8c 8f       	std	Y+28, r24	; 0x1c
 b6c:	83 e8       	ldi	r24, 0x83	; 131
 b6e:	8d 8f       	std	Y+29, r24	; 0x1d
	twi_package_t adc_setup_48 = {
 b70:	7b e0       	ldi	r23, 0x0B	; 11
 b72:	fe 01       	movw	r30, r28
 b74:	7e 96       	adiw	r30, 0x1e	; 30
 b76:	df 01       	movw	r26, r30
 b78:	f7 2e       	mov	r15, r23
 b7a:	1d 92       	st	X+, r1
 b7c:	fa 94       	dec	r15
 b7e:	e9 f7       	brne	.-6      	; 0xb7a <main+0xac>
 b80:	be 8e       	std	Y+30, r11	; 0x1e
 b82:	61 e0       	ldi	r22, 0x01	; 1
 b84:	6f 8f       	std	Y+31, r22	; 0x1f
 b86:	41 e0       	ldi	r20, 0x01	; 1
 b88:	50 e0       	ldi	r21, 0x00	; 0
 b8a:	4a a3       	std	Y+34, r20	; 0x22
 b8c:	5b a3       	std	Y+35, r21	; 0x23
 b8e:	9e 01       	movw	r18, r28
 b90:	24 5e       	subi	r18, 0xE4	; 228
 b92:	3f 4f       	sbci	r19, 0xFF	; 255
 b94:	2c a3       	std	Y+36, r18	; 0x24
 b96:	3d a3       	std	Y+37, r19	; 0x25
 b98:	82 e0       	ldi	r24, 0x02	; 2
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	8e a3       	std	Y+38, r24	; 0x26
 b9e:	9f a3       	std	Y+39, r25	; 0x27
		.addr_length	= sizeof(uint8_t),
		.chip			= 0x48,
		.buffer			= (void *)adc_setup_bytes,
		.length			= sizeof(adc_setup_bytes)
	};
	twi_package_t adc_setup_49 = {
 ba0:	3b 96       	adiw	r30, 0x0b	; 11
 ba2:	df 01       	movw	r26, r30
 ba4:	f7 2e       	mov	r15, r23
 ba6:	1d 92       	st	X+, r1
 ba8:	fa 94       	dec	r15
 baa:	e9 f7       	brne	.-6      	; 0xba6 <main+0xd8>
 bac:	09 a7       	std	Y+41, r16	; 0x29
 bae:	6a a7       	std	Y+42, r22	; 0x2a
 bb0:	4d a7       	std	Y+45, r20	; 0x2d
 bb2:	5e a7       	std	Y+46, r21	; 0x2e
 bb4:	2f a7       	std	Y+47, r18	; 0x2f
 bb6:	38 ab       	std	Y+48, r19	; 0x30
 bb8:	89 ab       	std	Y+49, r24	; 0x31
 bba:	9a ab       	std	Y+50, r25	; 0x32
		.addr_length	= sizeof(uint8_t),
		.chip			= 0x49,
		.buffer			= (void *)adc_setup_bytes,
		.length			= sizeof(adc_setup_bytes)
	};
	twi_package_t adc_setup_4A = {
 bbc:	3b 96       	adiw	r30, 0x0b	; 11
 bbe:	df 01       	movw	r26, r30
 bc0:	1d 92       	st	X+, r1
 bc2:	7a 95       	dec	r23
 bc4:	e9 f7       	brne	.-6      	; 0xbc0 <main+0xf2>
 bc6:	1c ab       	std	Y+52, r17	; 0x34
 bc8:	6d ab       	std	Y+53, r22	; 0x35
 bca:	48 af       	std	Y+56, r20	; 0x38
 bcc:	59 af       	std	Y+57, r21	; 0x39
 bce:	2a af       	std	Y+58, r18	; 0x3a
 bd0:	3b af       	std	Y+59, r19	; 0x3b
 bd2:	8c af       	std	Y+60, r24	; 0x3c
 bd4:	9d af       	std	Y+61, r25	; 0x3d
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	be 01       	movw	r22, r28
 bda:	62 5e       	subi	r22, 0xE2	; 226
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	80 eb       	ldi	r24, 0xB0	; 176
 be0:	94 e0       	ldi	r25, 0x04	; 4
 be2:	93 dd       	rcall	.-1242   	; 0x70a <twi_master_transfer>
		.buffer			= (void *)adc_setup_bytes,
		.length			= sizeof(adc_setup_bytes)
	};
	
	
	while(twi_master_write(&TWIF, &adc_setup_48) != TWI_SUCCESS);
 be4:	81 11       	cpse	r24, r1
 be6:	f7 cf       	rjmp	.-18     	; 0xbd6 <main+0x108>
 be8:	40 e0       	ldi	r20, 0x00	; 0
 bea:	be 01       	movw	r22, r28
 bec:	67 5d       	subi	r22, 0xD7	; 215
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	80 eb       	ldi	r24, 0xB0	; 176
 bf2:	94 e0       	ldi	r25, 0x04	; 4
 bf4:	8a dd       	rcall	.-1260   	; 0x70a <twi_master_transfer>
	while(twi_master_write(&TWIF, &adc_setup_49) != TWI_SUCCESS);
 bf6:	81 11       	cpse	r24, r1
 bf8:	f7 cf       	rjmp	.-18     	; 0xbe8 <main+0x11a>
 bfa:	40 e0       	ldi	r20, 0x00	; 0
 bfc:	be 01       	movw	r22, r28
 bfe:	6c 5c       	subi	r22, 0xCC	; 204
 c00:	7f 4f       	sbci	r23, 0xFF	; 255
 c02:	80 eb       	ldi	r24, 0xB0	; 176
 c04:	94 e0       	ldi	r25, 0x04	; 4
 c06:	81 dd       	rcall	.-1278   	; 0x70a <twi_master_transfer>
	while(twi_master_write(&TWIF, &adc_setup_4A) != TWI_SUCCESS);
 c08:	81 11       	cpse	r24, r1
 c0a:	f7 cf       	rjmp	.-18     	; 0xbfa <main+0x12c>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 c0c:	88 e0       	ldi	r24, 0x08	; 8
 c0e:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
			
			spic_flag = 0;
		}
		else if(lock == 0){//Do anything that is not SPI related
			uint8_t recieved_data[2];
			twi_package_t packet_read = {
 c12:	1e 01       	movw	r2, r28
 c14:	bf e3       	ldi	r27, 0x3F	; 63
 c16:	2b 0e       	add	r2, r27
 c18:	31 1c       	adc	r3, r1
 c1a:	7e 01       	movw	r14, r28
 c1c:	ea e4       	ldi	r30, 0x4A	; 74
 c1e:	ee 0e       	add	r14, r30
 c20:	f1 1c       	adc	r15, r1
 c22:	68 94       	set
 c24:	aa 24       	eor	r10, r10
 c26:	a1 f8       	bld	r10, 1
 c28:	b1 2c       	mov	r11, r1
				sensor_data[3] = recieved_data[0];
			}
			
			packet_read.chip = 0x4A;
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
				sensor_data[4] = recieved_data[1];
 c2a:	0f 2e       	mov	r0, r31
 c2c:	f0 e0       	ldi	r31, 0x00	; 0
 c2e:	cf 2e       	mov	r12, r31
 c30:	f0 e2       	ldi	r31, 0x20	; 32
 c32:	df 2e       	mov	r13, r31
 c34:	f0 2d       	mov	r31, r0
					send_crc_idx = 2;
				}
				
			}
			else if(send_crc_idx > 0){
				SPIC.DATA = send_crc >> ((2-send_crc_idx)*8);
 c36:	0f 2e       	mov	r0, r31
 c38:	f0 ec       	ldi	r31, 0xC0	; 192
 c3a:	6f 2e       	mov	r6, r31
 c3c:	f8 e0       	ldi	r31, 0x08	; 8
 c3e:	7f 2e       	mov	r7, r31
 c40:	f0 2d       	mov	r31, r0
				cmd_finished = 0;
			}
			
			
			if(send_idx > 0){
				if(cmd_data[2] == 0){//Send only sensor data
 c42:	05 e2       	ldi	r16, 0x25	; 37
 c44:	10 e2       	ldi	r17, 0x20	; 32
					SPIC.DATA = send_data[SENSOR_DATA_SIZE-send_idx];
 c46:	0f 2e       	mov	r0, r31
 c48:	f6 e0       	ldi	r31, 0x06	; 6
 c4a:	4f 2e       	mov	r4, r31
 c4c:	51 2c       	mov	r5, r1
 c4e:	f0 2d       	mov	r31, r0
			}
			
			//If we are receiving command, store it appropriately
			if(cmd_idx > 0){
				
				cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
 c50:	0f 2e       	mov	r0, r31
 c52:	f5 e0       	ldi	r31, 0x05	; 5
 c54:	8f 2e       	mov	r8, r31
 c56:	91 2c       	mov	r9, r1
 c58:	f0 2d       	mov	r31, r0
		
		//SPIC handler
		//When this is true, it means we have just received a byte
		//So, we need to pipeline the next byte to be sent out.
		//Also, the most recently sent byte is in the rx_byte
		if(spic_flag){
 c5a:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <spic_flag>
 c5e:	88 23       	and	r24, r24
 c60:	09 f4       	brne	.+2      	; 0xc64 <main+0x196>
 c62:	ef c0       	rjmp	.+478    	; 0xe42 <main+0x374>
			//Indicate start of incoming command
			if(rx_byte == SPI_TX_START){
 c64:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <rx_byte>
 c68:	8a 3a       	cpi	r24, 0xAA	; 170
 c6a:	91 f4       	brne	.+36     	; 0xc90 <main+0x1c2>
				
				cmd_idx = CMD_DATA_SIZE;
 c6c:	85 e0       	ldi	r24, 0x05	; 5
 c6e:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <cmd_idx>
				//Reset all the send variables/tmp storage
				cmd_finished = 0;
 c72:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <cmd_finished>
				send_idx = 0;
 c76:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <send_idx>
				send_crc_length = 0;
 c7a:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <send_crc_length>
				send_crc = 0;
 c7e:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <send_crc>
 c82:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <send_crc+0x1>
				send_crc_idx = 0;
 c86:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <send_crc_idx>
				lock = 1;
 c8a:	81 e0       	ldi	r24, 0x01	; 1
 c8c:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <lock>

			}
			
			//If we are receiving command, store it appropriately
			if(cmd_idx > 0){
 c90:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <cmd_idx>
 c94:	88 23       	and	r24, r24
 c96:	09 f4       	brne	.+2      	; 0xc9a <main+0x1cc>
 c98:	3d c0       	rjmp	.+122    	; 0xd14 <main+0x246>
				
				cmd_data[CMD_DATA_SIZE-cmd_idx] = rx_byte;
 c9a:	90 91 24 20 	lds	r25, 0x2024	; 0x802024 <rx_byte>
 c9e:	f4 01       	movw	r30, r8
 ca0:	e8 1b       	sub	r30, r24
 ca2:	f1 09       	sbc	r31, r1
 ca4:	eb 5d       	subi	r30, 0xDB	; 219
 ca6:	ff 4d       	sbci	r31, 0xDF	; 223
 ca8:	90 83       	st	Z, r25
				cmd_idx--;
 caa:	81 50       	subi	r24, 0x01	; 1
 cac:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <cmd_idx>
				//Finished last storage of incoming data
				if(cmd_idx == 0){
 cb0:	81 11       	cpse	r24, r1
 cb2:	66 c0       	rjmp	.+204    	; 0xd80 <main+0x2b2>
 cb4:	88 e0       	ldi	r24, 0x08	; 8
 cb6:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
					ioport_set_pin_level(LED_0_PIN,LED_0_ACTIVE);
					//Check recieved_crc against calculated CRC
					received_crc =	(cmd_data[CMD_DATA_SIZE-1]<<8) | cmd_data[CMD_DATA_SIZE-2];
 cba:	d8 01       	movw	r26, r16
 cbc:	14 96       	adiw	r26, 0x04	; 4
 cbe:	8c 91       	ld	r24, X
 cc0:	14 97       	sbiw	r26, 0x04	; 4
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	98 2f       	mov	r25, r24
 cc6:	88 27       	eor	r24, r24
 cc8:	13 96       	adiw	r26, 0x03	; 3
 cca:	2c 91       	ld	r18, X
 ccc:	82 2b       	or	r24, r18
 cce:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <received_crc>
 cd2:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <received_crc+0x1>
					calculated_crc = crc_io_checksum(cmd_data, CMD_DATA_SIZE-2, CRC_16BIT);
 cd6:	40 e0       	ldi	r20, 0x00	; 0
 cd8:	63 e0       	ldi	r22, 0x03	; 3
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	c8 01       	movw	r24, r16
 cde:	51 db       	rcall	.-2398   	; 0x382 <crc_io_checksum>
 ce0:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <calculated_crc>
 ce4:	70 93 1f 20 	sts	0x201F, r23	; 0x80201f <calculated_crc+0x1>
					//Send appropriate signal if passed/failed
					
					if(calculated_crc == received_crc){
 ce8:	20 91 20 20 	lds	r18, 0x2020	; 0x802020 <received_crc>
 cec:	30 91 21 20 	lds	r19, 0x2021	; 0x802021 <received_crc+0x1>
 cf0:	26 17       	cp	r18, r22
 cf2:	37 07       	cpc	r19, r23
 cf4:	39 f4       	brne	.+14     	; 0xd04 <main+0x236>
						SPIC.DATA = SPI_CRC_PASS;
 cf6:	8a ea       	ldi	r24, 0xAA	; 170
 cf8:	f3 01       	movw	r30, r6
 cfa:	83 83       	std	Z+3, r24	; 0x03
						cmd_finished = 1;
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	80 93 1b 20 	sts	0x201B, r24	; 0x80201b <cmd_finished>
 d02:	3e c0       	rjmp	.+124    	; 0xd80 <main+0x2b2>
 d04:	88 e0       	ldi	r24, 0x08	; 8
 d06:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
						//ioport_set_pin_level(LED_0_PIN,LED_0_ACTIVE);
					}
					else{
						ioport_set_pin_level(LED_0_PIN,LED_0_ACTIVE);
						SPIC.DATA = SPI_CRC_FAIL;
 d0a:	8f ef       	ldi	r24, 0xFF	; 255
 d0c:	d3 01       	movw	r26, r6
 d0e:	13 96       	adiw	r26, 0x03	; 3
 d10:	8c 93       	st	X, r24
 d12:	36 c0       	rjmp	.+108    	; 0xd80 <main+0x2b2>
					}
				}				
			}
			else if(cmd_finished){
 d14:	80 91 1b 20 	lds	r24, 0x201B	; 0x80201b <cmd_finished>
 d18:	88 23       	and	r24, r24
 d1a:	91 f1       	breq	.+100    	; 0xd80 <main+0x2b2>
				//On next pass we will be start pipelining data
				if(cmd_data[2] == 0){
 d1c:	f8 01       	movw	r30, r16
 d1e:	82 81       	ldd	r24, Z+2	; 0x02
 d20:	81 11       	cpse	r24, r1
 d22:	0e c0       	rjmp	.+28     	; 0xd40 <main+0x272>
					memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);//TODO: determine if this takes too long
 d24:	86 e0       	ldi	r24, 0x06	; 6
 d26:	f6 01       	movw	r30, r12
 d28:	aa e2       	ldi	r26, 0x2A	; 42
 d2a:	b0 e2       	ldi	r27, 0x20	; 32
 d2c:	01 90       	ld	r0, Z+
 d2e:	0d 92       	st	X+, r0
 d30:	8a 95       	dec	r24
 d32:	e1 f7       	brne	.-8      	; 0xd2c <main+0x25e>
					send_idx = SENSOR_DATA_SIZE;
 d34:	86 e0       	ldi	r24, 0x06	; 6
 d36:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <send_idx>
					send_crc_length = send_idx;
 d3a:	80 93 19 20 	sts	0x2019, r24	; 0x802019 <send_crc_length>
 d3e:	1e c0       	rjmp	.+60     	; 0xd7c <main+0x2ae>
				}
				else if(cmd_data[2] == 1 || cmd_data[2] == 2){
 d40:	81 50       	subi	r24, 0x01	; 1
 d42:	82 30       	cpi	r24, 0x02	; 2
 d44:	30 f4       	brcc	.+12     	; 0xd52 <main+0x284>
					send_idx = 1;
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <send_idx>
					send_crc_length = send_idx;
 d4c:	80 93 19 20 	sts	0x2019, r24	; 0x802019 <send_crc_length>
 d50:	15 c0       	rjmp	.+42     	; 0xd7c <main+0x2ae>
				}
				else{
					memcpy(send_data,sensor_data,SENSOR_DATA_SIZE);
 d52:	86 e0       	ldi	r24, 0x06	; 6
 d54:	f6 01       	movw	r30, r12
 d56:	aa e2       	ldi	r26, 0x2A	; 42
 d58:	b0 e2       	ldi	r27, 0x20	; 32
 d5a:	01 90       	ld	r0, Z+
 d5c:	0d 92       	st	X+, r0
 d5e:	8a 95       	dec	r24
 d60:	e1 f7       	brne	.-8      	; 0xd5a <main+0x28c>
					send_data[SENSOR_DATA_SIZE] = state;
 d62:	ea e2       	ldi	r30, 0x2A	; 42
 d64:	f0 e2       	ldi	r31, 0x20	; 32
 d66:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <state>
 d6a:	86 83       	std	Z+6, r24	; 0x06
					send_data[SENSOR_DATA_SIZE+1] = sensor_status;
 d6c:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <sensor_status>
 d70:	87 83       	std	Z+7, r24	; 0x07
					send_idx = SENSOR_DATA_SIZE+2;
 d72:	88 e0       	ldi	r24, 0x08	; 8
 d74:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <send_idx>
					send_crc_length = send_idx;
 d78:	80 93 19 20 	sts	0x2019, r24	; 0x802019 <send_crc_length>
				}
				cmd_finished = 0;
 d7c:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <cmd_finished>
			}
			
			
			if(send_idx > 0){
 d80:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <send_idx>
 d84:	88 23       	and	r24, r24
 d86:	d9 f1       	breq	.+118    	; 0xdfe <main+0x330>
				if(cmd_data[2] == 0){//Send only sensor data
 d88:	d8 01       	movw	r26, r16
 d8a:	12 96       	adiw	r26, 0x02	; 2
 d8c:	9c 91       	ld	r25, X
 d8e:	91 11       	cpse	r25, r1
 d90:	09 c0       	rjmp	.+18     	; 0xda4 <main+0x2d6>
					SPIC.DATA = send_data[SENSOR_DATA_SIZE-send_idx];
 d92:	f2 01       	movw	r30, r4
 d94:	e8 1b       	sub	r30, r24
 d96:	f1 09       	sbc	r31, r1
 d98:	e6 5d       	subi	r30, 0xD6	; 214
 d9a:	ff 4d       	sbci	r31, 0xDF	; 223
 d9c:	90 81       	ld	r25, Z
 d9e:	f3 01       	movw	r30, r6
 da0:	93 83       	std	Z+3, r25	; 0x03
 da2:	19 c0       	rjmp	.+50     	; 0xdd6 <main+0x308>
				}
				else if(cmd_data[2] == 1){//send only state data
 da4:	91 30       	cpi	r25, 0x01	; 1
 da6:	31 f4       	brne	.+12     	; 0xdb4 <main+0x2e6>
					SPIC.DATA = state;
 da8:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <state>
 dac:	d3 01       	movw	r26, r6
 dae:	13 96       	adiw	r26, 0x03	; 3
 db0:	9c 93       	st	X, r25
 db2:	11 c0       	rjmp	.+34     	; 0xdd6 <main+0x308>
				}
				else if(cmd_data[2] == 2){//send only sensor_status data
 db4:	92 30       	cpi	r25, 0x02	; 2
 db6:	29 f4       	brne	.+10     	; 0xdc2 <main+0x2f4>
					SPIC.DATA = sensor_status;
 db8:	90 91 1c 20 	lds	r25, 0x201C	; 0x80201c <sensor_status>
 dbc:	f3 01       	movw	r30, r6
 dbe:	93 83       	std	Z+3, r25	; 0x03
 dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <main+0x308>
				}
				else{//send all
					SPIC.DATA = send_data[SENSOR_DATA_SIZE+2-send_idx];
 dc2:	e8 e0       	ldi	r30, 0x08	; 8
 dc4:	f0 e0       	ldi	r31, 0x00	; 0
 dc6:	e8 1b       	sub	r30, r24
 dc8:	f1 09       	sbc	r31, r1
 dca:	e6 5d       	subi	r30, 0xD6	; 214
 dcc:	ff 4d       	sbci	r31, 0xDF	; 223
 dce:	90 81       	ld	r25, Z
 dd0:	d3 01       	movw	r26, r6
 dd2:	13 96       	adiw	r26, 0x03	; 3
 dd4:	9c 93       	st	X, r25
				}				
				send_idx--;
 dd6:	81 50       	subi	r24, 0x01	; 1
 dd8:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <send_idx>
				
				//Calculate CRC
				if(send_idx == 0){
 ddc:	81 11       	cpse	r24, r1
 dde:	2e c0       	rjmp	.+92     	; 0xe3c <main+0x36e>
					send_crc = crc_io_checksum(send_data, send_crc_length, CRC_16BIT);
 de0:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <send_crc_length>
 de4:	70 e0       	ldi	r23, 0x00	; 0
 de6:	40 e0       	ldi	r20, 0x00	; 0
 de8:	8a e2       	ldi	r24, 0x2A	; 42
 dea:	90 e2       	ldi	r25, 0x20	; 32
 dec:	ca da       	rcall	.-2668   	; 0x382 <crc_io_checksum>
 dee:	60 93 17 20 	sts	0x2017, r22	; 0x802017 <send_crc>
 df2:	70 93 18 20 	sts	0x2018, r23	; 0x802018 <send_crc+0x1>
					send_crc_idx = 2;
 df6:	82 e0       	ldi	r24, 0x02	; 2
 df8:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <send_crc_idx>
 dfc:	1f c0       	rjmp	.+62     	; 0xe3c <main+0x36e>
				}
				
			}
			else if(send_crc_idx > 0){
 dfe:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <send_crc_idx>
 e02:	88 23       	and	r24, r24
 e04:	d9 f0       	breq	.+54     	; 0xe3c <main+0x36e>
				SPIC.DATA = send_crc >> ((2-send_crc_idx)*8);
 e06:	a5 01       	movw	r20, r10
 e08:	48 1b       	sub	r20, r24
 e0a:	51 09       	sbc	r21, r1
 e0c:	44 0f       	add	r20, r20
 e0e:	55 1f       	adc	r21, r21
 e10:	44 0f       	add	r20, r20
 e12:	55 1f       	adc	r21, r21
 e14:	44 0f       	add	r20, r20
 e16:	55 1f       	adc	r21, r21
 e18:	20 91 17 20 	lds	r18, 0x2017	; 0x802017 <send_crc>
 e1c:	30 91 18 20 	lds	r19, 0x2018	; 0x802018 <send_crc+0x1>
 e20:	02 c0       	rjmp	.+4      	; 0xe26 <main+0x358>
 e22:	36 95       	lsr	r19
 e24:	27 95       	ror	r18
 e26:	4a 95       	dec	r20
 e28:	e2 f7       	brpl	.-8      	; 0xe22 <main+0x354>
 e2a:	f3 01       	movw	r30, r6
 e2c:	23 83       	std	Z+3, r18	; 0x03
				send_crc_idx--;
 e2e:	81 50       	subi	r24, 0x01	; 1
 e30:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <send_crc_idx>
				if(send_crc_idx == 0) lock = 0;
 e34:	81 11       	cpse	r24, r1
 e36:	02 c0       	rjmp	.+4      	; 0xe3c <main+0x36e>
 e38:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <lock>
			}
			
			spic_flag = 0;
 e3c:	10 92 23 20 	sts	0x2023, r1	; 0x802023 <spic_flag>
 e40:	0c cf       	rjmp	.-488    	; 0xc5a <main+0x18c>
		}
		else if(lock == 0){//Do anything that is not SPI related
 e42:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <lock>
 e46:	81 11       	cpse	r24, r1
 e48:	08 cf       	rjmp	.-496    	; 0xc5a <main+0x18c>
			uint8_t recieved_data[2];
			twi_package_t packet_read = {
 e4a:	8b e0       	ldi	r24, 0x0B	; 11
 e4c:	d1 01       	movw	r26, r2
 e4e:	1d 92       	st	X+, r1
 e50:	8a 95       	dec	r24
 e52:	e9 f7       	brne	.-6      	; 0xe4e <main+0x380>
 e54:	88 e4       	ldi	r24, 0x48	; 72
 e56:	8f af       	std	Y+63, r24	; 0x3f
 e58:	e1 e0       	ldi	r30, 0x01	; 1
 e5a:	f0 e0       	ldi	r31, 0x00	; 0
 e5c:	25 96       	adiw	r28, 0x05	; 5
 e5e:	ee af       	std	Y+62, r30	; 0x3e
 e60:	ff af       	std	Y+63, r31	; 0x3f
 e62:	25 97       	sbiw	r28, 0x05	; 5
 e64:	27 96       	adiw	r28, 0x07	; 7
 e66:	ee ae       	std	Y+62, r14	; 0x3e
 e68:	ff ae       	std	Y+63, r15	; 0x3f
 e6a:	27 97       	sbiw	r28, 0x07	; 7
 e6c:	29 96       	adiw	r28, 0x09	; 9
 e6e:	ae ae       	std	Y+62, r10	; 0x3e
 e70:	bf ae       	std	Y+63, r11	; 0x3f
 e72:	29 97       	sbiw	r28, 0x09	; 9
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
 e74:	41 e0       	ldi	r20, 0x01	; 1
 e76:	b1 01       	movw	r22, r2
 e78:	80 eb       	ldi	r24, 0xB0	; 176
 e7a:	94 e0       	ldi	r25, 0x04	; 4
 e7c:	46 dc       	rcall	.-1908   	; 0x70a <twi_master_transfer>
				.buffer			= recieved_data,
				.length			= 2
				
			};
			
			if(twi_master_read(&TWIF, &packet_read) == TWI_SUCCESS){
 e7e:	81 11       	cpse	r24, r1
 e80:	08 c0       	rjmp	.+16     	; 0xe92 <main+0x3c4>
				sensor_data[0] = recieved_data[1];
 e82:	d7 01       	movw	r26, r14
 e84:	11 96       	adiw	r26, 0x01	; 1
 e86:	8c 91       	ld	r24, X
 e88:	11 97       	sbiw	r26, 0x01	; 1
 e8a:	f6 01       	movw	r30, r12
 e8c:	80 83       	st	Z, r24
				sensor_data[1] = recieved_data[0];
 e8e:	8c 91       	ld	r24, X
 e90:	81 83       	std	Z+1, r24	; 0x01
			}
			
			packet_read.chip = 0x49;
 e92:	89 e4       	ldi	r24, 0x49	; 73
 e94:	8f af       	std	Y+63, r24	; 0x3f
 e96:	41 e0       	ldi	r20, 0x01	; 1
 e98:	b1 01       	movw	r22, r2
 e9a:	80 eb       	ldi	r24, 0xB0	; 176
 e9c:	94 e0       	ldi	r25, 0x04	; 4
 e9e:	35 dc       	rcall	.-1942   	; 0x70a <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
 ea0:	81 11       	cpse	r24, r1
 ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <main+0x3e6>
				sensor_data[2] = recieved_data[1];
 ea4:	d7 01       	movw	r26, r14
 ea6:	11 96       	adiw	r26, 0x01	; 1
 ea8:	8c 91       	ld	r24, X
 eaa:	11 97       	sbiw	r26, 0x01	; 1
 eac:	f6 01       	movw	r30, r12
 eae:	82 83       	std	Z+2, r24	; 0x02
				sensor_data[3] = recieved_data[0];
 eb0:	8c 91       	ld	r24, X
 eb2:	83 83       	std	Z+3, r24	; 0x03
			}
			
			packet_read.chip = 0x4A;
 eb4:	8a e4       	ldi	r24, 0x4A	; 74
 eb6:	8f af       	std	Y+63, r24	; 0x3f
 eb8:	41 e0       	ldi	r20, 0x01	; 1
 eba:	b1 01       	movw	r22, r2
 ebc:	80 eb       	ldi	r24, 0xB0	; 176
 ebe:	94 e0       	ldi	r25, 0x04	; 4
 ec0:	24 dc       	rcall	.-1976   	; 0x70a <twi_master_transfer>
			if(twi_master_read(&TWIF,  &packet_read) ==TWI_SUCCESS){
 ec2:	81 11       	cpse	r24, r1
 ec4:	08 c0       	rjmp	.+16     	; 0xed6 <main+0x408>
				sensor_data[4] = recieved_data[1];
 ec6:	d7 01       	movw	r26, r14
 ec8:	11 96       	adiw	r26, 0x01	; 1
 eca:	8c 91       	ld	r24, X
 ecc:	11 97       	sbiw	r26, 0x01	; 1
 ece:	f6 01       	movw	r30, r12
 ed0:	84 83       	std	Z+4, r24	; 0x04
				sensor_data[5] = recieved_data[0];
 ed2:	8c 91       	ld	r24, X
 ed4:	85 83       	std	Z+5, r24	; 0x05
			}
			
			lock = 1;
 ed6:	81 e0       	ldi	r24, 0x01	; 1
 ed8:	80 93 15 20 	sts	0x2015, r24	; 0x802015 <lock>
 edc:	be ce       	rjmp	.-644    	; 0xc5a <main+0x18c>

00000ede <__udivmodsi4>:
 ede:	a1 e2       	ldi	r26, 0x21	; 33
 ee0:	1a 2e       	mov	r1, r26
 ee2:	aa 1b       	sub	r26, r26
 ee4:	bb 1b       	sub	r27, r27
 ee6:	fd 01       	movw	r30, r26
 ee8:	0d c0       	rjmp	.+26     	; 0xf04 <__udivmodsi4_ep>

00000eea <__udivmodsi4_loop>:
 eea:	aa 1f       	adc	r26, r26
 eec:	bb 1f       	adc	r27, r27
 eee:	ee 1f       	adc	r30, r30
 ef0:	ff 1f       	adc	r31, r31
 ef2:	a2 17       	cp	r26, r18
 ef4:	b3 07       	cpc	r27, r19
 ef6:	e4 07       	cpc	r30, r20
 ef8:	f5 07       	cpc	r31, r21
 efa:	20 f0       	brcs	.+8      	; 0xf04 <__udivmodsi4_ep>
 efc:	a2 1b       	sub	r26, r18
 efe:	b3 0b       	sbc	r27, r19
 f00:	e4 0b       	sbc	r30, r20
 f02:	f5 0b       	sbc	r31, r21

00000f04 <__udivmodsi4_ep>:
 f04:	66 1f       	adc	r22, r22
 f06:	77 1f       	adc	r23, r23
 f08:	88 1f       	adc	r24, r24
 f0a:	99 1f       	adc	r25, r25
 f0c:	1a 94       	dec	r1
 f0e:	69 f7       	brne	.-38     	; 0xeea <__udivmodsi4_loop>
 f10:	60 95       	com	r22
 f12:	70 95       	com	r23
 f14:	80 95       	com	r24
 f16:	90 95       	com	r25
 f18:	9b 01       	movw	r18, r22
 f1a:	ac 01       	movw	r20, r24
 f1c:	bd 01       	movw	r22, r26
 f1e:	cf 01       	movw	r24, r30
 f20:	08 95       	ret

00000f22 <_exit>:
 f22:	f8 94       	cli

00000f24 <__stop_program>:
 f24:	ff cf       	rjmp	.-2      	; 0xf24 <__stop_program>
